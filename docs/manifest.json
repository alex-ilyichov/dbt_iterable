{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v1.json", "dbt_version": "0.19.1", "generated_at": "2021-07-01T03:37:30.357222Z", "invocation_id": "d43ed983-03f9-42ae-a735-9bd0b9f95111", "env": {}, "project_id": "726648524a3768595307d45548dac26e", "user_id": "57178664-37b2-4047-9572-68ec8b488cd7", "send_anonymous_usage_stats": true, "adapter_type": "bigquery"}, "nodes": {"seed.iterable_integration_tests.user_unsubscribed_message_type_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "message_type_id": "INT64"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests", "fqn": ["iterable_integration_tests", "user_unsubscribed_message_type_history_data"], "unique_id": "seed.iterable_integration_tests.user_unsubscribed_message_type_history_data", "package_name": "iterable_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests", "path": "user_unsubscribed_message_type_history_data.csv", "original_file_path": "data/user_unsubscribed_message_type_history_data.csv", "name": "user_unsubscribed_message_type_history_data", "alias": "user_unsubscribed_message_type_history_data", "checksum": {"name": "sha256", "checksum": "fc48afe6cd985667c411e549e65f6ced089d09f40ec2cdc80dd6ae59d7204c0d"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"message_type_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}"}}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests`.`user_unsubscribed_message_type_history_data`"}, "seed.iterable_integration_tests.user_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests", "fqn": ["iterable_integration_tests", "user_history_data"], "unique_id": "seed.iterable_integration_tests.user_history_data", "package_name": "iterable_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests", "path": "user_history_data.csv", "original_file_path": "data/user_history_data.csv", "name": "user_history_data", "alias": "user_history_data", "checksum": {"name": "sha256", "checksum": "a352852424e8363f54d1f240ab049606ff4b2a27163a30a35357a8d93ea60dab"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"_fivetran_synced": "timestamp"}}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests`.`user_history_data`"}, "seed.iterable_integration_tests.campaign_suppression_list_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests", "fqn": ["iterable_integration_tests", "campaign_suppression_list_history_data"], "unique_id": "seed.iterable_integration_tests.campaign_suppression_list_history_data", "package_name": "iterable_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests", "path": "campaign_suppression_list_history_data.csv", "original_file_path": "data/campaign_suppression_list_history_data.csv", "name": "campaign_suppression_list_history_data", "alias": "campaign_suppression_list_history_data", "checksum": {"name": "sha256", "checksum": "c5c35e247b3a31225afddec1a2f5beb0adfcaf4bf60721121f07a9db64f3fbbc"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"_fivetran_synced": "timestamp"}}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests`.`campaign_suppression_list_history_data`"}, "seed.iterable_integration_tests.campaign_list_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests", "fqn": ["iterable_integration_tests", "campaign_list_history_data"], "unique_id": "seed.iterable_integration_tests.campaign_list_history_data", "package_name": "iterable_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests", "path": "campaign_list_history_data.csv", "original_file_path": "data/campaign_list_history_data.csv", "name": "campaign_list_history_data", "alias": "campaign_list_history_data", "checksum": {"name": "sha256", "checksum": "6b5a41243873190001d23094e5aa29b9fa1330cf852cb3c79f9ef53df5763292"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"_fivetran_synced": "timestamp"}}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests`.`campaign_list_history_data`"}, "seed.iterable_integration_tests.template_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests", "fqn": ["iterable_integration_tests", "template_history_data"], "unique_id": "seed.iterable_integration_tests.template_history_data", "package_name": "iterable_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests", "path": "template_history_data.csv", "original_file_path": "data/template_history_data.csv", "name": "template_history_data", "alias": "template_history_data", "checksum": {"name": "sha256", "checksum": "1bb816e86e95c24ae4b18f12c876c8ce09c81eb3c31273f5e8e8a40271cbbd92"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"_fivetran_synced": "timestamp"}}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests`.`template_history_data`"}, "seed.iterable_integration_tests.event_extension_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "payload": "string"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests", "fqn": ["iterable_integration_tests", "event_extension_data"], "unique_id": "seed.iterable_integration_tests.event_extension_data", "package_name": "iterable_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests", "path": "event_extension_data.csv", "original_file_path": "data/event_extension_data.csv", "name": "event_extension_data", "alias": "event_extension_data", "checksum": {"name": "sha256", "checksum": "8bb0120c5aec7717e04ee9bb0d91be54525aa88b8d94419267923d2d51dbc8aa"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"payload": "{{ 'varchar(100)'  if target.type in ('redshift', 'postgres') else 'string'}}"}}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests`.`event_extension_data`"}, "seed.iterable_integration_tests.channel_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "id": "INT64"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests", "fqn": ["iterable_integration_tests", "channel_data"], "unique_id": "seed.iterable_integration_tests.channel_data", "package_name": "iterable_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests", "path": "channel_data.csv", "original_file_path": "data/channel_data.csv", "name": "channel_data", "alias": "channel_data", "checksum": {"name": "sha256", "checksum": "123db5a6b276a09bad786967fe3eb0060738508a0235bcd92fb878059f1418c4"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}"}}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests`.`channel_data`"}, "seed.iterable_integration_tests.user_unsubscribed_channel_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "channel_id": "INT64"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests", "fqn": ["iterable_integration_tests", "user_unsubscribed_channel_history_data"], "unique_id": "seed.iterable_integration_tests.user_unsubscribed_channel_history_data", "package_name": "iterable_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests", "path": "user_unsubscribed_channel_history_data.csv", "original_file_path": "data/user_unsubscribed_channel_history_data.csv", "name": "user_unsubscribed_channel_history_data", "alias": "user_unsubscribed_channel_history_data", "checksum": {"name": "sha256", "checksum": "cbcf35dbe806ae22ba30067e46ada18f4e49fac5c0a063a866fe5d15853339af"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"channel_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}"}}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests`.`user_unsubscribed_channel_history_data`"}, "seed.iterable_integration_tests.user_device_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests", "fqn": ["iterable_integration_tests", "user_device_history_data"], "unique_id": "seed.iterable_integration_tests.user_device_history_data", "package_name": "iterable_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests", "path": "user_device_history_data.csv", "original_file_path": "data/user_device_history_data.csv", "name": "user_device_history_data", "alias": "user_device_history_data", "checksum": {"name": "sha256", "checksum": "5ee0aa8024231fcdf2581fa0a05f41910236f05ecbcd202e1eaefeaa19e9b942"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"_fivetran_synced": "timestamp"}}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests`.`user_device_history_data`"}, "seed.iterable_integration_tests.campaign_label_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests", "fqn": ["iterable_integration_tests", "campaign_label_history_data"], "unique_id": "seed.iterable_integration_tests.campaign_label_history_data", "package_name": "iterable_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests", "path": "campaign_label_history_data.csv", "original_file_path": "data/campaign_label_history_data.csv", "name": "campaign_label_history_data", "alias": "campaign_label_history_data", "checksum": {"name": "sha256", "checksum": "779ac5d0dc0f1b647e197af3378d3226ec92c9fefa1cfd05ed5f447f81645bb3"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"_fivetran_synced": "timestamp"}}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests`.`campaign_label_history_data`"}, "seed.iterable_integration_tests.campaign_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests", "fqn": ["iterable_integration_tests", "campaign_history_data"], "unique_id": "seed.iterable_integration_tests.campaign_history_data", "package_name": "iterable_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests", "path": "campaign_history_data.csv", "original_file_path": "data/campaign_history_data.csv", "name": "campaign_history_data", "alias": "campaign_history_data", "checksum": {"name": "sha256", "checksum": "67af6f24672ccfd401d619f204b27324254979c25f1b296da9978c10da88d43d"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"_fivetran_synced": "timestamp"}}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests`.`campaign_history_data`"}, "seed.iterable_integration_tests.message_type_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "id": "INT64", "channel_id": "INT64"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests", "fqn": ["iterable_integration_tests", "message_type_data"], "unique_id": "seed.iterable_integration_tests.message_type_data", "package_name": "iterable_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests", "path": "message_type_data.csv", "original_file_path": "data/message_type_data.csv", "name": "message_type_data", "alias": "message_type_data", "checksum": {"name": "sha256", "checksum": "554080d0fffca5b9ff6524541513e63f2f251f36823cd9f40393d83f1c082eef"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}", "channel_id": "{%- if target.type == 'bigquery' -%} INT64 {%- else -%} bigint {%- endif -%}"}}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests`.`message_type_data`"}, "seed.iterable_integration_tests.campaign_metrics_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests", "fqn": ["iterable_integration_tests", "campaign_metrics_data"], "unique_id": "seed.iterable_integration_tests.campaign_metrics_data", "package_name": "iterable_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests", "path": "campaign_metrics_data.csv", "original_file_path": "data/campaign_metrics_data.csv", "name": "campaign_metrics_data", "alias": "campaign_metrics_data", "checksum": {"name": "sha256", "checksum": "0d8bd317f335734235dbe14136baacfb49d72f697ddbd03a8e4ebc52c80de06b"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"_fivetran_synced": "timestamp"}}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests`.`campaign_metrics_data`"}, "seed.iterable_integration_tests.list_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests", "fqn": ["iterable_integration_tests", "list_data"], "unique_id": "seed.iterable_integration_tests.list_data", "package_name": "iterable_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests", "path": "list_data.csv", "original_file_path": "data/list_data.csv", "name": "list_data", "alias": "list_data", "checksum": {"name": "sha256", "checksum": "0a60614611d2f3d75c45056e49e0ce829e0145bd867c7a25ae9bb6cec988f2f5"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"_fivetran_synced": "timestamp"}}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests`.`list_data`"}, "seed.iterable_integration_tests.event_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "transactional_data": "string", "created_at": "timestamp"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests", "fqn": ["iterable_integration_tests", "event_data"], "unique_id": "seed.iterable_integration_tests.event_data", "package_name": "iterable_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests", "path": "event_data.csv", "original_file_path": "data/event_data.csv", "name": "event_data", "alias": "event_data", "checksum": {"name": "sha256", "checksum": "d3518c86fcfaf17b0436480adcc6d16d5af3f4f32a07ccfbf4fe20617a867eed"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"transactional_data": "{{ 'varchar(100)'  if target.type in ('redshift', 'postgres') else 'string'}}", "created_at": "timestamp"}}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests`.`event_data`"}, "model.iterable.iterable__events": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        unique_key='event_id',\n        partition_by={\n            \"field\": \"created_on\",\n            \"data_type\": \"date\"\n        } if target.type == 'bigquery' else none,\n        incremental_strategy = 'merge',\n        file_format = 'delta'\n    )\n}}\n\nwith events as (\n\n    select *\n    from {{ var('event') }}\n\n    {% if is_incremental() %}\n    where created_at >= (select max(created_at) from {{ this }} )\n    {% endif %}\n\n), campaign as (\n\n    select *\n    from {{ ref('int_iterable__recurring_campaigns') }}\n\n), event_extension as (\n\n    select *\n    from {{ var('event_extension') }}\n\n), users as (\n\n    select *\n    from {{ ref('int_iterable__latest_user') }}\n\n), message_type_channel as (\n\n    select *\n    from {{ ref('int_iterable__message_type_channel') }}\n\n), template as (\n\n    select *\n    from {{ ref('int_iterable__latest_template') }}\n\n), event_join as (\n\n    select \n        events.*,\n        campaign.campaign_name,\n        campaign.campaign_type,\n        campaign.is_campaign_recurring,\n        campaign.recurring_campaign_name,\n        campaign.recurring_campaign_id,\n\n        users.user_id,\n        users.first_name || ' ' || users.last_name as user_full_name,\n\n        message_type_channel.message_type_name,\n        message_type_channel.message_medium,\n        message_type_channel.channel_id,\n        message_type_channel.channel_name,\n        message_type_channel.channel_type,\n\n        {% set exclude_fields = [\"event_id\", \"content_id\", \"_fivetran_synced\"] %}\n        {{ dbt_utils.star(from=ref('stg_iterable__event_extension'), except= exclude_fields | upper if target.type == 'snowflake' else exclude_fields ) }}\n        ,\n        campaign.template_id,\n        template.template_name,\n        template.creator_user_id as template_creator_user_id\n        \n    from events \n    left join event_extension \n        on events.event_id = event_extension.event_id\n    left join campaign \n        on events.campaign_id = campaign.campaign_id\n    left join users\n        on events.email = users.email\n    left join message_type_channel\n        on events.message_type_id = message_type_channel.message_type_id\n    left join template \n        on campaign.template_id = template.template_id\n)\n\nselect *\nfrom event_join", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.star"], "nodes": ["model.iterable_source.stg_iterable__event", "model.iterable.int_iterable__recurring_campaigns", "model.iterable_source.stg_iterable__event_extension", "model.iterable.int_iterable__latest_user", "model.iterable.int_iterable__message_type_channel", "model.iterable.int_iterable__latest_template", "model.iterable_source.stg_iterable__event_extension"]}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "iterable", "database": null, "tags": [], "full_refresh": null, "partition_by": {"field": "created_on", "data_type": "date"}, "unique_key": "event_id", "incremental_strategy": "merge", "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_iterable", "fqn": ["iterable", "iterable__events"], "unique_id": "model.iterable.iterable__events", "package_name": "iterable", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable", "path": "iterable__events.sql", "original_file_path": "models/iterable__events.sql", "name": "iterable__events", "alias": "iterable__events", "checksum": {"name": "sha256", "checksum": "48850d87167c833c7f063c5264db3c53b1cec68835a118687762c5f456f4db8b"}, "tags": [], "refs": [["stg_iterable__event"], ["int_iterable__recurring_campaigns"], ["stg_iterable__event_extension"], ["int_iterable__latest_user"], ["int_iterable__message_type_channel"], ["int_iterable__latest_template"], ["stg_iterable__event_extension"]], "sources": [], "description": "Table that provides a comprehensive view of all events with enriched information such as the campaign, user effected, and template used.", "columns": {"event_id": {"name": "event_id", "description": "Unique id of the event generated by Fivetran", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Reference to the campaign from which the event originated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "content_id": {"name": "content_id", "description": "Reference to the content the event is associated with", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Creation timestamp as epoch time in milliseconds", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "Reference to the unique user the event was applied to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "additional_properties": {"name": "additional_properties", "description": "json object containing addition event properties", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_name": {"name": "event_name", "description": "Name provided to the individual event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "message_bus_id": {"name": "message_bus_id", "description": "Reference to the message bus associated with the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "message_id": {"name": "message_id", "description": "Reference to the message the event is associated with", "meta": {}, "data_type": null, "quote": null, "tags": []}, "message_type_id": {"name": "message_type_id", "description": "Reference to the type of message the event is associated with", "meta": {}, "data_type": null, "quote": null, "tags": []}, "recipient_state": {"name": "recipient_state", "description": "The state of the recipient upon receiving the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Status of the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transactional_data": {"name": "transactional_data", "description": "Transactional data associated with the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unsub_source": {"name": "unsub_source", "description": "Source of the unsubscribe event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_agent": {"name": "user_agent", "description": "User agent associated with the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_agent_device": {"name": "user_agent_device", "description": "The device of the user agent", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when the event record was synced by Fivetran", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_type": {"name": "campaign_type", "description": "The type of campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_campaign_recurring": {"name": "is_campaign_recurring", "description": "Boolean indicating if the campaign is recurrent", "meta": {}, "data_type": null, "quote": null, "tags": []}, "recurring_campaign_name": {"name": "recurring_campaign_name", "description": "The name of the recurring campaign (if applicable)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "recurring_campaign_id": {"name": "recurring_campaign_id", "description": "The campaign if of the recurring campaign (if applicable)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "User defined identifier of the user. This is not a unique field", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_full_name": {"name": "user_full_name", "description": "Full name of the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "message_type_name": {"name": "message_type_name", "description": "Name of the message type", "meta": {}, "data_type": null, "quote": null, "tags": []}, "message_medium": {"name": "message_medium", "description": "Medium of the message", "meta": {}, "data_type": null, "quote": null, "tags": []}, "channel_id": {"name": "channel_id", "description": "Unique identifier of the channel", "meta": {}, "data_type": null, "quote": null, "tags": []}, "channel_name": {"name": "channel_name", "description": "The channel name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "channel_type": {"name": "channel_type", "description": "The type of channel", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_app_already_running": {"name": "is_app_already_running", "description": "Boolean indicating if the app is already running", "meta": {}, "data_type": null, "quote": null, "tags": []}, "badge": {"name": "badge", "description": "Badge associated with the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "canonical_url_id": {"name": "canonical_url_id", "description": "Reference to the url associated with the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_content_available": {"name": "is_content_available", "description": "Content available from the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deeplink_android": {"name": "deeplink_android", "description": "Deeplink associated with the event from an android device", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deeplink_ios": {"name": "deeplink_ios", "description": "Deeplink associated with the event from an ios device", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device": {"name": "device", "description": "The device associated with the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_id": {"name": "email_id", "description": "Reference to the email associated with the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_subject": {"name": "email_subject", "description": "Subject of the email associated with the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "experiment_id": {"name": "experiment_id", "description": "Reference to the experiment used if the event is an experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_phone_number_id": {"name": "from_phone_number_id", "description": "Reference to the phone number which the event is from", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_smssender_id": {"name": "from_smssender_id", "description": "Reference to the sms sender which the event is from", "meta": {}, "data_type": null, "quote": null, "tags": []}, "image_url": {"name": "image_url", "description": "Image url of the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_ghost_push": {"name": "is_ghost_push", "description": "Boolean indicating if the event is a result of a ghost push", "meta": {}, "data_type": null, "quote": null, "tags": []}, "link_id": {"name": "link_id", "description": "Reference to the link associated with the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "link_url": {"name": "link_url", "description": "Url of the link associated with the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "locale": {"name": "locale", "description": "Locale associated with the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payload": {"name": "payload", "description": "Payload resulted from the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "platform_endpoint": {"name": "platform_endpoint", "description": "The specific platform endpoint of the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "push_message": {"name": "push_message", "description": "Boolean indicating if the event is a push message", "meta": {}, "data_type": null, "quote": null, "tags": []}, "region": {"name": "region", "description": "Region of the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sms_message": {"name": "sms_message", "description": "Boolean indicating if the event is an sms message", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sms_provider_response_code": {"name": "sms_provider_response_code", "description": "sms provider response code from the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sms_provider_response_message": {"name": "sms_provider_response_message", "description": "sms provider response message from the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sms_provider_response_more_info": {"name": "sms_provider_response_more_info", "description": "sms provider response addition info from the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sms_provider_response_status": {"name": "sms_provider_response_status", "description": "Status of the sms provider response from the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sound": {"name": "sound", "description": "Boolean indicating if a sound was used with the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "to_phone_number": {"name": "to_phone_number", "description": "To phone number associated with the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url": {"name": "url", "description": "Url associated with the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "workflow_id": {"name": "workflow_id", "description": "Reference to the workflow which the event originated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "workflow_name": {"name": "workflow_name", "description": "Name of the workflow which the event originated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "template_id": {"name": "template_id", "description": "Unique identifer of the template", "meta": {}, "data_type": null, "quote": null, "tags": []}, "template_name": {"name": "template_name", "description": "User defined name of the template", "meta": {}, "data_type": null, "quote": null, "tags": []}, "template_creator_user_id": {"name": "template_creator_user_id", "description": "Reference to the user who created the template", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_on": {"name": "created_on", "description": "Timestamp of when the event was created", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/iterable.yml", "build_path": "target/compiled/iterable/models/iterable__events.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "iterable", "unique_key": "event_id", "partition_by": {"field": "created_on", "data_type": "date"}, "incremental_strategy": "merge", "file_format": "delta"}, "compiled_sql": "\n\nwith events as (\n\n    select *\n    from `dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__event`\n\n    \n    where created_at >= (select max(created_at) from `dbt-package-testing`.`iterable_integration_tests_iterable`.`iterable__events` )\n    \n\n), campaign as (\n\n    select *\n    from `dbt-package-testing`.`iterable_integration_tests_int_iterable`.`int_iterable__recurring_campaigns`\n\n), event_extension as (\n\n    select *\n    from `dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__event_extension`\n\n), users as (\n\n    select *\n    from `dbt-package-testing`.`iterable_integration_tests_int_iterable`.`int_iterable__latest_user`\n\n), message_type_channel as (\n\n    select *\n    from `dbt-package-testing`.`iterable_integration_tests_int_iterable`.`int_iterable__message_type_channel`\n\n), template as (\n\n    select *\n    from `dbt-package-testing`.`iterable_integration_tests_int_iterable`.`int_iterable__latest_template`\n\n), event_join as (\n\n    select \n        events.*,\n        campaign.campaign_name,\n        campaign.campaign_type,\n        campaign.is_campaign_recurring,\n        campaign.recurring_campaign_name,\n        campaign.recurring_campaign_id,\n\n        users.user_id,\n        users.first_name || ' ' || users.last_name as user_full_name,\n\n        message_type_channel.message_type_name,\n        message_type_channel.message_medium,\n        message_type_channel.channel_id,\n        message_type_channel.channel_name,\n        message_type_channel.channel_type,\n\n        \n        `is_app_already_running`,\n  `badge`,\n  `canonical_url_id`,\n  `is_content_available`,\n  `deeplink_android`,\n  `deeplink_ios`,\n  `device`,\n  `email_id`,\n  `email_subject`,\n  `experiment_id`,\n  `from_phone_number_id`,\n  `from_smssender_id`,\n  `image_url`,\n  `is_ghost_push`,\n  `link_id`,\n  `link_url`,\n  `locale`,\n  `payload`,\n  `platform_endpoint`,\n  `push_message`,\n  `region`,\n  `sms_message`,\n  `sms_provider_response_code`,\n  `sms_provider_response_message`,\n  `sms_provider_response_more_info`,\n  `sms_provider_response_status`,\n  `sound`,\n  `to_phone_number`,\n  `url`,\n  `workflow_id`,\n  `workflow_name`\n        ,\n        campaign.template_id,\n        template.template_name,\n        template.creator_user_id as template_creator_user_id\n        \n    from events \n    left join event_extension \n        on events.event_id = event_extension.event_id\n    left join campaign \n        on events.campaign_id = campaign.campaign_id\n    left join users\n        on events.email = users.email\n    left join message_type_channel\n        on events.message_type_id = message_type_channel.message_type_id\n    left join template \n        on campaign.template_id = template.template_id\n)\n\nselect *\nfrom event_join", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests_iterable`.`iterable__events`"}, "model.iterable.iterable__campaigns": {"raw_sql": "with campaign_event_metrics as (\n\n    select *\n    from {{ ref('int_iterable__campaign_event_metrics') }}\n\n), campaign_list_metrics as (\n\n    select\n        campaign_id,\n        sum(case when list_activity = 'send' then 1 else 0 end) as count_send_lists,\n        sum(case when list_activity = 'suppress' then 1 else 0 end) as count_suppress_lists\n    \n    from {{ ref('int_iterable__campaign_lists') }}\n    group by campaign_id\n\n), campaign as (\n\n    select *\n    from {{ ref('int_iterable__recurring_campaigns') }}\n    \n{% if var('iterable__using_campaign_label_history', true) %}\n), campaign_labels as (\n\n    select *\n    from {{ ref('int_iterable__campaign_labels') }}\n\n{% endif %}\n\n), template as (\n    -- rebringing this in (it is brought in iterable__events) in case any campaigns don't have events yet\n    -- this will result in some DAG ugliness but maintains template info for non-sent campaigns\n    select *\n    from {{ ref('int_iterable__latest_template') }}\n\n), campaign_join as (\n\n    {% set exclude_fields = [ 'campaign_id', 'template_id'] %} -- these are both in campaigns\n    {% set exclude_fields = exclude_fields | upper if target.type == 'snowflake' else exclude_fields %} -- snowflake needs uppercase :)\n\n    -- this query will be at the campaign-experiment variation grain\n    select\n        campaign.*,\n        {{ dbt_utils.star(from=ref('int_iterable__campaign_event_metrics'), except=exclude_fields) }}\n        , \n        campaign_list_metrics.count_send_lists,\n        campaign_list_metrics.count_suppress_lists,\n        {% if var('iterable__using_campaign_label_history', true) %}\n        campaign_labels.labels,\n        {% endif %}\n        template.template_name,\n        template.creator_user_id as template_creator_user_id,\n        template.message_medium,\n        template.message_type_name,\n        template.channel_name,\n        template.channel_id,\n        template.channel_type\n\n    from campaign\n    left join campaign_event_metrics \n        on campaign.campaign_id = campaign_event_metrics.campaign_id\n    left join campaign_list_metrics \n        on campaign.campaign_id = campaign_list_metrics.campaign_id\n\n    {% if var('iterable__using_campaign_label_history', true) %}\n    left join campaign_labels \n        on campaign.campaign_id = campaign_labels.campaign_id\n    {% endif %}\n    \n    left join template\n        on campaign.template_id = template.template_id\n)\n\nselect *\nfrom campaign_join", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.star"], "nodes": ["model.iterable.int_iterable__campaign_event_metrics", "model.iterable.int_iterable__campaign_lists", "model.iterable.int_iterable__recurring_campaigns", "model.iterable.int_iterable__campaign_labels", "model.iterable.int_iterable__latest_template", "model.iterable.int_iterable__campaign_event_metrics"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "iterable", "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_iterable", "fqn": ["iterable", "iterable__campaigns"], "unique_id": "model.iterable.iterable__campaigns", "package_name": "iterable", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable", "path": "iterable__campaigns.sql", "original_file_path": "models/iterable__campaigns.sql", "name": "iterable__campaigns", "alias": "iterable__campaigns", "checksum": {"name": "sha256", "checksum": "a1baa55c7b1722c64014e8e621af3ea59a1184ff8a0ee1a501e1a1d4934f106b"}, "tags": [], "refs": [["int_iterable__campaign_event_metrics"], ["int_iterable__campaign_lists"], ["int_iterable__recurring_campaigns"], ["int_iterable__campaign_labels"], ["int_iterable__latest_template"], ["int_iterable__campaign_event_metrics"]], "sources": [], "description": "Table that provides aggregations for campaigns at the experiment grain.", "columns": {"campaign_id": {"name": "campaign_id", "description": "Unique identifier of the campaign record", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "User defined name of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Last update timestamp as epoch time in milliseconds", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_state": {"name": "campaign_state", "description": "State of the campaign. Can be Draft, Ready, Scheduled, Running, Finished, Starting, Aborted or Recurring", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_type": {"name": "campaign_type", "description": "The campaign type. Can be Blast or Triggered", "meta": {}, "data_type": null, "quote": null, "tags": []}, "send_size": {"name": "send_size", "description": "Size of the campaign. Number of individuals included in the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_at": {"name": "start_at", "description": "Start timestamp as epoch time in milliseconds", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ended_at": {"name": "ended_at", "description": "Ended timestamp as epoch time in milliseconds", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Creation timestamp as epoch time in milliseconds", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_by_user_id": {"name": "created_by_user_id", "description": "Reference to the user who created the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "template_id": {"name": "template_id", "description": "Reference to the campaign template", "meta": {}, "data_type": null, "quote": null, "tags": []}, "recurring_campaign_id": {"name": "recurring_campaign_id", "description": "Unique identifier of the recurring campaign (if applicable)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "recurring_campaign_name": {"name": "recurring_campaign_name", "description": "Name of the recurring campaign (if applicable)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "recurring_campaign_state": {"name": "recurring_campaign_state", "description": "State of the recurring campaign (if applicable)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "recurring_campaign_send_size": {"name": "recurring_campaign_send_size", "description": "Size of the recurring campaign. Number of individuals included in the recurring campaign (if applicable)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "recurring_campaign_start_at": {"name": "recurring_campaign_start_at", "description": "Timestamp of when the recurring campaign started (if applicable)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_campaign_recurring": {"name": "is_campaign_recurring", "description": "Boolean indicating if the campaign is a recurring campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "experiment_id": {"name": "experiment_id", "description": "Reference to the experiment used if the event is an experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_unique_users": {"name": "count_unique_users", "description": "Count of total unique users within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_emailclick": {"name": "total_emailclick", "description": "Total email clicks within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unique_total_emailclick": {"name": "unique_total_emailclick", "description": "Unique email clicks within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_emailunsubscribe": {"name": "total_emailunsubscribe", "description": "Total email unsubscribe events within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unique_total_emailunsubscribe": {"name": "unique_total_emailunsubscribe", "description": "Unique total email unsubscribe events within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_emailcomplaint": {"name": "total_emailcomplaint", "description": "Total email complaints within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unique_total_emailcomplaint": {"name": "unique_total_emailcomplaint", "description": "Unique total email complaints within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_customevent": {"name": "total_customevent", "description": "Total custom events within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unique_total_customevent": {"name": "unique_total_customevent", "description": "Unique total custom events within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_emailsubscribe": {"name": "total_emailsubscribe", "description": "Total email subscribe events within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unique_total_emailsubscribe": {"name": "unique_total_emailsubscribe", "description": "Unique total email subscribe events within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_emailopen": {"name": "total_emailopen", "description": "Total email open events within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unique_total_emailopen": {"name": "unique_total_emailopen", "description": "Unique total email open events within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_pushsend": {"name": "total_pushsend", "description": "Total push send event within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unique_total_pushsend": {"name": "unique_total_pushsend", "description": "Unique total push send events within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_smsbounce": {"name": "total_smsbounce", "description": "Total sms bounce events within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unique_total_smsbounce": {"name": "unique_total_smsbounce", "description": "Unique total sms bounce events within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_pushbounce": {"name": "total_pushbounce", "description": "Total push bounce events within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unique_total_pushbounce": {"name": "unique_total_pushbounce", "description": "Unique total push bounce events within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_inappsendskip": {"name": "total_inappsendskip", "description": "Total in app send skip events within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unique_total_inappsendskip": {"name": "unique_total_inappsendskip", "description": "Unique total in app send skip events within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_smssend": {"name": "total_smssend", "description": "Total sms send events within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unique_total_smssend": {"name": "unique_total_smssend", "description": "Unique total sms send events within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_inappsend": {"name": "total_inappsend", "description": "Total in app send events within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unique_total_inappsend": {"name": "unique_total_inappsend", "description": "Unique total in app send events within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_pushopen": {"name": "total_pushopen", "description": "Total push open events within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unique_total_pushopen": {"name": "unique_total_pushopen", "description": "Unique total push open events within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_emailsend": {"name": "total_emailsend", "description": "Total email send events within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unique_total_emailsend": {"name": "unique_total_emailsend", "description": "Unique total email send events within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_pushsendskip": {"name": "total_pushsendskip", "description": "Total push send skip events within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unique_total_pushsendskip": {"name": "unique_total_pushsendskip", "description": "Unique total push send skip events within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_inappopen": {"name": "total_inappopen", "description": "Total in app open events within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unique_total_inappopen": {"name": "unique_total_inappopen", "description": "Unique total in app open events within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_emailsendskip": {"name": "total_emailsendskip", "description": "Total email send skip events within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unique_total_emailsendskip": {"name": "unique_total_emailsendskip", "description": "Unique total email send skip events within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_emailbounce": {"name": "total_emailbounce", "description": "Total email bounce events within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unique_total_emailbounce": {"name": "unique_total_emailbounce", "description": "Unique total email bounce events within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_inappclick": {"name": "total_inappclick", "description": "Total in app click events within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unique_total_inappclick": {"name": "unique_total_inappclick", "description": "Unique total in app click events within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_pushuninstall": {"name": "total_pushuninstall", "description": "Total push uninstall events within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unique_total_pushuninstall": {"name": "unique_total_pushuninstall", "description": "Unique total push uninstall events within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_send_lists": {"name": "count_send_lists", "description": "Count of send lists within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_suppress_lists": {"name": "count_suppress_lists", "description": "Count of suppress lists within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "labels": {"name": "labels", "description": "List of labels associated with the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "template_name": {"name": "template_name", "description": "Name of the template associated with the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "template_creator_user_id": {"name": "template_creator_user_id", "description": "The creator user id of the template associated with the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "message_medium": {"name": "message_medium", "description": "The medium which the message was provided", "meta": {}, "data_type": null, "quote": null, "tags": []}, "message_type_name": {"name": "message_type_name", "description": "The message type name associated with the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "channel_name": {"name": "channel_name", "description": "The channel name associated with the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "channel_id": {"name": "channel_id", "description": "The channel identifier associated with the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "channel_type": {"name": "channel_type", "description": "The channel type associated with the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/iterable.yml", "build_path": "target/compiled/iterable/models/iterable__campaigns.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "iterable"}, "compiled_sql": "with campaign_event_metrics as (\n\n    select *\n    from `dbt-package-testing`.`iterable_integration_tests_int_iterable`.`int_iterable__campaign_event_metrics`\n\n), campaign_list_metrics as (\n\n    select\n        campaign_id,\n        sum(case when list_activity = 'send' then 1 else 0 end) as count_send_lists,\n        sum(case when list_activity = 'suppress' then 1 else 0 end) as count_suppress_lists\n    \n    from `dbt-package-testing`.`iterable_integration_tests_int_iterable`.`int_iterable__campaign_lists`\n    group by campaign_id\n\n), campaign as (\n\n    select *\n    from `dbt-package-testing`.`iterable_integration_tests_int_iterable`.`int_iterable__recurring_campaigns`\n    \n\n), campaign_labels as (\n\n    select *\n    from `dbt-package-testing`.`iterable_integration_tests_int_iterable`.`int_iterable__campaign_labels`\n\n\n\n), template as (\n    -- rebringing this in (it is brought in iterable__events) in case any campaigns don't have events yet\n    -- this will result in some DAG ugliness but maintains template info for non-sent campaigns\n    select *\n    from `dbt-package-testing`.`iterable_integration_tests_int_iterable`.`int_iterable__latest_template`\n\n), campaign_join as (\n\n     -- these are both in campaigns\n     -- snowflake needs uppercase :)\n\n    -- this query will be at the campaign-experiment variation grain\n    select\n        campaign.*,\n        `experiment_id`,\n  `count_unique_users`,\n  `total_emailclick`,\n  `unique_total_emailclick`,\n  `total_emailunsubscribe`,\n  `unique_total_emailunsubscribe`,\n  `total_emailcomplaint`,\n  `unique_total_emailcomplaint`,\n  `total_customevent`,\n  `unique_total_customevent`,\n  `total_emailsubscribe`,\n  `unique_total_emailsubscribe`,\n  `total_emailopen`,\n  `unique_total_emailopen`,\n  `total_pushsend`,\n  `unique_total_pushsend`,\n  `total_smsbounce`,\n  `unique_total_smsbounce`,\n  `total_pushbounce`,\n  `unique_total_pushbounce`,\n  `total_inappsendskip`,\n  `unique_total_inappsendskip`,\n  `total_smssend`,\n  `unique_total_smssend`,\n  `total_inappsend`,\n  `unique_total_inappsend`,\n  `total_pushopen`,\n  `unique_total_pushopen`,\n  `total_emailsend`,\n  `unique_total_emailsend`,\n  `total_pushsendskip`,\n  `unique_total_pushsendskip`,\n  `total_inappopen`,\n  `unique_total_inappopen`,\n  `total_emailsendskip`,\n  `unique_total_emailsendskip`,\n  `total_emailbounce`,\n  `unique_total_emailbounce`,\n  `total_inappclick`,\n  `unique_total_inappclick`,\n  `total_pushuninstall`,\n  `unique_total_pushuninstall`\n        , \n        campaign_list_metrics.count_send_lists,\n        campaign_list_metrics.count_suppress_lists,\n        \n        campaign_labels.labels,\n        \n        template.template_name,\n        template.creator_user_id as template_creator_user_id,\n        template.message_medium,\n        template.message_type_name,\n        template.channel_name,\n        template.channel_id,\n        template.channel_type\n\n    from campaign\n    left join campaign_event_metrics \n        on campaign.campaign_id = campaign_event_metrics.campaign_id\n    left join campaign_list_metrics \n        on campaign.campaign_id = campaign_list_metrics.campaign_id\n\n    \n    left join campaign_labels \n        on campaign.campaign_id = campaign_labels.campaign_id\n    \n    \n    left join template\n        on campaign.template_id = template.template_id\n)\n\nselect *\nfrom campaign_join", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests_iterable`.`iterable__campaigns`"}, "model.iterable.iterable__user_unsubscriptions": {"raw_sql": "with message_type_channel as (\n\n    select *\n    from {{ ref('int_iterable__message_type_channel') }}\n\n), user_unsubscribed_channel_history as (\n\n    select \n        *,\n        rank() over(partition by email order by updated_at desc) as latest_batch_index\n\n    from {{ var('user_unsubscribed_channel_history') }}\n\n{% if var('iterable__using_user_unsubscribed_message_type_history', True) %}\n), user_unsubscribed_message_type_history as (\n\n    select \n        *,\n        rank() over(partition by email order by updated_at desc) as latest_batch_index\n\n    from {{ var('user_unsubscribed_message_type_history') }}\n\n{% endif %}\n), combine_histories as (\n\n-- we are combining because channels are effectively parents of message types\n    select \n        email,\n        channel_id,\n        cast(null as {{ dbt_utils.type_int() }}) as message_type_id,\n        updated_at\n\n    from user_unsubscribed_channel_history\n    where latest_batch_index = 1\n\n{% if var('iterable__using_user_unsubscribed_message_type_history', True) %}\n    union all\n\n    select \n        email,\n        cast(null as {{ dbt_utils.type_int() }}) as channel_id,\n        message_type_id,\n        updated_at\n    \n    from user_unsubscribed_message_type_history\n    where latest_batch_index = 1\n{% endif %}\n\n), final as (\n\n    select \n        combine_histories.email,\n        -- coalescing since message_type -> channel goes up a grain\n        coalesce(combine_histories.channel_id, message_type_channel.channel_id) as channel_id,\n        coalesce(combine_histories.message_type_id, message_type_channel.message_type_id) as message_type_id,\n        message_type_channel.channel_name,\n        message_type_channel.message_type_name,\n        message_type_channel.channel_type,\n        message_type_channel.message_medium,\n        combine_histories.updated_at,\n        case when combine_histories.channel_id is not null then true else false end as is_unsubscribed_channel_wide\n\n    from combine_histories\n\n    -- unsubscribing from an entire channel unsubscribes a user from all message types in that channel\n    join message_type_channel \n        on combine_histories.channel_id = message_type_channel.channel_id\n        or combine_histories.message_type_id = message_type_channel.message_type_id\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.type_int"], "nodes": ["model.iterable.int_iterable__message_type_channel", "model.iterable_source.stg_iterable__user_unsubscribed_channel_history", "model.iterable_source.stg_iterable__user_unsub_message_type_history"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "iterable", "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_iterable", "fqn": ["iterable", "iterable__user_unsubscriptions"], "unique_id": "model.iterable.iterable__user_unsubscriptions", "package_name": "iterable", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable", "path": "iterable__user_unsubscriptions.sql", "original_file_path": "models/iterable__user_unsubscriptions.sql", "name": "iterable__user_unsubscriptions", "alias": "iterable__user_unsubscriptions", "checksum": {"name": "sha256", "checksum": "a36d9aafc1d5838f179183b2bf38ad9995524fc7b1316dd62a35292c8f6d6304"}, "tags": [], "refs": [["int_iterable__message_type_channel"], ["stg_iterable__user_unsubscribed_channel_history"], ["stg_iterable__user_unsub_message_type_history"]], "sources": [], "description": "Table that generates the total channel and message types a user has chosen to unsubscribe.", "columns": {"email": {"name": "email", "description": "Unique identifier of the user as well as their email", "meta": {}, "data_type": null, "quote": null, "tags": []}, "channel_id": {"name": "channel_id", "description": "Unique identifier of the channel which the user is unsubscribed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "message_type_id": {"name": "message_type_id", "description": "Unique identifer of the message type which the user is unsubscribed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "channel_name": {"name": "channel_name", "description": "The name of the channel which the user is unsubscribed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "message_type_name": {"name": "message_type_name", "description": "The name of the message type which the user is unsubscribed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "channel_type": {"name": "channel_type", "description": "The channel type which the user is unsubscribed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "message_medium": {"name": "message_medium", "description": "The medium type the message was provided which the user is unsubscribed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the user unsubscribed from the channel or message type", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_unsubscribed_channel_wide": {"name": "is_unsubscribed_channel_wide", "description": "Boolean indicating if the user unsubscribed at the channel level (i.e. unsubscribed to all message types) or if they unsubscribed from only an individual message type.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/iterable.yml", "build_path": "target/compiled/iterable/models/iterable__user_unsubscriptions.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "iterable"}, "compiled_sql": "with message_type_channel as (\n\n    select *\n    from `dbt-package-testing`.`iterable_integration_tests_int_iterable`.`int_iterable__message_type_channel`\n\n), user_unsubscribed_channel_history as (\n\n    select \n        *,\n        rank() over(partition by email order by updated_at desc) as latest_batch_index\n\n    from `dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__user_unsubscribed_channel_history`\n\n\n), user_unsubscribed_message_type_history as (\n\n    select \n        *,\n        rank() over(partition by email order by updated_at desc) as latest_batch_index\n\n    from `dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__user_unsub_message_type_history`\n\n\n), combine_histories as (\n\n-- we are combining because channels are effectively parents of message types\n    select \n        email,\n        channel_id,\n        cast(null as \n    int64\n) as message_type_id,\n        updated_at\n\n    from user_unsubscribed_channel_history\n    where latest_batch_index = 1\n\n\n    union all\n\n    select \n        email,\n        cast(null as \n    int64\n) as channel_id,\n        message_type_id,\n        updated_at\n    \n    from user_unsubscribed_message_type_history\n    where latest_batch_index = 1\n\n\n), final as (\n\n    select \n        combine_histories.email,\n        -- coalescing since message_type -> channel goes up a grain\n        coalesce(combine_histories.channel_id, message_type_channel.channel_id) as channel_id,\n        coalesce(combine_histories.message_type_id, message_type_channel.message_type_id) as message_type_id,\n        message_type_channel.channel_name,\n        message_type_channel.message_type_name,\n        message_type_channel.channel_type,\n        message_type_channel.message_medium,\n        combine_histories.updated_at,\n        case when combine_histories.channel_id is not null then true else false end as is_unsubscribed_channel_wide\n\n    from combine_histories\n\n    -- unsubscribing from an entire channel unsubscribes a user from all message types in that channel\n    join message_type_channel \n        on combine_histories.channel_id = message_type_channel.channel_id\n        or combine_histories.message_type_id = message_type_channel.message_type_id\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests_iterable`.`iterable__user_unsubscriptions`"}, "model.iterable.iterable__users": {"raw_sql": "with user_event_metrics as (\n\n    select *\n    from {{ ref('int_iterable__user_event_metrics') }}\n\n{% if var('iterable__using_user_device_history', false) %}\n), user_devices as (\n\n    select *\n    from {{ ref('int_iterable__latest_user_device') }}\n\n{% endif %}\n\n), user_unnested as (\n    -- this has all the user fields we're looking to pass through\n\n    select *\n    from {{ ref('int_iterable__list_user_unnest') }}\n\n    -- limit to current lists they are a member of. each list-user combo is a unique row, which we will roll up\n    where is_current\n\n), user_with_list_metrics as (\n\n    select\n        email,\n        first_name,\n        last_name,\n        user_id,\n        signup_date,\n        signup_source,\n        updated_at,\n        phone_number,\n        email_list_ids,\n        count(distinct list_id) as count_lists\n\n    from user_unnested\n    -- roll up to the user\n    {{ dbt_utils.group_by(n=9) }}\n\n), user_join as (\n\n    select \n        user_with_list_metrics.*,\n        {{ dbt_utils.star(from=ref('int_iterable__user_event_metrics'), except=['user_email'] if target.type != 'snowflake' else ['USER_EMAIL']) }}\n        {% if var('iterable__using_user_device_history', false) %}\n        ,\n        user_devices.count_devices\n        {% endif %}\n\n    from user_with_list_metrics\n    left join user_event_metrics \n        on user_with_list_metrics.email = user_event_metrics.user_email\n        \n    {% if var('iterable__using_user_device_history', false) %}\n    left join user_devices\n        on user_with_list_metrics.email = user_devices.email\n    {% endif %}\n)\n\nselect *\nfrom user_join", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.group_by", "macro.dbt_utils.star"], "nodes": ["model.iterable.int_iterable__user_event_metrics", "model.iterable.int_iterable__list_user_unnest", "model.iterable.int_iterable__user_event_metrics"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "iterable", "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_iterable", "fqn": ["iterable", "iterable__users"], "unique_id": "model.iterable.iterable__users", "package_name": "iterable", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable", "path": "iterable__users.sql", "original_file_path": "models/iterable__users.sql", "name": "iterable__users", "alias": "iterable__users", "checksum": {"name": "sha256", "checksum": "d444bbded97fa44385a81e42dcca96878570312760fa5fff7ff41f4a068f8ba7"}, "tags": [], "refs": [["int_iterable__user_event_metrics"], ["int_iterable__list_user_unnest"], ["int_iterable__user_event_metrics"]], "sources": [], "description": "Table that provides unique user enriched information.", "columns": {"email": {"name": "email", "description": "Unique identifier of the user as well as their email", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "First name of the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "Last name of the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "User defined identifier of the user. This is not a unique field", "meta": {}, "data_type": null, "quote": null, "tags": []}, "signup_date": {"name": "signup_date", "description": "Timestamp as epoch time in milliseconds of when the user signed up", "meta": {}, "data_type": null, "quote": null, "tags": []}, "signup_source": {"name": "signup_source", "description": "Source where the user signed up", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Last update timestamp as epoch time in milliseconds", "meta": {}, "data_type": null, "quote": null, "tags": []}, "phone_number": {"name": "phone_number", "description": "Phone number associated with the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_list_ids": {"name": "email_list_ids", "description": "Array of all email lists associated with the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_lists": {"name": "count_lists", "description": "Total count of lists associated with the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_total_campaigns": {"name": "count_total_campaigns", "description": "Count of all campaigns the user has been in", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_event_at": {"name": "first_event_at", "description": "The first event the user ever encountered", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_event_at": {"name": "last_event_at", "description": "The most recent event the user has encountered", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_emailclick": {"name": "total_emailclick", "description": "Total number of email clicks the user has performed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_emailunsubscribe": {"name": "total_emailunsubscribe", "description": "Total unsubscription events the user has performed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_emailcomplaint": {"name": "total_emailcomplaint", "description": "Total email complaints the user has performed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_customevent": {"name": "total_customevent", "description": "Total custom events associated with the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_emailsubscribe": {"name": "total_emailsubscribe", "description": "Total subscription events the user has performed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_emailopen": {"name": "total_emailopen", "description": "Total email opened events the user has performed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_pushsend": {"name": "total_pushsend", "description": "The push send events the user has experienced", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_smsbounce": {"name": "total_smsbounce", "description": "Total sms bounces that are associated with the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_pushbounce": {"name": "total_pushbounce", "description": "Total number of push bounces associated with the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_inappsendskip": {"name": "total_inappsendskip", "description": "Total in app send skips associated with the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_smssend": {"name": "total_smssend", "description": "Total sms sends that the user has experienced", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_inappsend": {"name": "total_inappsend", "description": "Total in app sends the user has experienced", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_pushopen": {"name": "total_pushopen", "description": "Total push messages the user has opened", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_emailsend": {"name": "total_emailsend", "description": "Total emails that have been sent to the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_pushsendskip": {"name": "total_pushsendskip", "description": "Total push sends the user has skipped", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_inappopen": {"name": "total_inappopen", "description": "Total in app opens the user has performed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_emailsendskip": {"name": "total_emailsendskip", "description": "Total email sends the user has skipped", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_emailbounce": {"name": "total_emailbounce", "description": "Total number of emails that have bounced from the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_inappclick": {"name": "total_inappclick", "description": "Total in app clicks associated with the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_pushuninstall": {"name": "total_pushuninstall", "description": "Total push uninstall events the user has performed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_devices": {"name": "count_devices", "description": "Count of all devices that are associated with the user", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/iterable.yml", "build_path": "target/compiled/iterable/models/iterable__users.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "iterable"}, "compiled_sql": "with user_event_metrics as (\n\n    select *\n    from `dbt-package-testing`.`iterable_integration_tests_int_iterable`.`int_iterable__user_event_metrics`\n\n\n\n), user_unnested as (\n    -- this has all the user fields we're looking to pass through\n\n    select *\n    from `dbt-package-testing`.`iterable_integration_tests_int_iterable`.`int_iterable__list_user_unnest`\n\n    -- limit to current lists they are a member of. each list-user combo is a unique row, which we will roll up\n    where is_current\n\n), user_with_list_metrics as (\n\n    select\n        email,\n        first_name,\n        last_name,\n        user_id,\n        signup_date,\n        signup_source,\n        updated_at,\n        phone_number,\n        email_list_ids,\n        count(distinct list_id) as count_lists\n\n    from user_unnested\n    -- roll up to the user\n    group by 1,2,3,4,5,6,7,8,9\n\n), user_join as (\n\n    select \n        user_with_list_metrics.*,\n        `count_total_campaigns`,\n  `first_event_at`,\n  `last_event_at`,\n  `total_emailclick`,\n  `total_emailunsubscribe`,\n  `total_emailcomplaint`,\n  `total_customevent`,\n  `total_emailsubscribe`,\n  `total_emailopen`,\n  `total_pushsend`,\n  `total_smsbounce`,\n  `total_pushbounce`,\n  `total_inappsendskip`,\n  `total_smssend`,\n  `total_inappsend`,\n  `total_pushopen`,\n  `total_emailsend`,\n  `total_pushsendskip`,\n  `total_inappopen`,\n  `total_emailsendskip`,\n  `total_emailbounce`,\n  `total_inappclick`,\n  `total_pushuninstall`\n        \n\n    from user_with_list_metrics\n    left join user_event_metrics \n        on user_with_list_metrics.email = user_event_metrics.user_email\n        \n    \n)\n\nselect *\nfrom user_join", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests_iterable`.`iterable__users`"}, "model.iterable.iterable__user_campaign": {"raw_sql": "with events as (\n\n    select *\n    from {{ ref('iterable__events') }}\n\n), pivot_out_events as (\n\n-- this will be at the user-campaign-experiment variation level\n-- if experiment_id is null, the user-campaign interactions happened outside of an experiment\n-- if campaign_id is null, the user interactions are organic\n    select \n        email as user_email,\n        user_full_name,\n        campaign_id,\n        experiment_id,\n        case when campaign_id is null then 'organic' else campaign_name end as campaign_name,\n        template_id,\n        template_name,\n        \n\n        recurring_campaign_id,\n        recurring_campaign_name,\n\n        min(created_at) as first_event_at,\n        max(created_at) as last_event_at\n\n        -- count up the number of instances of each metric\n        -- `iterable__event_metrics` is set by default to all events brought in by fivetran+iterable\n        -- https://fivetran.com/docs/applications/iterable#schemanotes\n        {% for em in var('iterable__event_metrics') %}\n        , sum(case when lower(event_name) = '{{ em | lower }}' then 1 else 0 end) \n            as {{ 'total_' ~ em | replace(' ', '_') | replace('(', '') | replace(')', '') | lower }} \n        {% endfor %}\n\n    from events\n    {{ dbt_utils.group_by(n=9) }}\n\n)\n\nselect *\nfrom pivot_out_events", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.iterable.iterable__events"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "iterable", "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_iterable", "fqn": ["iterable", "iterable__user_campaign"], "unique_id": "model.iterable.iterable__user_campaign", "package_name": "iterable", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable", "path": "iterable__user_campaign.sql", "original_file_path": "models/iterable__user_campaign.sql", "name": "iterable__user_campaign", "alias": "iterable__user_campaign", "checksum": {"name": "sha256", "checksum": "13b5c6554709c51dd0613796627846b67d0d97659536d5b57e4ed466cb563505"}, "tags": [], "refs": [["iterable__events"]], "sources": [], "description": "Table that provides total and unique metrics for a user associated with particular campaigns.", "columns": {"user_email": {"name": "user_email", "description": "Unique identifier of the user as well as their email", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_full_name": {"name": "user_full_name", "description": "The users first and last name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "The unique identifier of the campaign which the user metrics are associated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the campaign which the user metrics are associated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "template_id": {"name": "template_id", "description": "The unique identifier of the template used within the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "template_name": {"name": "template_name", "description": "The name of the template used for the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "experiment_id": {"name": "experiment_id", "description": "The unique experiment variation of the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "recurring_campaign_id": {"name": "recurring_campaign_id", "description": "The unique identifier of the recurring campaign which the campaign is tied to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "recurring_campaign_name": {"name": "recurring_campaign_name", "description": "The name of the recurring campaign which the campaign is tied to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_event_at": {"name": "first_event_at", "description": "Timestamp of the first campaign/experiment event associated with the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_event_at": {"name": "last_event_at", "description": "Timestamp of the most recent campaign/experiment event associated with the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_emailclick": {"name": "total_emailclick", "description": "Total email clicks events the user took within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_emailunsubscribe": {"name": "total_emailunsubscribe", "description": "Total email unsubscription events the user performed within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_emailcomplaint": {"name": "total_emailcomplaint", "description": "Total email complaint events the user performed within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_customevent": {"name": "total_customevent", "description": "Total custom events associated with the user within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_emailsubscribe": {"name": "total_emailsubscribe", "description": "Total email subscription events associate with the user within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_emailopen": {"name": "total_emailopen", "description": "Total email open events the user performed within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_pushsend": {"name": "total_pushsend", "description": "Total push send events the user performed within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_smsbounce": {"name": "total_smsbounce", "description": "Total sms bounce events associated with the user within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_pushbounce": {"name": "total_pushbounce", "description": "Total push bounce events associated with the user within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_inappsendskip": {"name": "total_inappsendskip", "description": "Total in app send skip events the user performed within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_smssend": {"name": "total_smssend", "description": "Total sms send events associated with the user within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_inappsend": {"name": "total_inappsend", "description": "Total in app send events associated with the user within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_pushopen": {"name": "total_pushopen", "description": "Total push open events the user performed within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_emailsend": {"name": "total_emailsend", "description": "Total email send event associated with the user within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_pushsendskip": {"name": "total_pushsendskip", "description": "Total push send skip events associated with the user within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_inappopen": {"name": "total_inappopen", "description": "Total in app open events associated with the user within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_emailsendskip": {"name": "total_emailsendskip", "description": "Total email send skip events associated with the user within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_emailbounce": {"name": "total_emailbounce", "description": "Total email bounce events associated with the user within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_inappclick": {"name": "total_inappclick", "description": "Total in app click events associated with the user within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_pushuninstall": {"name": "total_pushuninstall", "description": "Total push uninstall events associated with the user within the campaign/experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/iterable.yml", "build_path": "target/compiled/iterable/models/iterable__user_campaign.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "iterable"}, "compiled_sql": "with events as (\n\n    select *\n    from `dbt-package-testing`.`iterable_integration_tests_iterable`.`iterable__events`\n\n), pivot_out_events as (\n\n-- this will be at the user-campaign-experiment variation level\n-- if experiment_id is null, the user-campaign interactions happened outside of an experiment\n-- if campaign_id is null, the user interactions are organic\n    select \n        email as user_email,\n        user_full_name,\n        campaign_id,\n        experiment_id,\n        case when campaign_id is null then 'organic' else campaign_name end as campaign_name,\n        template_id,\n        template_name,\n        \n\n        recurring_campaign_id,\n        recurring_campaign_name,\n\n        min(created_at) as first_event_at,\n        max(created_at) as last_event_at\n\n        -- count up the number of instances of each metric\n        -- `iterable__event_metrics` is set by default to all events brought in by fivetran+iterable\n        -- https://fivetran.com/docs/applications/iterable#schemanotes\n        \n        , sum(case when lower(event_name) = 'emailclick' then 1 else 0 end) \n            as total_emailclick \n        \n        , sum(case when lower(event_name) = 'emailunsubscribe' then 1 else 0 end) \n            as total_emailunsubscribe \n        \n        , sum(case when lower(event_name) = 'emailcomplaint' then 1 else 0 end) \n            as total_emailcomplaint \n        \n        , sum(case when lower(event_name) = 'customevent' then 1 else 0 end) \n            as total_customevent \n        \n        , sum(case when lower(event_name) = 'emailsubscribe' then 1 else 0 end) \n            as total_emailsubscribe \n        \n        , sum(case when lower(event_name) = 'emailopen' then 1 else 0 end) \n            as total_emailopen \n        \n        , sum(case when lower(event_name) = 'pushsend' then 1 else 0 end) \n            as total_pushsend \n        \n        , sum(case when lower(event_name) = 'smsbounce' then 1 else 0 end) \n            as total_smsbounce \n        \n        , sum(case when lower(event_name) = 'pushbounce' then 1 else 0 end) \n            as total_pushbounce \n        \n        , sum(case when lower(event_name) = 'inappsendskip' then 1 else 0 end) \n            as total_inappsendskip \n        \n        , sum(case when lower(event_name) = 'smssend' then 1 else 0 end) \n            as total_smssend \n        \n        , sum(case when lower(event_name) = 'inappsend' then 1 else 0 end) \n            as total_inappsend \n        \n        , sum(case when lower(event_name) = 'pushopen' then 1 else 0 end) \n            as total_pushopen \n        \n        , sum(case when lower(event_name) = 'emailsend' then 1 else 0 end) \n            as total_emailsend \n        \n        , sum(case when lower(event_name) = 'pushsendskip' then 1 else 0 end) \n            as total_pushsendskip \n        \n        , sum(case when lower(event_name) = 'inappopen' then 1 else 0 end) \n            as total_inappopen \n        \n        , sum(case when lower(event_name) = 'emailsendskip' then 1 else 0 end) \n            as total_emailsendskip \n        \n        , sum(case when lower(event_name) = 'emailbounce' then 1 else 0 end) \n            as total_emailbounce \n        \n        , sum(case when lower(event_name) = 'inappclick' then 1 else 0 end) \n            as total_inappclick \n        \n        , sum(case when lower(event_name) = 'pushuninstall' then 1 else 0 end) \n            as total_pushuninstall \n        \n\n    from events\n    group by 1,2,3,4,5,6,7,8,9\n\n)\n\nselect *\nfrom pivot_out_events", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests_iterable`.`iterable__user_campaign`"}, "model.iterable.iterable__list_user_history": {"raw_sql": "with user_list_unnest as (\n\n    select * \n    from {{ ref('int_iterable__list_user_unnest') }}\n\n), lists as (\n\n    select * \n    from {{ var('list') }}\n\n), final as (\n    select\n        user_list_unnest.email as user_email,\n        user_list_unnest.first_name as user_first_name,\n        user_list_unnest.last_name as user_last_name,\n        user_list_unnest.user_id,\n        user_list_unnest.signup_date as user_signup_date,\n        user_list_unnest.signup_source as user_signup_source,\n        user_list_unnest.updated_at as user_updated_at,\n        user_list_unnest.list_id,\n        user_list_unnest.is_current,\n        lists.list_name,\n        lists.list_type,\n        lists.created_at as list_created_at   \n\n    from user_list_unnest\n    left join lists\n        on lists.list_id = user_list_unnest.list_id\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iterable.int_iterable__list_user_unnest", "model.iterable_source.stg_iterable__list"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "iterable", "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_iterable", "fqn": ["iterable", "iterable__list_user_history"], "unique_id": "model.iterable.iterable__list_user_history", "package_name": "iterable", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable", "path": "iterable__list_user_history.sql", "original_file_path": "models/iterable__list_user_history.sql", "name": "iterable__list_user_history", "alias": "iterable__list_user_history", "checksum": {"name": "sha256", "checksum": "7f044fa45d5fc42e163c61ca45d840cd6216047bbc0a633ced0e2be26eda0070"}, "tags": [], "refs": [["int_iterable__list_user_unnest"], ["stg_iterable__list"]], "sources": [], "description": "Table that recreates the `list_user_history` source table. Additionally, this table provides an `is_current` field to  identify the current lists associated with the user. Additionally, the grain of this table is at the user/list/updated_at grain.\n", "columns": {"user_email": {"name": "user_email", "description": "Unique identifier of the user as well as their email", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_first_name": {"name": "user_first_name", "description": "First name of the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_last_name": {"name": "user_last_name", "description": "Last name of the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "User defined identifier of the user. This is not a unique field", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_signup_date": {"name": "user_signup_date", "description": "Timestamp as epoch time in milliseconds of when the user signed up", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_signup_source": {"name": "user_signup_source", "description": "Source where the user signed up", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_updated_at": {"name": "user_updated_at", "description": "Last update timestamp as epoch time in milliseconds", "meta": {}, "data_type": null, "quote": null, "tags": []}, "list_id": {"name": "list_id", "description": "The list associated with the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_current": {"name": "is_current", "description": "Boolean indicating if the current list is active", "meta": {}, "data_type": null, "quote": null, "tags": []}, "list_name": {"name": "list_name", "description": "Name of the list associated with the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "list_type": {"name": "list_type", "description": "Type of list associated with the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "list_created_at": {"name": "list_created_at", "description": "Date the list was created", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/iterable.yml", "build_path": "target/compiled/iterable/models/iterable__list_user_history.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "iterable"}, "compiled_sql": "with user_list_unnest as (\n\n    select * \n    from `dbt-package-testing`.`iterable_integration_tests_int_iterable`.`int_iterable__list_user_unnest`\n\n), lists as (\n\n    select * \n    from `dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__list`\n\n), final as (\n    select\n        user_list_unnest.email as user_email,\n        user_list_unnest.first_name as user_first_name,\n        user_list_unnest.last_name as user_last_name,\n        user_list_unnest.user_id,\n        user_list_unnest.signup_date as user_signup_date,\n        user_list_unnest.signup_source as user_signup_source,\n        user_list_unnest.updated_at as user_updated_at,\n        user_list_unnest.list_id,\n        user_list_unnest.is_current,\n        lists.list_name,\n        lists.list_type,\n        lists.created_at as list_created_at   \n\n    from user_list_unnest\n    left join lists\n        on lists.list_id = user_list_unnest.list_id\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests_iterable`.`iterable__list_user_history`"}, "model.iterable.int_iterable__list_user_unnest": {"raw_sql": "{{ config( materialized='table') }}\n-- materializing as a table because the computations here are fairly complex\n\nwith user_history as (\n\n    select * \n    from {{ ref('int_iterable__list_user_history') }}\n\n/*\nUnfortunately, `email_list_ids` are brought in as a JSON ARRAY, which different destinations handle completely differently. \nThe below code serves to extract and pivot list IDs into individual rows. \nRecords with an empty `email_list_ids` array will just have one row. \nWe are making the assumption that a user will not have more than 1000 lists. If that's wrong please open an issue!\nhttps://github.com/fivetran/dbt_iterable/issues/new/choose\n*/\n{% if target.type == 'redshift' %}\n), numbers as (\n    select 0 as generated_number\n    union \n    select *\n    from (\n        {{ dbt_utils.generate_series(upper_bound=1000) }} )\n{% endif %}\n), unnest_email_array as (\n    select\n        email,\n        first_name,\n        last_name,\n        user_id,\n        signup_date,\n        signup_source,\n        phone_number,\n        updated_at,\n        is_current,\n        email_list_ids,\n        case when email_list_ids != '[]' then\n        {% if target.type == 'snowflake' %}\n        email_list_id.value\n        {% elif target.type == 'redshift' %}\n        json_extract_array_element_text(email_list_ids, cast(numbers.generated_number as {{ dbt_utils.type_int() }}), true) \n        {% else %} email_list_id\n        {% endif %}\n        else null end \n        as \n        email_list_id\n\n    from user_history\n\n    cross join \n    {% if target.type == 'snowflake' %}\n        table(flatten(cast(email_list_ids as VARIANT))) as email_list_id \n    {% elif target.type == 'bigquery' %}\n        unnest(JSON_EXTRACT_STRING_ARRAY(email_list_ids)) as email_list_id\n    {% elif target.type == 'redshift' %}\n        numbers \n    where numbers.generated_number < json_array_length(email_list_ids, true)\n        or (numbers.generated_number + json_array_length(email_list_ids, true) = 0)\n    {% else %}\n    /* postgres */\n        json_array_elements_text(cast((\n            case when email_list_ids = '[]' then '[\"is_null\"]'  -- to not remove empty array-rows\n            else email_list_ids end) as json)) as email_list_id\n    {%- endif %}\n\n), final as (\n    select\n        email,\n        first_name,\n        last_name,\n        user_id,\n        signup_date,\n        signup_source,\n        updated_at,\n        phone_number,\n        is_current,\n        email_list_ids,\n        cast(email_list_id as {{ dbt_utils.type_int() }}) as list_id\n    from unnest_email_array\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.type_int"], "nodes": ["model.iterable.int_iterable__list_user_history"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "int_iterable", "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_int_iterable", "fqn": ["iterable", "intermediate", "int_iterable__list_user_unnest"], "unique_id": "model.iterable.int_iterable__list_user_unnest", "package_name": "iterable", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable", "path": "intermediate/int_iterable__list_user_unnest.sql", "original_file_path": "models/intermediate/int_iterable__list_user_unnest.sql", "name": "int_iterable__list_user_unnest", "alias": "int_iterable__list_user_unnest", "checksum": {"name": "sha256", "checksum": "dbb32293f284a3da35191fdee127e6bedd2597390a292208520288e5725672e0"}, "tags": [], "refs": [["int_iterable__list_user_history"]], "sources": [], "description": "Table that unnests the `email_list_id` field for each user to create a new record for each user and the unique list it was associated with at a unique update. Due to the unnesting functions varying greatly between warehouses, conditional logic is applied throughout the model to appropriately accommodate the model being ran within Redshift, Snowflake, BigQuery, and Postgres.\n", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/intermediate/int_iterable.yml", "build_path": "target/compiled/iterable/models/intermediate/int_iterable__list_user_unnest.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "int_iterable"}, "compiled_sql": "\n-- materializing as a table because the computations here are fairly complex\n\nwith user_history as (\n\n    select * \n    from `dbt-package-testing`.`iterable_integration_tests_int_iterable`.`int_iterable__list_user_history`\n\n/*\nUnfortunately, `email_list_ids` are brought in as a JSON ARRAY, which different destinations handle completely differently. \nThe below code serves to extract and pivot list IDs into individual rows. \nRecords with an empty `email_list_ids` array will just have one row. \nWe are making the assumption that a user will not have more than 1000 lists. If that's wrong please open an issue!\nhttps://github.com/fivetran/dbt_iterable/issues/new/choose\n*/\n\n), unnest_email_array as (\n    select\n        email,\n        first_name,\n        last_name,\n        user_id,\n        signup_date,\n        signup_source,\n        phone_number,\n        updated_at,\n        is_current,\n        email_list_ids,\n        case when email_list_ids != '[]' then\n         email_list_id\n        \n        else null end \n        as \n        email_list_id\n\n    from user_history\n\n    cross join \n    \n        unnest(JSON_EXTRACT_STRING_ARRAY(email_list_ids)) as email_list_id\n    \n\n), final as (\n    select\n        email,\n        first_name,\n        last_name,\n        user_id,\n        signup_date,\n        signup_source,\n        updated_at,\n        phone_number,\n        is_current,\n        email_list_ids,\n        cast(email_list_id as \n    int64\n) as list_id\n    from unnest_email_array\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests_int_iterable`.`int_iterable__list_user_unnest`"}, "model.iterable.int_iterable__latest_campaign": {"raw_sql": "with campaign_history as (\n  select *\n  from {{ var('campaign_history') }}\n\n), latest_campaign as (\n    select\n      *,\n      row_number() over(partition by campaign_id order by updated_at desc) as latest_campaign_index\n    from campaign_history\n)\n\nselect *\nfrom latest_campaign\nwhere latest_campaign_index = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iterable_source.stg_iterable__campaign_history"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "int_iterable", "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_int_iterable", "fqn": ["iterable", "intermediate", "int_iterable__latest_campaign"], "unique_id": "model.iterable.int_iterable__latest_campaign", "package_name": "iterable", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable", "path": "intermediate/int_iterable__latest_campaign.sql", "original_file_path": "models/intermediate/int_iterable__latest_campaign.sql", "name": "int_iterable__latest_campaign", "alias": "int_iterable__latest_campaign", "checksum": {"name": "sha256", "checksum": "02638804ee58aa752c0cd0374948f66a3a0b57a1e29e1903ab882a0ee6471138"}, "tags": [], "refs": [["stg_iterable__campaign_history"]], "sources": [], "description": "Table that filters out historical versions of the campaign, and returns the most recent campaign version.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/intermediate/int_iterable.yml", "build_path": "target/compiled/iterable/models/intermediate/int_iterable__latest_campaign.sql", "deferred": false, "unrendered_config": {"materialized": "view", "schema": "int_iterable"}, "compiled_sql": "with campaign_history as (\n  select *\n  from `dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__campaign_history`\n\n), latest_campaign as (\n    select\n      *,\n      row_number() over(partition by campaign_id order by updated_at desc) as latest_campaign_index\n    from campaign_history\n)\n\nselect *\nfrom latest_campaign\nwhere latest_campaign_index = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests_int_iterable`.`int_iterable__latest_campaign`"}, "model.iterable.int_iterable__campaign_event_metrics": {"raw_sql": "with user_campaign as (\n\n    select *\n    from {{ ref('iterable__user_campaign') }}\n\n), campaign_user_event_metrics as (\n\n{%- set user_campaign_columns = adapter.get_columns_in_relation(ref('iterable__user_campaign')) %}\n\n    select\n        campaign_id, \n        template_id,\n        experiment_id,\n        count(distinct user_email) as count_unique_users\n        {% for col in user_campaign_columns %}\n            {% if col.name|lower not in ['user_email', 'user_full_name', 'campaign_id', 'campaign_name', 'recurring_campaign_id', \n                                        'recurring_campaign_name', 'first_event_at', 'last_event_at', 'template_id', 'template_name',\n                                        'experiment_id'] %}\n        , sum( {{ col.name }} ) as {{ col.name }}\n        , sum(case when {{ col.name }} > 0 then 1 else 0 end) as {{ 'unique_' ~ col.name }}\n\n            {% endif %}\n        {% endfor -%}\n\n    from user_campaign\n    group by 1,2,3\n\n)\n\nselect *\nfrom campaign_user_event_metrics", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iterable.iterable__user_campaign", "model.iterable.iterable__user_campaign"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "int_iterable", "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_int_iterable", "fqn": ["iterable", "intermediate", "int_iterable__campaign_event_metrics"], "unique_id": "model.iterable.int_iterable__campaign_event_metrics", "package_name": "iterable", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable", "path": "intermediate/int_iterable__campaign_event_metrics.sql", "original_file_path": "models/intermediate/int_iterable__campaign_event_metrics.sql", "name": "int_iterable__campaign_event_metrics", "alias": "int_iterable__campaign_event_metrics", "checksum": {"name": "sha256", "checksum": "3eed84d176de96b3c92efaf784758a7c8040a67eff8b88d1a3c2c2893bd4b6e9"}, "tags": [], "refs": [["iterable__user_campaign"], ["iterable__user_campaign"]], "sources": [], "description": "Table that generates relevant total and unique campaign/experiment level aggregations.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/intermediate/int_iterable.yml", "build_path": "target/compiled/iterable/models/intermediate/int_iterable__campaign_event_metrics.sql", "deferred": false, "unrendered_config": {"materialized": "view", "schema": "int_iterable"}, "compiled_sql": "with user_campaign as (\n\n    select *\n    from `dbt-package-testing`.`iterable_integration_tests_iterable`.`iterable__user_campaign`\n\n), campaign_user_event_metrics as (\n\n    select\n        campaign_id, \n        template_id,\n        experiment_id,\n        count(distinct user_email) as count_unique_users\n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        , sum( total_emailclick ) as total_emailclick\n        , sum(case when total_emailclick > 0 then 1 else 0 end) as unique_total_emailclick\n\n            \n        \n            \n        , sum( total_emailunsubscribe ) as total_emailunsubscribe\n        , sum(case when total_emailunsubscribe > 0 then 1 else 0 end) as unique_total_emailunsubscribe\n\n            \n        \n            \n        , sum( total_emailcomplaint ) as total_emailcomplaint\n        , sum(case when total_emailcomplaint > 0 then 1 else 0 end) as unique_total_emailcomplaint\n\n            \n        \n            \n        , sum( total_customevent ) as total_customevent\n        , sum(case when total_customevent > 0 then 1 else 0 end) as unique_total_customevent\n\n            \n        \n            \n        , sum( total_emailsubscribe ) as total_emailsubscribe\n        , sum(case when total_emailsubscribe > 0 then 1 else 0 end) as unique_total_emailsubscribe\n\n            \n        \n            \n        , sum( total_emailopen ) as total_emailopen\n        , sum(case when total_emailopen > 0 then 1 else 0 end) as unique_total_emailopen\n\n            \n        \n            \n        , sum( total_pushsend ) as total_pushsend\n        , sum(case when total_pushsend > 0 then 1 else 0 end) as unique_total_pushsend\n\n            \n        \n            \n        , sum( total_smsbounce ) as total_smsbounce\n        , sum(case when total_smsbounce > 0 then 1 else 0 end) as unique_total_smsbounce\n\n            \n        \n            \n        , sum( total_pushbounce ) as total_pushbounce\n        , sum(case when total_pushbounce > 0 then 1 else 0 end) as unique_total_pushbounce\n\n            \n        \n            \n        , sum( total_inappsendskip ) as total_inappsendskip\n        , sum(case when total_inappsendskip > 0 then 1 else 0 end) as unique_total_inappsendskip\n\n            \n        \n            \n        , sum( total_smssend ) as total_smssend\n        , sum(case when total_smssend > 0 then 1 else 0 end) as unique_total_smssend\n\n            \n        \n            \n        , sum( total_inappsend ) as total_inappsend\n        , sum(case when total_inappsend > 0 then 1 else 0 end) as unique_total_inappsend\n\n            \n        \n            \n        , sum( total_pushopen ) as total_pushopen\n        , sum(case when total_pushopen > 0 then 1 else 0 end) as unique_total_pushopen\n\n            \n        \n            \n        , sum( total_emailsend ) as total_emailsend\n        , sum(case when total_emailsend > 0 then 1 else 0 end) as unique_total_emailsend\n\n            \n        \n            \n        , sum( total_pushsendskip ) as total_pushsendskip\n        , sum(case when total_pushsendskip > 0 then 1 else 0 end) as unique_total_pushsendskip\n\n            \n        \n            \n        , sum( total_inappopen ) as total_inappopen\n        , sum(case when total_inappopen > 0 then 1 else 0 end) as unique_total_inappopen\n\n            \n        \n            \n        , sum( total_emailsendskip ) as total_emailsendskip\n        , sum(case when total_emailsendskip > 0 then 1 else 0 end) as unique_total_emailsendskip\n\n            \n        \n            \n        , sum( total_emailbounce ) as total_emailbounce\n        , sum(case when total_emailbounce > 0 then 1 else 0 end) as unique_total_emailbounce\n\n            \n        \n            \n        , sum( total_inappclick ) as total_inappclick\n        , sum(case when total_inappclick > 0 then 1 else 0 end) as unique_total_inappclick\n\n            \n        \n            \n        , sum( total_pushuninstall ) as total_pushuninstall\n        , sum(case when total_pushuninstall > 0 then 1 else 0 end) as unique_total_pushuninstall\n\n            \n        from user_campaign\n    group by 1,2,3\n\n)\n\nselect *\nfrom campaign_user_event_metrics", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests_int_iterable`.`int_iterable__campaign_event_metrics`"}, "model.iterable.int_iterable__campaign_lists": {"raw_sql": "with campaign_suppression_list_history as (\n\n    select *\n    from {{ var('campaign_suppression_list_history') }}\n\n), campaign_send_list_history as (\n\n    select *\n    from {{ var('campaign_list_history') }}\n\n), combine_list_histories as (\n\n    select \n        suppressed_list_id as list_id,\n        campaign_id,\n        updated_at,\n        'suppress' as list_activity\n    from campaign_suppression_list_history\n\n    union all \n\n    select \n        list_id,\n        campaign_id,\n        updated_at,\n        'send' as list_activity\n    from campaign_send_list_history\n\n), order_campaign_list_history as (\n\n    select\n      *,\n      row_number() over(partition by list_id, campaign_id order by updated_at desc) as latest_list_index\n    from combine_list_histories\n\n), latest_campaign_list_history as (\n\n    select \n        list_id,\n        campaign_id,\n        updated_at,\n        list_activity\n\n    from order_campaign_list_history \n    where latest_list_index = 1\n)\n\nselect *\nfrom latest_campaign_list_history", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iterable_source.stg_iterable__campaign_suppression_list_history", "model.iterable_source.stg_iterable__campaign_list_history"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "int_iterable", "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_int_iterable", "fqn": ["iterable", "intermediate", "int_iterable__campaign_lists"], "unique_id": "model.iterable.int_iterable__campaign_lists", "package_name": "iterable", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable", "path": "intermediate/int_iterable__campaign_lists.sql", "original_file_path": "models/intermediate/int_iterable__campaign_lists.sql", "name": "int_iterable__campaign_lists", "alias": "int_iterable__campaign_lists", "checksum": {"name": "sha256", "checksum": "5a1fe7b0ffb53c2164cd2dc56e044f58006c7cb47b42c1762f1369ef91fcb144"}, "tags": [], "refs": [["stg_iterable__campaign_suppression_list_history"], ["stg_iterable__campaign_list_history"]], "sources": [], "description": "Table that identifies the suppressed and send lists associated with a campaign.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/intermediate/int_iterable.yml", "build_path": "target/compiled/iterable/models/intermediate/int_iterable__campaign_lists.sql", "deferred": false, "unrendered_config": {"materialized": "view", "schema": "int_iterable"}, "compiled_sql": "with campaign_suppression_list_history as (\n\n    select *\n    from `dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__campaign_suppression_list_history`\n\n), campaign_send_list_history as (\n\n    select *\n    from `dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__campaign_list_history`\n\n), combine_list_histories as (\n\n    select \n        suppressed_list_id as list_id,\n        campaign_id,\n        updated_at,\n        'suppress' as list_activity\n    from campaign_suppression_list_history\n\n    union all \n\n    select \n        list_id,\n        campaign_id,\n        updated_at,\n        'send' as list_activity\n    from campaign_send_list_history\n\n), order_campaign_list_history as (\n\n    select\n      *,\n      row_number() over(partition by list_id, campaign_id order by updated_at desc) as latest_list_index\n    from combine_list_histories\n\n), latest_campaign_list_history as (\n\n    select \n        list_id,\n        campaign_id,\n        updated_at,\n        list_activity\n\n    from order_campaign_list_history \n    where latest_list_index = 1\n)\n\nselect *\nfrom latest_campaign_list_history", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests_int_iterable`.`int_iterable__campaign_lists`"}, "model.iterable.int_iterable__latest_user": {"raw_sql": "with user_history as (\n  select *\n  from {{ var('user_history') }}\n\n), latest_user as (\n    select\n      *,\n      row_number() over(partition by email order by updated_at desc) as latest_user_index\n    from user_history\n)\n\nselect *\nfrom latest_user\nwhere latest_user_index = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iterable_source.stg_iterable__user_history"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "int_iterable", "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_int_iterable", "fqn": ["iterable", "intermediate", "int_iterable__latest_user"], "unique_id": "model.iterable.int_iterable__latest_user", "package_name": "iterable", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable", "path": "intermediate/int_iterable__latest_user.sql", "original_file_path": "models/intermediate/int_iterable__latest_user.sql", "name": "int_iterable__latest_user", "alias": "int_iterable__latest_user", "checksum": {"name": "sha256", "checksum": "bd44577fee9b3734789ddafd51e670549da1eea9d748cb38c1cb3cc11852be59"}, "tags": [], "refs": [["stg_iterable__user_history"]], "sources": [], "description": "Table that filters out historical versions of the user, and returns only the most recent version.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/intermediate/int_iterable.yml", "build_path": "target/compiled/iterable/models/intermediate/int_iterable__latest_user.sql", "deferred": false, "unrendered_config": {"materialized": "view", "schema": "int_iterable"}, "compiled_sql": "with user_history as (\n  select *\n  from `dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__user_history`\n\n), latest_user as (\n    select\n      *,\n      row_number() over(partition by email order by updated_at desc) as latest_user_index\n    from user_history\n)\n\nselect *\nfrom latest_user\nwhere latest_user_index = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests_int_iterable`.`int_iterable__latest_user`"}, "model.iterable.int_iterable__campaign_labels": {"raw_sql": "{{ config(enabled=var('iterable__using_campaign_label_history', True)) }}\n\nwith campaign_label_history as (\n\n    select *\n    from {{ var('campaign_label_history') }}\n\n), order_campaign_labels as (\n\n    select \n        *,\n        rank() over(partition by campaign_id order by updated_at desc) as latest_label_batch_index\n\n    from campaign_label_history\n\n), latest_labels as (\n\n    select *\n    from order_campaign_labels\n    where latest_label_batch_index = 1\n\n), aggregate_labels as (\n\n    select \n        campaign_id,\n        {{ fivetran_utils.string_agg('distinct label', \"', '\") }} as labels \n\n    from latest_labels\n    group by campaign_id\n)\n\nselect * from aggregate_labels", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.string_agg"], "nodes": ["model.iterable_source.stg_iterable__campaign_label_history"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "int_iterable", "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_int_iterable", "fqn": ["iterable", "intermediate", "int_iterable__campaign_labels"], "unique_id": "model.iterable.int_iterable__campaign_labels", "package_name": "iterable", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable", "path": "intermediate/int_iterable__campaign_labels.sql", "original_file_path": "models/intermediate/int_iterable__campaign_labels.sql", "name": "int_iterable__campaign_labels", "alias": "int_iterable__campaign_labels", "checksum": {"name": "sha256", "checksum": "53f0cae6b442f3d6de9a2543afb815951ff196ff1d61f1bf2ed74e27ecfc359b"}, "tags": [], "refs": [["stg_iterable__campaign_label_history"]], "sources": [], "description": "Table that provides the distinct string aggregation of labels for each campaign.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/intermediate/int_iterable.yml", "build_path": "target/compiled/iterable/models/intermediate/int_iterable__campaign_labels.sql", "deferred": false, "unrendered_config": {"materialized": "view", "schema": "int_iterable", "enabled": true}, "compiled_sql": "\n\nwith campaign_label_history as (\n\n    select *\n    from `dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__campaign_label_history`\n\n), order_campaign_labels as (\n\n    select \n        *,\n        rank() over(partition by campaign_id order by updated_at desc) as latest_label_batch_index\n\n    from campaign_label_history\n\n), latest_labels as (\n\n    select *\n    from order_campaign_labels\n    where latest_label_batch_index = 1\n\n), aggregate_labels as (\n\n    select \n        campaign_id,\n        \n    string_agg(distinct label, ', ')\n\n as labels \n\n    from latest_labels\n    group by campaign_id\n)\n\nselect * from aggregate_labels", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests_int_iterable`.`int_iterable__campaign_labels`"}, "model.iterable.int_iterable__message_type_channel": {"raw_sql": "with message_type as (\n\n    select *\n    from {{ var('message_type') }}\n\n), channel as (\n\n    select *\n    from {{ var('channel') }}\n\n), final as (\n\n    select \n        channel.*,\n        message_type.message_type_name,\n        message_type.message_type_id\n    from channel\n    left join message_type on channel.channel_id = message_type.channel_id\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iterable_source.stg_iterable__message_type", "model.iterable_source.stg_iterable__channel"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "int_iterable", "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_int_iterable", "fqn": ["iterable", "intermediate", "int_iterable__message_type_channel"], "unique_id": "model.iterable.int_iterable__message_type_channel", "package_name": "iterable", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable", "path": "intermediate/int_iterable__message_type_channel.sql", "original_file_path": "models/intermediate/int_iterable__message_type_channel.sql", "name": "int_iterable__message_type_channel", "alias": "int_iterable__message_type_channel", "checksum": {"name": "sha256", "checksum": "7675596443596d8bd27ae247ea53d0d3b69e035bffa631505ee4e0c0dd17c2e5"}, "tags": [], "refs": [["stg_iterable__message_type"], ["stg_iterable__channel"]], "sources": [], "description": "Table that joins the message type and channel records together into one comprehensive model to be referenced downstream.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/intermediate/int_iterable.yml", "build_path": "target/compiled/iterable/models/intermediate/int_iterable__message_type_channel.sql", "deferred": false, "unrendered_config": {"materialized": "view", "schema": "int_iterable"}, "compiled_sql": "with message_type as (\n\n    select *\n    from `dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__message_type`\n\n), channel as (\n\n    select *\n    from `dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__channel`\n\n), final as (\n\n    select \n        channel.*,\n        message_type.message_type_name,\n        message_type.message_type_id\n    from channel\n    left join message_type on channel.channel_id = message_type.channel_id\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests_int_iterable`.`int_iterable__message_type_channel`"}, "model.iterable.int_iterable__latest_template": {"raw_sql": "with template_history as (\n  select *\n  from {{ var('template_history') }}\n\n), order_template as (\n    select\n      *,\n      row_number() over(partition by template_id order by updated_at desc) as latest_template_index\n    from template_history\n\n), latest_template as (\n\n    select *\n    from order_template\n    where latest_template_index = 1\n\n), message_type_channel as (\n\n    select *\n    from {{ ref('int_iterable__message_type_channel') }}\n\n), template_join as (\n\n    select \n        latest_template.*,\n        message_type_channel.message_type_name,\n        message_type_channel.channel_id,\n        message_type_channel.channel_name,\n        message_type_channel.channel_type,\n        message_type_channel.message_medium\n\n    from latest_template \n    left join message_type_channel \n        on latest_template.message_type_id = message_type_channel.message_type_id\n)\n\nselect *\nfrom template_join", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iterable_source.stg_iterable__template_history", "model.iterable.int_iterable__message_type_channel"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "int_iterable", "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_int_iterable", "fqn": ["iterable", "intermediate", "int_iterable__latest_template"], "unique_id": "model.iterable.int_iterable__latest_template", "package_name": "iterable", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable", "path": "intermediate/int_iterable__latest_template.sql", "original_file_path": "models/intermediate/int_iterable__latest_template.sql", "name": "int_iterable__latest_template", "alias": "int_iterable__latest_template", "checksum": {"name": "sha256", "checksum": "031c6f50ed5e2a6f0182fcfd3686b20c298c4175850cf3a73a002740ad27174b"}, "tags": [], "refs": [["stg_iterable__template_history"], ["int_iterable__message_type_channel"]], "sources": [], "description": "Table that provides the most recent version of the template as well as joining relevant message type information.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/intermediate/int_iterable.yml", "build_path": "target/compiled/iterable/models/intermediate/int_iterable__latest_template.sql", "deferred": false, "unrendered_config": {"materialized": "view", "schema": "int_iterable"}, "compiled_sql": "with template_history as (\n  select *\n  from `dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__template_history`\n\n), order_template as (\n    select\n      *,\n      row_number() over(partition by template_id order by updated_at desc) as latest_template_index\n    from template_history\n\n), latest_template as (\n\n    select *\n    from order_template\n    where latest_template_index = 1\n\n), message_type_channel as (\n\n    select *\n    from `dbt-package-testing`.`iterable_integration_tests_int_iterable`.`int_iterable__message_type_channel`\n\n), template_join as (\n\n    select \n        latest_template.*,\n        message_type_channel.message_type_name,\n        message_type_channel.channel_id,\n        message_type_channel.channel_name,\n        message_type_channel.channel_type,\n        message_type_channel.message_medium\n\n    from latest_template \n    left join message_type_channel \n        on latest_template.message_type_id = message_type_channel.message_type_id\n)\n\nselect *\nfrom template_join", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests_int_iterable`.`int_iterable__latest_template`"}, "model.iterable.int_iterable__user_event_metrics": {"raw_sql": "with user_campaign as (\n\n    select *\n    from {{ ref('iterable__user_campaign') }}\n\n), user_event_metrics as (\n\n{%- set user_campaign_columns = adapter.get_columns_in_relation(ref('iterable__user_campaign')) %}\n\n    select\n        user_email, \n        count(distinct campaign_id) as count_total_campaigns,\n        min(first_event_at) as first_event_at,\n        max(last_event_at) as last_event_at\n\n        {% for col in user_campaign_columns %}\n            {% if col.name|lower not in ['user_email', 'user_full_name', 'campaign_id', 'campaign_name', 'recurring_campaign_id', \n                                        'recurring_campaign_name', 'first_event_at', 'last_event_at', 'template_id', 'template_name',\n                                        'experiment_id'] %}\n        , sum( {{ col.name }} ) as {{ col.name }}\n            {% endif %}\n        {% endfor -%}\n\n    from user_campaign\n    group by user_email\n\n)\n\nselect *\nfrom user_event_metrics", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iterable.iterable__user_campaign", "model.iterable.iterable__user_campaign"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "int_iterable", "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_int_iterable", "fqn": ["iterable", "intermediate", "int_iterable__user_event_metrics"], "unique_id": "model.iterable.int_iterable__user_event_metrics", "package_name": "iterable", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable", "path": "intermediate/int_iterable__user_event_metrics.sql", "original_file_path": "models/intermediate/int_iterable__user_event_metrics.sql", "name": "int_iterable__user_event_metrics", "alias": "int_iterable__user_event_metrics", "checksum": {"name": "sha256", "checksum": "7e1ce19ecac5f23dd6ee473a0799cbc19f3ac02f6f3c21060f217b6a5271e408"}, "tags": [], "refs": [["iterable__user_campaign"], ["iterable__user_campaign"]], "sources": [], "description": "Table that generates user aggregations at the campaign level.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/intermediate/int_iterable.yml", "build_path": "target/compiled/iterable/models/intermediate/int_iterable__user_event_metrics.sql", "deferred": false, "unrendered_config": {"materialized": "view", "schema": "int_iterable"}, "compiled_sql": "with user_campaign as (\n\n    select *\n    from `dbt-package-testing`.`iterable_integration_tests_iterable`.`iterable__user_campaign`\n\n), user_event_metrics as (\n\n    select\n        user_email, \n        count(distinct campaign_id) as count_total_campaigns,\n        min(first_event_at) as first_event_at,\n        max(last_event_at) as last_event_at\n\n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        , sum( total_emailclick ) as total_emailclick\n            \n        \n            \n        , sum( total_emailunsubscribe ) as total_emailunsubscribe\n            \n        \n            \n        , sum( total_emailcomplaint ) as total_emailcomplaint\n            \n        \n            \n        , sum( total_customevent ) as total_customevent\n            \n        \n            \n        , sum( total_emailsubscribe ) as total_emailsubscribe\n            \n        \n            \n        , sum( total_emailopen ) as total_emailopen\n            \n        \n            \n        , sum( total_pushsend ) as total_pushsend\n            \n        \n            \n        , sum( total_smsbounce ) as total_smsbounce\n            \n        \n            \n        , sum( total_pushbounce ) as total_pushbounce\n            \n        \n            \n        , sum( total_inappsendskip ) as total_inappsendskip\n            \n        \n            \n        , sum( total_smssend ) as total_smssend\n            \n        \n            \n        , sum( total_inappsend ) as total_inappsend\n            \n        \n            \n        , sum( total_pushopen ) as total_pushopen\n            \n        \n            \n        , sum( total_emailsend ) as total_emailsend\n            \n        \n            \n        , sum( total_pushsendskip ) as total_pushsendskip\n            \n        \n            \n        , sum( total_inappopen ) as total_inappopen\n            \n        \n            \n        , sum( total_emailsendskip ) as total_emailsendskip\n            \n        \n            \n        , sum( total_emailbounce ) as total_emailbounce\n            \n        \n            \n        , sum( total_inappclick ) as total_inappclick\n            \n        \n            \n        , sum( total_pushuninstall ) as total_pushuninstall\n            \n        from user_campaign\n    group by user_email\n\n)\n\nselect *\nfrom user_event_metrics", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests_int_iterable`.`int_iterable__user_event_metrics`"}, "model.iterable.int_iterable__list_user_history": {"raw_sql": "-- this model will serve to extract only email-list changes\nwith user_history as (\n\n    select *\n    from {{ var('user_history') }}\n\n), previous_email_list_ids as (\n\n    select\n        *,\n        lag(email_list_ids) over(partition by email order by updated_at asc) as previous_ids\n\n    from user_history \n\n), only_new_email_list_ids as (\n\n    select \n        email,\n        user_id,\n        first_name,\n        last_name,\n        email_list_ids,\n        phone_number,\n        signup_date,\n        signup_source,\n        updated_at\n\n    from previous_email_list_ids\n    where email_list_ids != previous_ids -- list ids are always stored in their arrays in numerical order\n\n), most_recent_list_ids as (\n\n    select \n        *,\n        row_number() over(partition by email order by updated_at desc) as latest_user_index\n    \n    from only_new_email_list_ids\n\n), final as (\n\n    select \n        email,\n        user_id,\n        first_name,\n        last_name,\n        email_list_ids,\n        phone_number,\n        signup_date,\n        signup_source,\n        updated_at,\n        latest_user_index = 1 as is_current\n\n    from most_recent_list_ids\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iterable_source.stg_iterable__user_history"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "int_iterable", "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_int_iterable", "fqn": ["iterable", "intermediate", "int_iterable__list_user_history"], "unique_id": "model.iterable.int_iterable__list_user_history", "package_name": "iterable", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable", "path": "intermediate/int_iterable__list_user_history.sql", "original_file_path": "models/intermediate/int_iterable__list_user_history.sql", "name": "int_iterable__list_user_history", "alias": "int_iterable__list_user_history", "checksum": {"name": "sha256", "checksum": "7de93d77736663d91af84483c78a82a2478bfc4a48db23179e2be90468bf9b0c"}, "tags": [], "refs": [["stg_iterable__user_history"]], "sources": [], "description": "Table that provides a history of all lists the user has been associated with.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/intermediate/int_iterable.yml", "build_path": "target/compiled/iterable/models/intermediate/int_iterable__list_user_history.sql", "deferred": false, "unrendered_config": {"materialized": "view", "schema": "int_iterable"}, "compiled_sql": "-- this model will serve to extract only email-list changes\nwith user_history as (\n\n    select *\n    from `dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__user_history`\n\n), previous_email_list_ids as (\n\n    select\n        *,\n        lag(email_list_ids) over(partition by email order by updated_at asc) as previous_ids\n\n    from user_history \n\n), only_new_email_list_ids as (\n\n    select \n        email,\n        user_id,\n        first_name,\n        last_name,\n        email_list_ids,\n        phone_number,\n        signup_date,\n        signup_source,\n        updated_at\n\n    from previous_email_list_ids\n    where email_list_ids != previous_ids -- list ids are always stored in their arrays in numerical order\n\n), most_recent_list_ids as (\n\n    select \n        *,\n        row_number() over(partition by email order by updated_at desc) as latest_user_index\n    \n    from only_new_email_list_ids\n\n), final as (\n\n    select \n        email,\n        user_id,\n        first_name,\n        last_name,\n        email_list_ids,\n        phone_number,\n        signup_date,\n        signup_source,\n        updated_at,\n        latest_user_index = 1 as is_current\n\n    from most_recent_list_ids\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests_int_iterable`.`int_iterable__list_user_history`"}, "model.iterable.int_iterable__recurring_campaigns": {"raw_sql": "with latest_campaign as (\n\n    select * \n    from {{ ref('int_iterable__latest_campaign') }}\n\n), recurring_campaign_join as (\n     select\n        latest_campaign.campaign_id,\n        latest_campaign.campaign_name,\n        latest_campaign.updated_at,\n        latest_campaign.campaign_state,\n        latest_campaign.campaign_type,\n        latest_campaign.send_size,\n        latest_campaign.start_at,\n        latest_campaign.ended_at,\n        latest_campaign.created_at,\n        latest_campaign.created_by_user_id,\n        latest_campaign.template_id,\n        latest_campaign.recurring_campaign_id,\n\n        recurring_campaign.campaign_name as recurring_campaign_name,\n        recurring_campaign.campaign_state as recurring_campaign_state,\n        recurring_campaign.send_size as recurring_campaign_send_size,\n        recurring_campaign.start_at as recurring_campaign_start_at\n\n    from latest_campaign\n\n    left join latest_campaign as recurring_campaign\n        on latest_campaign.recurring_campaign_id = recurring_campaign.campaign_id\n\n), final as (\n\n    select\n        recurring_campaign_join.*,\n        case when latest_campaign.recurring_campaign_id is not null then true \n        else false end as is_campaign_recurring\n\n    from recurring_campaign_join\n    left join latest_campaign on recurring_campaign_join.campaign_id = latest_campaign.recurring_campaign_id\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.iterable.int_iterable__latest_campaign"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "int_iterable", "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_int_iterable", "fqn": ["iterable", "intermediate", "int_iterable__recurring_campaigns"], "unique_id": "model.iterable.int_iterable__recurring_campaigns", "package_name": "iterable", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable", "path": "intermediate/int_iterable__recurring_campaigns.sql", "original_file_path": "models/intermediate/int_iterable__recurring_campaigns.sql", "name": "int_iterable__recurring_campaigns", "alias": "int_iterable__recurring_campaigns", "checksum": {"name": "sha256", "checksum": "e74aa500d7ec1ab63d75bccff6f7091cc16d99652d4d9ea2513a2e06dd6f8a40"}, "tags": [], "refs": [["int_iterable__latest_campaign"]], "sources": [], "description": "Table that identifies when a campaign is associated with a recurring campaign and provides additional enriched recurring campaign information.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/intermediate/int_iterable.yml", "build_path": "target/compiled/iterable/models/intermediate/int_iterable__recurring_campaigns.sql", "deferred": false, "unrendered_config": {"materialized": "view", "schema": "int_iterable"}, "compiled_sql": "with latest_campaign as (\n\n    select * \n    from `dbt-package-testing`.`iterable_integration_tests_int_iterable`.`int_iterable__latest_campaign`\n\n), recurring_campaign_join as (\n     select\n        latest_campaign.campaign_id,\n        latest_campaign.campaign_name,\n        latest_campaign.updated_at,\n        latest_campaign.campaign_state,\n        latest_campaign.campaign_type,\n        latest_campaign.send_size,\n        latest_campaign.start_at,\n        latest_campaign.ended_at,\n        latest_campaign.created_at,\n        latest_campaign.created_by_user_id,\n        latest_campaign.template_id,\n        latest_campaign.recurring_campaign_id,\n\n        recurring_campaign.campaign_name as recurring_campaign_name,\n        recurring_campaign.campaign_state as recurring_campaign_state,\n        recurring_campaign.send_size as recurring_campaign_send_size,\n        recurring_campaign.start_at as recurring_campaign_start_at\n\n    from latest_campaign\n\n    left join latest_campaign as recurring_campaign\n        on latest_campaign.recurring_campaign_id = recurring_campaign.campaign_id\n\n), final as (\n\n    select\n        recurring_campaign_join.*,\n        case when latest_campaign.recurring_campaign_id is not null then true \n        else false end as is_campaign_recurring\n\n    from recurring_campaign_join\n    left join latest_campaign on recurring_campaign_join.campaign_id = latest_campaign.recurring_campaign_id\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests_int_iterable`.`int_iterable__recurring_campaigns`"}, "test.iterable.not_null_iterable__campaigns_campaign_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "campaign_id", "model": "{{ ref('iterable__campaigns') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.iterable.iterable__campaigns"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "iterable", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_iterable", "fqn": ["iterable", "schema_test", "not_null_iterable__campaigns_campaign_id"], "unique_id": "test.iterable.not_null_iterable__campaigns_campaign_id", "package_name": "iterable", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable", "path": "schema_test/not_null_iterable__campaigns_campaign_id.sql", "original_file_path": "models/iterable.yml", "name": "not_null_iterable__campaigns_campaign_id", "alias": "not_null_iterable__campaigns_campaign_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["iterable__campaigns"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/iterable/models/iterable.yml/schema_test/not_null_iterable__campaigns_campaign_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "iterable", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`iterable_integration_tests_iterable`.`iterable__campaigns`\nwhere campaign_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "campaign_id"}, "test.iterable.dbt_utils_unique_combination_of_columns_iterable__campaigns_campaign_id__experiment_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ dbt_utils.test_unique_combination_of_columns(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["campaign_id", "experiment_id"], "model": "{{ ref('iterable__campaigns') }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns"], "nodes": ["model.iterable.iterable__campaigns"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "iterable", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_iterable", "fqn": ["iterable", "schema_test", "dbt_utils_unique_combination_of_columns_iterable__campaigns_campaign_id__experiment_id"], "unique_id": "test.iterable.dbt_utils_unique_combination_of_columns_iterable__campaigns_campaign_id__experiment_id", "package_name": "iterable", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable", "path": "schema_test/dbt_utils_unique_combination_of_columns_iterable__campaigns_campaign_id__experiment_id.sql", "original_file_path": "models/iterable.yml", "name": "dbt_utils_unique_combination_of_columns_iterable__campaigns_campaign_id__experiment_id", "alias": "dbt_utils_unique_combination_of_columns_iterable__campaigns_campaign_id__experiment_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["iterable__campaigns"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/iterable/models/iterable.yml/schema_test/dbt_utils_unique_combination_of_columns_iterable__campaigns_campaign_id__experiment_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "iterable", "severity": "ERROR"}, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        campaign_id, experiment_id\n    from `dbt-package-testing`.`iterable_integration_tests_iterable`.`iterable__campaigns`\n\n    group by campaign_id, experiment_id\n    having count(*) > 1\n\n)\n\nselect count(*)\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null}, "test.iterable.unique_iterable__events_event_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ ref('iterable__events') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.iterable.iterable__events"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "iterable", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_iterable", "fqn": ["iterable", "schema_test", "unique_iterable__events_event_id"], "unique_id": "test.iterable.unique_iterable__events_event_id", "package_name": "iterable", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable", "path": "schema_test/unique_iterable__events_event_id.sql", "original_file_path": "models/iterable.yml", "name": "unique_iterable__events_event_id", "alias": "unique_iterable__events_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["iterable__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/iterable/models/iterable.yml/schema_test/unique_iterable__events_event_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "iterable", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        event_id\n\n    from `dbt-package-testing`.`iterable_integration_tests_iterable`.`iterable__events`\n    where event_id is not null\n    group by event_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_id"}, "test.iterable.not_null_iterable__events_event_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ ref('iterable__events') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.iterable.iterable__events"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "iterable", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_iterable", "fqn": ["iterable", "schema_test", "not_null_iterable__events_event_id"], "unique_id": "test.iterable.not_null_iterable__events_event_id", "package_name": "iterable", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable", "path": "schema_test/not_null_iterable__events_event_id.sql", "original_file_path": "models/iterable.yml", "name": "not_null_iterable__events_event_id", "alias": "not_null_iterable__events_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["iterable__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/iterable/models/iterable.yml/schema_test/not_null_iterable__events_event_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "iterable", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`iterable_integration_tests_iterable`.`iterable__events`\nwhere event_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_id"}, "test.iterable.dbt_utils_unique_combination_of_columns_iterable__list_user_history_user_email__list_id__user_updated_at": {"raw_sql": "{{ config(severity='ERROR') }}{{ dbt_utils.test_unique_combination_of_columns(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["user_email", "list_id", "user_updated_at"], "model": "{{ ref('iterable__list_user_history') }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns"], "nodes": ["model.iterable.iterable__list_user_history"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "iterable", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_iterable", "fqn": ["iterable", "schema_test", "dbt_utils_unique_combination_of_columns_iterable__list_user_history_user_email__list_id__user_updated_at"], "unique_id": "test.iterable.dbt_utils_unique_combination_of_columns_iterable__list_user_history_user_email__list_id__user_updated_at", "package_name": "iterable", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable", "path": "schema_test/dbt_utils_unique_combination_of_columns_iterable__list_user_history_62200abbadbef0c3015ed69402823495.sql", "original_file_path": "models/iterable.yml", "name": "dbt_utils_unique_combination_of_columns_iterable__list_user_history_user_email__list_id__user_updated_at", "alias": "dbt_utils_unique_combination_of_columns_iterable__list_user_history_user_email__list_id__user_updated_at", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["iterable__list_user_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/iterable/models/iterable.yml/schema_test/dbt_utils_unique_combination_of_columns_iterable__list_user_history_62200abbadbef0c3015ed69402823495.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "iterable", "severity": "ERROR"}, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        user_email, list_id, user_updated_at\n    from `dbt-package-testing`.`iterable_integration_tests_iterable`.`iterable__list_user_history`\n\n    group by user_email, list_id, user_updated_at\n    having count(*) > 1\n\n)\n\nselect count(*)\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null}, "test.iterable.not_null_iterable__user_campaign_user_email": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_email", "model": "{{ ref('iterable__user_campaign') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.iterable.iterable__user_campaign"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "iterable", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_iterable", "fqn": ["iterable", "schema_test", "not_null_iterable__user_campaign_user_email"], "unique_id": "test.iterable.not_null_iterable__user_campaign_user_email", "package_name": "iterable", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable", "path": "schema_test/not_null_iterable__user_campaign_user_email.sql", "original_file_path": "models/iterable.yml", "name": "not_null_iterable__user_campaign_user_email", "alias": "not_null_iterable__user_campaign_user_email", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["iterable__user_campaign"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/iterable/models/iterable.yml/schema_test/not_null_iterable__user_campaign_user_email.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "iterable", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`iterable_integration_tests_iterable`.`iterable__user_campaign`\nwhere user_email is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "user_email"}, "test.iterable.dbt_utils_unique_combination_of_columns_iterable__user_campaign_user_email__campaign_id__experiment_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ dbt_utils.test_unique_combination_of_columns(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["user_email", "campaign_id", "experiment_id"], "model": "{{ ref('iterable__user_campaign') }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns"], "nodes": ["model.iterable.iterable__user_campaign"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "iterable", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_iterable", "fqn": ["iterable", "schema_test", "dbt_utils_unique_combination_of_columns_iterable__user_campaign_user_email__campaign_id__experiment_id"], "unique_id": "test.iterable.dbt_utils_unique_combination_of_columns_iterable__user_campaign_user_email__campaign_id__experiment_id", "package_name": "iterable", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable", "path": "schema_test/dbt_utils_unique_combination_of_columns_iterable__user_campaign_46c0e509898792bce64eb50099b7138f.sql", "original_file_path": "models/iterable.yml", "name": "dbt_utils_unique_combination_of_columns_iterable__user_campaign_user_email__campaign_id__experiment_id", "alias": "dbt_utils_unique_combination_of_columns_iterable__user_campaign_user_email__campaign_id__experiment_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["iterable__user_campaign"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/iterable/models/iterable.yml/schema_test/dbt_utils_unique_combination_of_columns_iterable__user_campaign_46c0e509898792bce64eb50099b7138f.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "iterable", "severity": "ERROR"}, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        user_email, campaign_id, experiment_id\n    from `dbt-package-testing`.`iterable_integration_tests_iterable`.`iterable__user_campaign`\n\n    group by user_email, campaign_id, experiment_id\n    having count(*) > 1\n\n)\n\nselect count(*)\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null}, "test.iterable.dbt_utils_unique_combination_of_columns_iterable__user_unsubscriptions_email__message_type_id__is_unsubscribed_channel_wide": {"raw_sql": "{{ config(severity='ERROR') }}{{ dbt_utils.test_unique_combination_of_columns(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["email", "message_type_id", "is_unsubscribed_channel_wide"], "model": "{{ ref('iterable__user_unsubscriptions') }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns"], "nodes": ["model.iterable.iterable__user_unsubscriptions"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "iterable", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_iterable", "fqn": ["iterable", "schema_test", "dbt_utils_unique_combination_of_columns_iterable__user_unsubscriptions_email__message_type_id__is_unsubscribed_channel_wide"], "unique_id": "test.iterable.dbt_utils_unique_combination_of_columns_iterable__user_unsubscriptions_email__message_type_id__is_unsubscribed_channel_wide", "package_name": "iterable", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable", "path": "schema_test/dbt_utils_unique_combination_of_columns_iterable__user_unsubscriptions_8cffd014b652ef139cb9f711b36fc2a8.sql", "original_file_path": "models/iterable.yml", "name": "dbt_utils_unique_combination_of_columns_iterable__user_unsubscriptions_email__message_type_id__is_unsubscribed_channel_wide", "alias": "dbt_utils_unique_combination_of_columns_iterable__user_unsubscriptions_email__message_type_id__is_unsubscribed_channel_wide", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["iterable__user_unsubscriptions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/iterable/models/iterable.yml/schema_test/dbt_utils_unique_combination_of_columns_iterable__user_unsubscriptions_8cffd014b652ef139cb9f711b36fc2a8.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "iterable", "severity": "ERROR"}, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        email, message_type_id, is_unsubscribed_channel_wide\n    from `dbt-package-testing`.`iterable_integration_tests_iterable`.`iterable__user_unsubscriptions`\n\n    group by email, message_type_id, is_unsubscribed_channel_wide\n    having count(*) > 1\n\n)\n\nselect count(*)\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null}, "test.iterable.unique_iterable__users_email": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "email", "model": "{{ ref('iterable__users') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.iterable.iterable__users"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "iterable", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_iterable", "fqn": ["iterable", "schema_test", "unique_iterable__users_email"], "unique_id": "test.iterable.unique_iterable__users_email", "package_name": "iterable", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable", "path": "schema_test/unique_iterable__users_email.sql", "original_file_path": "models/iterable.yml", "name": "unique_iterable__users_email", "alias": "unique_iterable__users_email", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["iterable__users"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/iterable/models/iterable.yml/schema_test/unique_iterable__users_email.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "iterable", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        email\n\n    from `dbt-package-testing`.`iterable_integration_tests_iterable`.`iterable__users`\n    where email is not null\n    group by email\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "email"}, "test.iterable.not_null_iterable__users_email": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "email", "model": "{{ ref('iterable__users') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.iterable.iterable__users"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "iterable", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_iterable", "fqn": ["iterable", "schema_test", "not_null_iterable__users_email"], "unique_id": "test.iterable.not_null_iterable__users_email", "package_name": "iterable", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable", "path": "schema_test/not_null_iterable__users_email.sql", "original_file_path": "models/iterable.yml", "name": "not_null_iterable__users_email", "alias": "not_null_iterable__users_email", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["iterable__users"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/iterable/models/iterable.yml/schema_test/not_null_iterable__users_email.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "iterable", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`iterable_integration_tests_iterable`.`iterable__users`\nwhere email is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "email"}, "model.iterable_source.stg_iterable__user_unsub_message_type_history": {"raw_sql": "{{ config(enabled=var('iterable__using_user_unsubscribed_message_type_history', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_iterable__user_unsub_message_type_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_iterable__user_unsub_message_type_history_tmp')),\n                staging_columns=get_user_unsubscribed_message_type_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        email,\n        message_type_id,\n        updated_at,\n        _fivetran_synced\n    from fields\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.iterable_source.get_user_unsubscribed_message_type_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.iterable_source.stg_iterable__user_unsub_message_type_history_tmp", "model.iterable_source.stg_iterable__user_unsub_message_type_history_tmp"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "stg_iterable", "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_stg_iterable", "fqn": ["iterable_source", "stg_iterable__user_unsub_message_type_history"], "unique_id": "model.iterable_source.stg_iterable__user_unsub_message_type_history", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "stg_iterable__user_unsub_message_type_history.sql", "original_file_path": "models/stg_iterable__user_unsub_message_type_history.sql", "name": "stg_iterable__user_unsub_message_type_history", "alias": "stg_iterable__user_unsub_message_type_history", "checksum": {"name": "sha256", "checksum": "dd1f083c091aaf65ea53c8c7679f59bb1c3a6892771e8bddd8aa35d34b45a703"}, "tags": [], "refs": [["stg_iterable__user_unsub_message_type_history_tmp"], ["stg_iterable__user_unsub_message_type_history_tmp"]], "sources": [], "description": "Table containing the history of message types from which a user has unsubscribed. \"Unsubscribed\" is shortened to \"unsub\" for postgres compatibility.", "columns": {"message_type_id": {"name": "message_type_id", "description": "Reference to the message type from which the user unsubscribed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "Unique identifier of the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Last update timestamp as epoch time in milliseconds", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_iterable.yml", "build_path": "target/compiled/iterable_source/models/stg_iterable__user_unsub_message_type_history.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_iterable", "enabled": true}, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__user_unsub_message_type_history_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    message_type_id\n    \n as \n    \n    message_type_id\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        email,\n        message_type_id,\n        updated_at,\n        _fivetran_synced\n    from fields\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__user_unsub_message_type_history`"}, "model.iterable_source.stg_iterable__event_extension": {"raw_sql": "{{\n    config( materialized='view' )\n}}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_iterable__event_extension_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_iterable__event_extension_tmp')),\n                staging_columns=get_event_extension_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    select\n        _fivetran_id as event_id,\n        app_already_running as is_app_already_running,\n        badge,\n        canonical_url_id,\n        content_available as is_content_available,\n        content_id,\n        deeplink_android,\n        deeplink_ios,\n        device,\n        email_id,\n        email_subject,\n        experiment_id,\n        from_phone_number_id,\n        from_smssender_id,\n        image_url,\n        is_ghost_push,\n        link_id,\n        link_url,\n        locale,\n        payload,\n        platform_endpoint,\n        push_message,\n        region,\n        sms_message,\n        sms_provider_response_code,\n        sms_provider_response_message,\n        sms_provider_response_more_info,\n        sms_provider_response_status,\n        sound,\n        to_phone_number,\n        url,\n        workflow_id,\n        workflow_name,\n        _fivetran_synced\n    from fields\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.iterable_source.get_event_extension_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.iterable_source.stg_iterable__event_extension_tmp", "model.iterable_source.stg_iterable__event_extension_tmp"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "stg_iterable", "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_stg_iterable", "fqn": ["iterable_source", "stg_iterable__event_extension"], "unique_id": "model.iterable_source.stg_iterable__event_extension", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "stg_iterable__event_extension.sql", "original_file_path": "models/stg_iterable__event_extension.sql", "name": "stg_iterable__event_extension", "alias": "stg_iterable__event_extension", "checksum": {"name": "sha256", "checksum": "59817ce3436e64a80edbe368adf5f8d1debdac47193acb7ad1a1259671eab15d"}, "tags": [], "refs": [["stg_iterable__event_extension_tmp"], ["stg_iterable__event_extension_tmp"]], "sources": [], "description": "Table containing addition properties from the event table.", "columns": {"event_id": {"name": "event_id", "description": "Unique identifier of the event. Generated by Fivetran", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_app_already_running": {"name": "is_app_already_running", "description": "Boolean indicating if the app is currently running or not", "meta": {}, "data_type": null, "quote": null, "tags": []}, "badge": {"name": "badge", "description": "Badge associated with the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "canonical_url_id": {"name": "canonical_url_id", "description": "Reference to the url associated with the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_content_available": {"name": "is_content_available", "description": "Content available from the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "content_id": {"name": "content_id", "description": "Reference to the content associated with the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deeplink_android": {"name": "deeplink_android", "description": "Deeplink associated with the event from an android device", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deeplink_ios": {"name": "deeplink_ios", "description": "Deeplink associated with the event from an ios device", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device": {"name": "device", "description": "The device associated with the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_id": {"name": "email_id", "description": "Reference to the email associated with the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_subject": {"name": "email_subject", "description": "Subject of the email associated with the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "experiment_id": {"name": "experiment_id", "description": "Reference to the experiment used if the event is an experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_phone_number_id": {"name": "from_phone_number_id", "description": "Reference to the phone number which the event is from", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_smssender_id": {"name": "from_smssender_id", "description": "Reference to the sms sender which the event is from", "meta": {}, "data_type": null, "quote": null, "tags": []}, "image_url": {"name": "image_url", "description": "Image url of the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_ghost_push": {"name": "is_ghost_push", "description": "Boolean indicating if the event is a result of a ghost push", "meta": {}, "data_type": null, "quote": null, "tags": []}, "link_id": {"name": "link_id", "description": "Reference to the link associated with the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "link_url": {"name": "link_url", "description": "Url of the link associated with the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "locale": {"name": "locale", "description": "Locale associated with the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payload": {"name": "payload", "description": "Payload resulted from the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "platform_endpoint": {"name": "platform_endpoint", "description": "The specific platform endpoint of the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "push_message": {"name": "push_message", "description": "Boolean indicating if the event is a push message", "meta": {}, "data_type": null, "quote": null, "tags": []}, "region": {"name": "region", "description": "Region of the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sms_message": {"name": "sms_message", "description": "Boolean indicating if the event is an sms message", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sms_provider_response_code": {"name": "sms_provider_response_code", "description": "sms provider response code from the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sms_provider_response_message": {"name": "sms_provider_response_message", "description": "sms provider response message from the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sms_provider_response_more_info": {"name": "sms_provider_response_more_info", "description": "sms provider response addition info from the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sms_provider_response_status": {"name": "sms_provider_response_status", "description": "Status of the sms provider response from the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sound": {"name": "sound", "description": "Boolean indicating if a sound was used with the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "to_phone_number": {"name": "to_phone_number", "description": "To phone number associated with the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url": {"name": "url", "description": "Url associated with the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "workflow_id": {"name": "workflow_id", "description": "Reference to the workflow which the event originated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "workflow_name": {"name": "workflow_name", "description": "Name of the workflow which the event originated", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_iterable.yml", "build_path": "target/compiled/iterable_source/models/stg_iterable__event_extension.sql", "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_iterable"}, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__event_extension_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_id\n    \n as \n    \n    _fivetran_id\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    app_already_running\n    \n as \n    \n    app_already_running\n    \n, \n    \n    \n    badge\n    \n as \n    \n    badge\n    \n, \n    \n    \n    canonical_url_id\n    \n as \n    \n    canonical_url_id\n    \n, \n    \n    \n    content_available\n    \n as \n    \n    content_available\n    \n, \n    \n    \n    content_id\n    \n as \n    \n    content_id\n    \n, \n    \n    \n    deeplink_android\n    \n as \n    \n    deeplink_android\n    \n, \n    \n    \n    deeplink_ios\n    \n as \n    \n    deeplink_ios\n    \n, \n    \n    \n    device\n    \n as \n    \n    device\n    \n, \n    \n    \n    email_id\n    \n as \n    \n    email_id\n    \n, \n    \n    \n    email_subject\n    \n as \n    \n    email_subject\n    \n, \n    \n    \n    experiment_id\n    \n as \n    \n    experiment_id\n    \n, \n    \n    \n    from_phone_number_id\n    \n as \n    \n    from_phone_number_id\n    \n, \n    \n    \n    from_smssender_id\n    \n as \n    \n    from_smssender_id\n    \n, \n    \n    \n    image_url\n    \n as \n    \n    image_url\n    \n, \n    \n    \n    is_ghost_push\n    \n as \n    \n    is_ghost_push\n    \n, \n    \n    \n    link_id\n    \n as \n    \n    link_id\n    \n, \n    \n    \n    link_url\n    \n as \n    \n    link_url\n    \n, \n    \n    \n    locale\n    \n as \n    \n    locale\n    \n, \n    \n    \n    payload\n    \n as \n    \n    payload\n    \n, \n    \n    \n    platform_endpoint\n    \n as \n    \n    platform_endpoint\n    \n, \n    \n    \n    push_message\n    \n as \n    \n    push_message\n    \n, \n    \n    \n    region\n    \n as \n    \n    region\n    \n, \n    \n    \n    sms_message\n    \n as \n    \n    sms_message\n    \n, \n    \n    \n    sms_provider_response_code\n    \n as \n    \n    sms_provider_response_code\n    \n, \n    \n    \n    sms_provider_response_message\n    \n as \n    \n    sms_provider_response_message\n    \n, \n    \n    \n    sms_provider_response_more_info\n    \n as \n    \n    sms_provider_response_more_info\n    \n, \n    \n    \n    sms_provider_response_status\n    \n as \n    \n    sms_provider_response_status\n    \n, \n    \n    \n    sound\n    \n as \n    \n    sound\n    \n, \n    \n    \n    to_phone_number\n    \n as \n    \n    to_phone_number\n    \n, \n    \n    \n    url\n    \n as \n    \n    url\n    \n, \n    \n    \n    workflow_id\n    \n as \n    \n    workflow_id\n    \n, \n    \n    \n    workflow_name\n    \n as \n    \n    workflow_name\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    select\n        _fivetran_id as event_id,\n        app_already_running as is_app_already_running,\n        badge,\n        canonical_url_id,\n        content_available as is_content_available,\n        content_id,\n        deeplink_android,\n        deeplink_ios,\n        device,\n        email_id,\n        email_subject,\n        experiment_id,\n        from_phone_number_id,\n        from_smssender_id,\n        image_url,\n        is_ghost_push,\n        link_id,\n        link_url,\n        locale,\n        payload,\n        platform_endpoint,\n        push_message,\n        region,\n        sms_message,\n        sms_provider_response_code,\n        sms_provider_response_message,\n        sms_provider_response_more_info,\n        sms_provider_response_status,\n        sound,\n        to_phone_number,\n        url,\n        workflow_id,\n        workflow_name,\n        _fivetran_synced\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__event_extension`"}, "model.iterable_source.stg_iterable__list": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_iterable__list_tmp') }}\n    where not coalesce(_fivetran_deleted, true)\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_iterable__list_tmp')),\n                staging_columns=get_list_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as list_id,\n        name as list_name,\n        list_type,\n        created_at,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.iterable_source.get_list_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.iterable_source.stg_iterable__list_tmp", "model.iterable_source.stg_iterable__list_tmp"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "stg_iterable", "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_stg_iterable", "fqn": ["iterable_source", "stg_iterable__list"], "unique_id": "model.iterable_source.stg_iterable__list", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "stg_iterable__list.sql", "original_file_path": "models/stg_iterable__list.sql", "name": "stg_iterable__list", "alias": "stg_iterable__list", "checksum": {"name": "sha256", "checksum": "ad6ceab98eba6a91b7792bac0181b119c21fc294754886b307ba5951f0d96535"}, "tags": [], "refs": [["stg_iterable__list_tmp"], ["stg_iterable__list_tmp"]], "sources": [], "description": "Table containing users and the lists the users are associated with.", "columns": {"list_id": {"name": "list_id", "description": "Unique identifier of the list", "meta": {}, "data_type": null, "quote": null, "tags": []}, "list_name": {"name": "list_name", "description": "User defined name of the list", "meta": {}, "data_type": null, "quote": null, "tags": []}, "list_type": {"name": "list_type", "description": "The list type", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Creation timestamp as epoch time in milliseconds", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_iterable.yml", "build_path": "target/compiled/iterable_source/models/stg_iterable__list.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_iterable"}, "compiled_sql": "with base as (\n\n    select * \n    from `dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__list_tmp`\n    where not coalesce(_fivetran_deleted, true)\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    list_type\n    \n as \n    \n    list_type\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as list_id,\n        name as list_name,\n        list_type,\n        created_at,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__list`"}, "model.iterable_source.stg_iterable__campaign_suppression_list_history": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_iterable__campaign_suppression_list_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_iterable__campaign_suppression_list_history_tmp')),\n                staging_columns=get_campaign_suppression_list_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        campaign_id,\n        suppressed_list_id,\n        updated_at,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.iterable_source.get_campaign_suppression_list_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.iterable_source.stg_iterable__campaign_suppression_list_history_tmp", "model.iterable_source.stg_iterable__campaign_suppression_list_history_tmp"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "stg_iterable", "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_stg_iterable", "fqn": ["iterable_source", "stg_iterable__campaign_suppression_list_history"], "unique_id": "model.iterable_source.stg_iterable__campaign_suppression_list_history", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "stg_iterable__campaign_suppression_list_history.sql", "original_file_path": "models/stg_iterable__campaign_suppression_list_history.sql", "name": "stg_iterable__campaign_suppression_list_history", "alias": "stg_iterable__campaign_suppression_list_history", "checksum": {"name": "sha256", "checksum": "c434637f22f4f2709b7cab6003eb8bbd638e6fa6a35ab11fdac8f5a3a027696f"}, "tags": [], "refs": [["stg_iterable__campaign_suppression_list_history_tmp"], ["stg_iterable__campaign_suppression_list_history_tmp"]], "sources": [], "description": "Table containing a history of suppression lists.", "columns": {"campaign_id": {"name": "campaign_id", "description": "Reference to the campaign associated with the label", "meta": {}, "data_type": null, "quote": null, "tags": []}, "suppressed_list_id": {"name": "suppressed_list_id", "description": "Reference to the list used", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Last update timestamp as epoch time in milliseconds", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_iterable.yml", "build_path": "target/compiled/iterable_source/models/stg_iterable__campaign_suppression_list_history.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_iterable"}, "compiled_sql": "with base as (\n\n    select * \n    from `dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__campaign_suppression_list_history_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    campaign_id\n    \n as \n    \n    campaign_id\n    \n, \n    \n    \n    suppressed_list_id\n    \n as \n    \n    suppressed_list_id\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        campaign_id,\n        suppressed_list_id,\n        updated_at,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__campaign_suppression_list_history`"}, "model.iterable_source.stg_iterable__campaign_list_history": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_iterable__campaign_list_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_iterable__campaign_list_history_tmp')),\n                staging_columns=get_campaign_list_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        campaign_id,\n        list_id,\n        updated_at,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.iterable_source.get_campaign_list_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.iterable_source.stg_iterable__campaign_list_history_tmp", "model.iterable_source.stg_iterable__campaign_list_history_tmp"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "stg_iterable", "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_stg_iterable", "fqn": ["iterable_source", "stg_iterable__campaign_list_history"], "unique_id": "model.iterable_source.stg_iterable__campaign_list_history", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "stg_iterable__campaign_list_history.sql", "original_file_path": "models/stg_iterable__campaign_list_history.sql", "name": "stg_iterable__campaign_list_history", "alias": "stg_iterable__campaign_list_history", "checksum": {"name": "sha256", "checksum": "cd284ec103d50297d4dd18145a426ec6fadac463a975540278187cd4862d1a9e"}, "tags": [], "refs": [["stg_iterable__campaign_list_history_tmp"], ["stg_iterable__campaign_list_history_tmp"]], "sources": [], "description": "Table containing a history of lists.", "columns": {"campaign_id": {"name": "campaign_id", "description": "Reference to the campaign associated with the label", "meta": {}, "data_type": null, "quote": null, "tags": []}, "list_id": {"name": "list_id", "description": "Reference to the list used", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Last update timestamp as epoch time in milliseconds", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_iterable.yml", "build_path": "target/compiled/iterable_source/models/stg_iterable__campaign_list_history.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_iterable"}, "compiled_sql": "with base as (\n\n    select * \n    from `dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__campaign_list_history_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    campaign_id\n    \n as \n    \n    campaign_id\n    \n, \n    \n    \n    list_id\n    \n as \n    \n    list_id\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        campaign_id,\n        list_id,\n        updated_at,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__campaign_list_history`"}, "model.iterable_source.stg_iterable__user_history": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_iterable__user_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_iterable__user_history_tmp')),\n                staging_columns=get_user_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        lower(email) as email,\n        user_id,\n        first_name,\n        last_name,\n        email_list_ids,\n        phone_number,\n        signup_date,\n        signup_source,\n        updated_at,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.iterable_source.get_user_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.iterable_source.stg_iterable__user_history_tmp", "model.iterable_source.stg_iterable__user_history_tmp"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "stg_iterable", "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_stg_iterable", "fqn": ["iterable_source", "stg_iterable__user_history"], "unique_id": "model.iterable_source.stg_iterable__user_history", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "stg_iterable__user_history.sql", "original_file_path": "models/stg_iterable__user_history.sql", "name": "stg_iterable__user_history", "alias": "stg_iterable__user_history", "checksum": {"name": "sha256", "checksum": "d17671b51416617b4119bd157629858369325620432d37dda83cf8b785d75f9e"}, "tags": [], "refs": [["stg_iterable__user_history_tmp"], ["stg_iterable__user_history_tmp"]], "sources": [], "description": "Table containing individual user history information.", "columns": {"email": {"name": "email", "description": "Unique identifier of the user as well as their email", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "User defined identifier of the user. This is not a unique field", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "First name of the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "Last name of the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_list_ids": {"name": "email_list_ids", "description": "Array of references to the lists associated with the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "signup_date": {"name": "signup_date", "description": "Timestamp as epoch time in milliseconds of when the user signed up", "meta": {}, "data_type": null, "quote": null, "tags": []}, "signup_source": {"name": "signup_source", "description": "Source where the user signed up", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Last update timestamp as epoch time in milliseconds", "meta": {}, "data_type": null, "quote": null, "tags": []}, "phone_number": {"name": "phone_number", "description": "Phone number associated with the user", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_iterable.yml", "build_path": "target/compiled/iterable_source/models/stg_iterable__user_history.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_iterable"}, "compiled_sql": "with base as (\n\n    select * \n    from `dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__user_history_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    email_list_ids\n    \n as \n    \n    email_list_ids\n    \n, \n    \n    \n    first_name\n    \n as \n    \n    first_name\n    \n, \n    \n    \n    last_name\n    \n as \n    \n    last_name\n    \n, \n    \n    \n    phone_number\n    \n as \n    \n    phone_number\n    \n, \n    \n    \n    signup_date\n    \n as \n    \n    signup_date\n    \n, \n    \n    \n    signup_source\n    \n as \n    \n    signup_source\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        lower(email) as email,\n        user_id,\n        first_name,\n        last_name,\n        email_list_ids,\n        phone_number,\n        signup_date,\n        signup_source,\n        updated_at,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__user_history`"}, "model.iterable_source.stg_iterable__campaign_label_history": {"raw_sql": "{{ config(enabled=var('iterable__using_campaign_label_history', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_iterable__campaign_label_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_iterable__campaign_label_history_tmp')),\n                staging_columns=get_campaign_label_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        campaign_id,\n        label,\n        updated_at,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.iterable_source.get_campaign_label_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.iterable_source.stg_iterable__campaign_label_history_tmp", "model.iterable_source.stg_iterable__campaign_label_history_tmp"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "stg_iterable", "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_stg_iterable", "fqn": ["iterable_source", "stg_iterable__campaign_label_history"], "unique_id": "model.iterable_source.stg_iterable__campaign_label_history", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "stg_iterable__campaign_label_history.sql", "original_file_path": "models/stg_iterable__campaign_label_history.sql", "name": "stg_iterable__campaign_label_history", "alias": "stg_iterable__campaign_label_history", "checksum": {"name": "sha256", "checksum": "491fa0ec8b78ce7491799b9cc477a64337dada1495e146d65f04e1723f25b297"}, "tags": [], "refs": [["stg_iterable__campaign_label_history_tmp"], ["stg_iterable__campaign_label_history_tmp"]], "sources": [], "description": "Table containing a history of labels.", "columns": {"campaign_id": {"name": "campaign_id", "description": "Reference to the campaign associated with the label", "meta": {}, "data_type": null, "quote": null, "tags": []}, "label": {"name": "label", "description": "Name of the label", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Last update timestamp as epoch time in milliseconds", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_iterable.yml", "build_path": "target/compiled/iterable_source/models/stg_iterable__campaign_label_history.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_iterable", "enabled": true}, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__campaign_label_history_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    campaign_id\n    \n as \n    \n    campaign_id\n    \n, \n    \n    \n    label\n    \n as \n    \n    label\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        campaign_id,\n        label,\n        updated_at,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__campaign_label_history`"}, "model.iterable_source.stg_iterable__event": {"raw_sql": "{{ config( materialized = 'view' ) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_iterable__event_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_iterable__event_tmp')),\n                staging_columns=get_event_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_id as event_id,\n        campaign_id,\n        content_id,\n        created_at,\n        cast( {{ dbt_utils.date_trunc('day', 'created_at') }} as date) as created_on,\n        lower(email) as email,\n        additional_properties,\n        event_name,\n        message_bus_id,\n        message_id,\n        message_type_id,\n        recipient_state,\n        status,\n        transactional_data,\n        unsub_source,\n        user_agent,\n        user_agent_device,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.iterable_source.get_event_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.date_trunc"], "nodes": ["model.iterable_source.stg_iterable__event_tmp", "model.iterable_source.stg_iterable__event_tmp"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "stg_iterable", "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_stg_iterable", "fqn": ["iterable_source", "stg_iterable__event"], "unique_id": "model.iterable_source.stg_iterable__event", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "stg_iterable__event.sql", "original_file_path": "models/stg_iterable__event.sql", "name": "stg_iterable__event", "alias": "stg_iterable__event", "checksum": {"name": "sha256", "checksum": "b85254086d8e299ae86a1d314003971039f60bdcf4ea203b6cdc669a6b6bdc6a"}, "tags": [], "refs": [["stg_iterable__event_tmp"], ["stg_iterable__event_tmp"]], "sources": [], "description": "Table containing individual events within campaigns.", "columns": {"event_id": {"name": "event_id", "description": "Unique id of the event generated by Fivetran", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Reference to the campaign from which the event originated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "content_id": {"name": "content_id", "description": "Reference to the content the event is associated with", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Creation timestamp as epoch time in milliseconds", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "Reference to the unique user the event was applied to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "additional_properties": {"name": "additional_properties", "description": "json object containing addition event properties", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_name": {"name": "event_name", "description": "Name provided to the individual event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "message_bus_id": {"name": "message_bus_id", "description": "Reference to the message bus associated with the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "message_id": {"name": "message_id", "description": "Reference to the message the event is associated with", "meta": {}, "data_type": null, "quote": null, "tags": []}, "message_type_id": {"name": "message_type_id", "description": "Reference to the type of message the event is associated with", "meta": {}, "data_type": null, "quote": null, "tags": []}, "recipient_state": {"name": "recipient_state", "description": "The state of the recipient upon receiving the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Status of the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transactional_data": {"name": "transactional_data", "description": "Transactional data associated with the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unsub_source": {"name": "unsub_source", "description": "Source of the unsubscribe event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_agent": {"name": "user_agent", "description": "User agent associated with the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_agent_device": {"name": "user_agent_device", "description": "The device of the user agent", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_iterable.yml", "build_path": "target/compiled/iterable_source/models/stg_iterable__event.sql", "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_iterable"}, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__event_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_id\n    \n as \n    \n    _fivetran_id\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    campaign_id\n    \n as \n    \n    campaign_id\n    \n, \n    \n    \n    content_id\n    \n as \n    \n    content_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    event_name\n    \n as \n    \n    event_name\n    \n, \n    \n    \n    message_bus_id\n    \n as \n    \n    message_bus_id\n    \n, \n    \n    \n    message_id\n    \n as \n    \n    message_id\n    \n, \n    \n    \n    message_type_id\n    \n as \n    \n    message_type_id\n    \n, \n    \n    \n    recipient_state\n    \n as \n    \n    recipient_state\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    unsub_source\n    \n as \n    \n    unsub_source\n    \n, \n    \n    \n    user_agent\n    \n as \n    \n    user_agent\n    \n, \n    \n    \n    user_agent_device\n    \n as \n    \n    user_agent_device\n    \n, \n    \n    \n    transactional_data\n    \n as \n    \n    transactional_data\n    \n, \n    \n    \n    additional_properties\n    \n as \n    \n    additional_properties\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_id as event_id,\n        campaign_id,\n        content_id,\n        created_at,\n        cast( \n    timestamp_trunc(\n        cast(created_at as timestamp),\n        day\n    )\n\n as date) as created_on,\n        lower(email) as email,\n        additional_properties,\n        event_name,\n        message_bus_id,\n        message_id,\n        message_type_id,\n        recipient_state,\n        status,\n        transactional_data,\n        unsub_source,\n        user_agent,\n        user_agent_device,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__event`"}, "model.iterable_source.stg_iterable__user_unsubscribed_channel_history": {"raw_sql": "with base as (\n    select *\n    from {{ ref('stg_iterable__user_unsubscribed_channel_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_iterable__user_unsubscribed_channel_history_tmp')),\n                staging_columns=get_user_unsubscribed_channel_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        channel_id,\n        email,\n        updated_at,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.iterable_source.get_user_unsubscribed_channel_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.iterable_source.stg_iterable__user_unsubscribed_channel_history_tmp", "model.iterable_source.stg_iterable__user_unsubscribed_channel_history_tmp"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "stg_iterable", "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_stg_iterable", "fqn": ["iterable_source", "stg_iterable__user_unsubscribed_channel_history"], "unique_id": "model.iterable_source.stg_iterable__user_unsubscribed_channel_history", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "stg_iterable__user_unsubscribed_channel_history.sql", "original_file_path": "models/stg_iterable__user_unsubscribed_channel_history.sql", "name": "stg_iterable__user_unsubscribed_channel_history", "alias": "stg_iterable__user_unsubscribed_channel_history", "checksum": {"name": "sha256", "checksum": "a2b333735ed2eda3e440fc80839fc625d35072fa77fc14e2f2c061b122a9dcae"}, "tags": [], "refs": [["stg_iterable__user_unsubscribed_channel_history_tmp"], ["stg_iterable__user_unsubscribed_channel_history_tmp"]], "sources": [], "description": "Table containing the history of channels from which a user has unsubscribed.", "columns": {"channel_id": {"name": "channel_id", "description": "Reference to the channel from which the user unsubscribed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "Unique identifier of the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Last update timestamp as epoch time in milliseconds", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_iterable.yml", "build_path": "target/compiled/iterable_source/models/stg_iterable__user_unsubscribed_channel_history.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_iterable"}, "compiled_sql": "with base as (\n    select *\n    from `dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__user_unsubscribed_channel_history_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    channel_id\n    \n as \n    \n    channel_id\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        channel_id,\n        email,\n        updated_at,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__user_unsubscribed_channel_history`"}, "model.iterable_source.stg_iterable__template_history": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_iterable__template_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_iterable__template_history_tmp')),\n                staging_columns=get_template_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as template_id,\n        name as template_name,\n        template_type,\n        created_at,\n        client_template_id,\n        creator_user_id,\n        message_type_id,\n        updated_at,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.iterable_source.get_template_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.iterable_source.stg_iterable__template_history_tmp", "model.iterable_source.stg_iterable__template_history_tmp"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "stg_iterable", "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_stg_iterable", "fqn": ["iterable_source", "stg_iterable__template_history"], "unique_id": "model.iterable_source.stg_iterable__template_history", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "stg_iterable__template_history.sql", "original_file_path": "models/stg_iterable__template_history.sql", "name": "stg_iterable__template_history", "alias": "stg_iterable__template_history", "checksum": {"name": "sha256", "checksum": "26183f6158df500ec3d70fa94cd42c3496c36f1e765414610c16642fdc8d6103"}, "tags": [], "refs": [["stg_iterable__template_history_tmp"], ["stg_iterable__template_history_tmp"]], "sources": [], "description": "Table containing unique templates used across campaigns.", "columns": {"template_id": {"name": "template_id", "description": "Unique identifer of the template", "meta": {}, "data_type": null, "quote": null, "tags": []}, "template_name": {"name": "template_name", "description": "User defined name of the template", "meta": {}, "data_type": null, "quote": null, "tags": []}, "template_type": {"name": "template_type", "description": "The type of the template", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Creation timestamp as epoch time in milliseconds", "meta": {}, "data_type": null, "quote": null, "tags": []}, "client_template_id": {"name": "client_template_id", "description": "Reference to the client template", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creator_user_id": {"name": "creator_user_id", "description": "Reference to the user who created the template", "meta": {}, "data_type": null, "quote": null, "tags": []}, "message_type_id": {"name": "message_type_id", "description": "Reference to the message type associated with the template", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Last update timestamp as epoch time in milliseconds", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_iterable.yml", "build_path": "target/compiled/iterable_source/models/stg_iterable__template_history.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_iterable"}, "compiled_sql": "with base as (\n\n    select * \n    from `dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__template_history_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    client_template_id\n    \n as \n    \n    client_template_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    creator_user_id\n    \n as \n    \n    creator_user_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    message_type_id\n    \n as \n    \n    message_type_id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    template_type\n    \n as \n    \n    template_type\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as template_id,\n        name as template_name,\n        template_type,\n        created_at,\n        client_template_id,\n        creator_user_id,\n        message_type_id,\n        updated_at,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__template_history`"}, "model.iterable_source.stg_iterable__channel": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_iterable__channel_tmp') }}\n    where not coalesce(_fivetran_deleted, false)\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_iterable__channel_tmp')),\n                staging_columns=get_channel_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as channel_id, \n        name as channel_name,\n        channel_type,\n        message_medium,\n        _fivetran_synced\n        \n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.iterable_source.get_channel_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.iterable_source.stg_iterable__channel_tmp", "model.iterable_source.stg_iterable__channel_tmp"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "stg_iterable", "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_stg_iterable", "fqn": ["iterable_source", "stg_iterable__channel"], "unique_id": "model.iterable_source.stg_iterable__channel", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "stg_iterable__channel.sql", "original_file_path": "models/stg_iterable__channel.sql", "name": "stg_iterable__channel", "alias": "stg_iterable__channel", "checksum": {"name": "sha256", "checksum": "8d04bf8005c36459baa8587a14e5f5457d30a0afacc1d6001c5310b579f2dff9"}, "tags": [], "refs": [["stg_iterable__channel_tmp"], ["stg_iterable__channel_tmp"]], "sources": [], "description": "Table containing unique channels.", "columns": {"channel_id": {"name": "channel_id", "description": "Unique identifier of the channel", "meta": {}, "data_type": null, "quote": null, "tags": []}, "channel_name": {"name": "channel_name", "description": "User defined name of the channel", "meta": {}, "data_type": null, "quote": null, "tags": []}, "channel_type": {"name": "channel_type", "description": "The channel type", "meta": {}, "data_type": null, "quote": null, "tags": []}, "message_medium": {"name": "message_medium", "description": "The message medium associated with the channel", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_iterable.yml", "build_path": "target/compiled/iterable_source/models/stg_iterable__channel.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_iterable"}, "compiled_sql": "with base as (\n\n    select * \n    from `dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__channel_tmp`\n    where not coalesce(_fivetran_deleted, false)\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    channel_type\n    \n as \n    \n    channel_type\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    message_medium\n    \n as \n    \n    message_medium\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as channel_id, \n        name as channel_name,\n        channel_type,\n        message_medium,\n        _fivetran_synced\n        \n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__channel`"}, "model.iterable_source.stg_iterable__campaign_history": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_iterable__campaign_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_iterable__campaign_history_tmp')),\n                staging_columns=get_campaign_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as campaign_id,\n        updated_at,\n        name as campaign_name,\n        campaign_state,\n        type as campaign_type,\n        send_size,\n        start_at,\n        ended_at,\n        created_at,\n        recurring_campaign_id,\n        created_by_user_id,\n        template_id,\n        workflow_id,\n        _fivetran_synced\n\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.iterable_source.get_campaign_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.iterable_source.stg_iterable__campaign_history_tmp", "model.iterable_source.stg_iterable__campaign_history_tmp"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "stg_iterable", "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_stg_iterable", "fqn": ["iterable_source", "stg_iterable__campaign_history"], "unique_id": "model.iterable_source.stg_iterable__campaign_history", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "stg_iterable__campaign_history.sql", "original_file_path": "models/stg_iterable__campaign_history.sql", "name": "stg_iterable__campaign_history", "alias": "stg_iterable__campaign_history", "checksum": {"name": "sha256", "checksum": "e2155273dc2d877fe85e0c5cf636347c991559d7b5b28cc7ff507786d8ec8d2c"}, "tags": [], "refs": [["stg_iterable__campaign_history_tmp"], ["stg_iterable__campaign_history_tmp"]], "sources": [], "description": "Table containing a history of campaigns.", "columns": {"campaign_id": {"name": "campaign_id", "description": "Unique identifier of the campaign record", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Last update timestamp as epoch time in milliseconds", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "User defined name of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_state": {"name": "campaign_state", "description": "State of the campaign. Can be Draft, Ready, Scheduled, Running, Finished, Starting, Aborted or Recurring", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "The campaign type. Can be Blast or Triggered", "meta": {}, "data_type": null, "quote": null, "tags": []}, "send_size": {"name": "send_size", "description": "Size of the campaign. Number of individuals included in the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_at": {"name": "start_at", "description": "Start timestamp as epoch time in milliseconds", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ended_at": {"name": "ended_at", "description": "Ended timestamp as epoch time in milliseconds", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Creation timestamp as epoch time in milliseconds", "meta": {}, "data_type": null, "quote": null, "tags": []}, "recurring_campaign_id": {"name": "recurring_campaign_id", "description": "Reference to the recurring campaign, if applicable", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_by_user_id": {"name": "created_by_user_id", "description": "Reference to the user who created the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "template_id": {"name": "template_id", "description": "Reference to the campaign template", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_iterable.yml", "build_path": "target/compiled/iterable_source/models/stg_iterable__campaign_history.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_iterable"}, "compiled_sql": "with base as (\n\n    select * \n    from `dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__campaign_history_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    campaign_state\n    \n as \n    \n    campaign_state\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    created_by_user_id\n    \n as \n    \n    created_by_user_id\n    \n, \n    \n    \n    ended_at\n    \n as \n    \n    ended_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    recurring_campaign_id\n    \n as \n    \n    recurring_campaign_id\n    \n, \n    \n    \n    send_size\n    \n as \n    \n    send_size\n    \n, \n    \n    \n    start_at\n    \n as \n    \n    start_at\n    \n, \n    \n    \n    template_id\n    \n as \n    \n    template_id\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    workflow_id\n    \n as \n    \n    workflow_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as campaign_id,\n        updated_at,\n        name as campaign_name,\n        campaign_state,\n        type as campaign_type,\n        send_size,\n        start_at,\n        ended_at,\n        created_at,\n        recurring_campaign_id,\n        created_by_user_id,\n        template_id,\n        workflow_id,\n        _fivetran_synced\n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__campaign_history`"}, "model.iterable_source.stg_iterable__message_type": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_iterable__message_type_tmp') }}\n    where not coalesce(_fivetran_deleted, false)\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_iterable__message_type_tmp')),\n                staging_columns=get_message_type_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as message_type_id,\n        name as message_type_name,\n        channel_id,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.iterable_source.get_message_type_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.iterable_source.stg_iterable__message_type_tmp", "model.iterable_source.stg_iterable__message_type_tmp"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "stg_iterable", "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_stg_iterable", "fqn": ["iterable_source", "stg_iterable__message_type"], "unique_id": "model.iterable_source.stg_iterable__message_type", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "stg_iterable__message_type.sql", "original_file_path": "models/stg_iterable__message_type.sql", "name": "stg_iterable__message_type", "alias": "stg_iterable__message_type", "checksum": {"name": "sha256", "checksum": "1c3ae8884d131f1e4fecd4fc76a802daca798675d8e369c6828987c208ae78a2"}, "tags": [], "refs": [["stg_iterable__message_type_tmp"], ["stg_iterable__message_type_tmp"]], "sources": [], "description": "Table containing unique message types.", "columns": {"message_type_id": {"name": "message_type_id", "description": "Unique identifer of the message type", "meta": {}, "data_type": null, "quote": null, "tags": []}, "message_type_name": {"name": "message_type_name", "description": "User defined name of the message type", "meta": {}, "data_type": null, "quote": null, "tags": []}, "channel_id": {"name": "channel_id", "description": "Channel that this message type belongs to", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_iterable.yml", "build_path": "target/compiled/iterable_source/models/stg_iterable__message_type.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_iterable"}, "compiled_sql": "with base as (\n\n    select * \n    from `dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__message_type_tmp`\n    where not coalesce(_fivetran_deleted, false)\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    channel_id\n    \n as \n    \n    channel_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as message_type_id,\n        name as message_type_name,\n        channel_id,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__message_type`"}, "model.iterable_source.stg_iterable__campaign_history_tmp": {"raw_sql": "select * \nfrom {{ var('campaign_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.iterable_integration_tests.campaign_history_data"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "stg_iterable", "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_stg_iterable", "fqn": ["iterable_source", "tmp", "stg_iterable__campaign_history_tmp"], "unique_id": "model.iterable_source.stg_iterable__campaign_history_tmp", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "tmp/stg_iterable__campaign_history_tmp.sql", "original_file_path": "models/tmp/stg_iterable__campaign_history_tmp.sql", "name": "stg_iterable__campaign_history_tmp", "alias": "stg_iterable__campaign_history_tmp", "checksum": {"name": "sha256", "checksum": "9baa7ba92b2a86de4e587eca1c8218da59121ab4ac1d331a1b7394edc1b7bd9f"}, "tags": [], "refs": [["campaign_history_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/iterable_source/models/tmp/stg_iterable__campaign_history_tmp.sql", "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_iterable"}, "compiled_sql": "select * \nfrom `dbt-package-testing`.`iterable_integration_tests`.`campaign_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__campaign_history_tmp`"}, "model.iterable_source.stg_iterable__list_tmp": {"raw_sql": "select *\nfrom {{ var('list') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.iterable_integration_tests.list_data"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "stg_iterable", "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_stg_iterable", "fqn": ["iterable_source", "tmp", "stg_iterable__list_tmp"], "unique_id": "model.iterable_source.stg_iterable__list_tmp", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "tmp/stg_iterable__list_tmp.sql", "original_file_path": "models/tmp/stg_iterable__list_tmp.sql", "name": "stg_iterable__list_tmp", "alias": "stg_iterable__list_tmp", "checksum": {"name": "sha256", "checksum": "7a30a833735540cb97b863f15a98cdbd22349baf271fe83a3a99c87981d79a8e"}, "tags": [], "refs": [["list_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/iterable_source/models/tmp/stg_iterable__list_tmp.sql", "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_iterable"}, "compiled_sql": "select *\nfrom `dbt-package-testing`.`iterable_integration_tests`.`list_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__list_tmp`"}, "model.iterable_source.stg_iterable__campaign_suppression_list_history_tmp": {"raw_sql": "select *\nfrom {{ var('campaign_suppression_list_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.iterable_integration_tests.campaign_suppression_list_history_data"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "stg_iterable", "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_stg_iterable", "fqn": ["iterable_source", "tmp", "stg_iterable__campaign_suppression_list_history_tmp"], "unique_id": "model.iterable_source.stg_iterable__campaign_suppression_list_history_tmp", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "tmp/stg_iterable__campaign_suppression_list_history_tmp.sql", "original_file_path": "models/tmp/stg_iterable__campaign_suppression_list_history_tmp.sql", "name": "stg_iterable__campaign_suppression_list_history_tmp", "alias": "stg_iterable__campaign_suppression_list_history_tmp", "checksum": {"name": "sha256", "checksum": "7278457bc080a1ba40266cd08d79663ec4cac38da2682be46ea913fbd54d242e"}, "tags": [], "refs": [["campaign_suppression_list_history_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/iterable_source/models/tmp/stg_iterable__campaign_suppression_list_history_tmp.sql", "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_iterable"}, "compiled_sql": "select *\nfrom `dbt-package-testing`.`iterable_integration_tests`.`campaign_suppression_list_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__campaign_suppression_list_history_tmp`"}, "model.iterable_source.stg_iterable__template_history_tmp": {"raw_sql": "select *\nfrom {{ var('template_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.iterable_integration_tests.template_history_data"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "stg_iterable", "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_stg_iterable", "fqn": ["iterable_source", "tmp", "stg_iterable__template_history_tmp"], "unique_id": "model.iterable_source.stg_iterable__template_history_tmp", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "tmp/stg_iterable__template_history_tmp.sql", "original_file_path": "models/tmp/stg_iterable__template_history_tmp.sql", "name": "stg_iterable__template_history_tmp", "alias": "stg_iterable__template_history_tmp", "checksum": {"name": "sha256", "checksum": "5177792a1e80d134400453a9527dd48fb4435a54644ee3e5e26aa048b24e5bec"}, "tags": [], "refs": [["template_history_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/iterable_source/models/tmp/stg_iterable__template_history_tmp.sql", "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_iterable"}, "compiled_sql": "select *\nfrom `dbt-package-testing`.`iterable_integration_tests`.`template_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__template_history_tmp`"}, "model.iterable_source.stg_iterable__campaign_list_history_tmp": {"raw_sql": "select *\nfrom {{ var('campaign_list_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.iterable_integration_tests.campaign_list_history_data"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "stg_iterable", "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_stg_iterable", "fqn": ["iterable_source", "tmp", "stg_iterable__campaign_list_history_tmp"], "unique_id": "model.iterable_source.stg_iterable__campaign_list_history_tmp", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "tmp/stg_iterable__campaign_list_history_tmp.sql", "original_file_path": "models/tmp/stg_iterable__campaign_list_history_tmp.sql", "name": "stg_iterable__campaign_list_history_tmp", "alias": "stg_iterable__campaign_list_history_tmp", "checksum": {"name": "sha256", "checksum": "bedd958d076f2f5f81f7434a34ac2018dc9ddf0b00a7bc5103f31c64c86f9187"}, "tags": [], "refs": [["campaign_list_history_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/iterable_source/models/tmp/stg_iterable__campaign_list_history_tmp.sql", "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_iterable"}, "compiled_sql": "select *\nfrom `dbt-package-testing`.`iterable_integration_tests`.`campaign_list_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__campaign_list_history_tmp`"}, "model.iterable_source.stg_iterable__channel_tmp": {"raw_sql": "select *\nfrom {{ var('channel') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.iterable_integration_tests.channel_data"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "stg_iterable", "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_stg_iterable", "fqn": ["iterable_source", "tmp", "stg_iterable__channel_tmp"], "unique_id": "model.iterable_source.stg_iterable__channel_tmp", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "tmp/stg_iterable__channel_tmp.sql", "original_file_path": "models/tmp/stg_iterable__channel_tmp.sql", "name": "stg_iterable__channel_tmp", "alias": "stg_iterable__channel_tmp", "checksum": {"name": "sha256", "checksum": "f1c2aa1e8ffbf5c5235c00983b4e842c05981abf08864a5f57f59e9368da4f53"}, "tags": [], "refs": [["channel_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/iterable_source/models/tmp/stg_iterable__channel_tmp.sql", "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_iterable"}, "compiled_sql": "select *\nfrom `dbt-package-testing`.`iterable_integration_tests`.`channel_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__channel_tmp`"}, "model.iterable_source.stg_iterable__event_tmp": {"raw_sql": "select * \nfrom {{ var('event') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.iterable_integration_tests.event_data"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "stg_iterable", "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_stg_iterable", "fqn": ["iterable_source", "tmp", "stg_iterable__event_tmp"], "unique_id": "model.iterable_source.stg_iterable__event_tmp", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "tmp/stg_iterable__event_tmp.sql", "original_file_path": "models/tmp/stg_iterable__event_tmp.sql", "name": "stg_iterable__event_tmp", "alias": "stg_iterable__event_tmp", "checksum": {"name": "sha256", "checksum": "86528f048fa2d0ec61a85a400a9b0d257abfc3d7a1f29ede5ab1b180f0bbe190"}, "tags": [], "refs": [["event_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/iterable_source/models/tmp/stg_iterable__event_tmp.sql", "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_iterable"}, "compiled_sql": "select * \nfrom `dbt-package-testing`.`iterable_integration_tests`.`event_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__event_tmp`"}, "model.iterable_source.stg_iterable__user_unsubscribed_channel_history_tmp": {"raw_sql": "select *\nfrom {{ var('user_unsubscribed_channel_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.iterable_integration_tests.user_unsubscribed_channel_history_data"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "stg_iterable", "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_stg_iterable", "fqn": ["iterable_source", "tmp", "stg_iterable__user_unsubscribed_channel_history_tmp"], "unique_id": "model.iterable_source.stg_iterable__user_unsubscribed_channel_history_tmp", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "tmp/stg_iterable__user_unsubscribed_channel_history_tmp.sql", "original_file_path": "models/tmp/stg_iterable__user_unsubscribed_channel_history_tmp.sql", "name": "stg_iterable__user_unsubscribed_channel_history_tmp", "alias": "stg_iterable__user_unsubscribed_channel_history_tmp", "checksum": {"name": "sha256", "checksum": "d0bbd36720ba685c829640d4429a1114479c7ee0f9e10a52ea6d4868ca4faf25"}, "tags": [], "refs": [["user_unsubscribed_channel_history_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/iterable_source/models/tmp/stg_iterable__user_unsubscribed_channel_history_tmp.sql", "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_iterable"}, "compiled_sql": "select *\nfrom `dbt-package-testing`.`iterable_integration_tests`.`user_unsubscribed_channel_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__user_unsubscribed_channel_history_tmp`"}, "model.iterable_source.stg_iterable__user_unsub_message_type_history_tmp": {"raw_sql": "{{ config(enabled=var('iterable__using_user_unsubscribed_message_type_history', True)) }}\n\nselect * \nfrom {{ var('user_unsubscribed_message_type_history') }}\n-- had to rename this to be compatible with postgres....", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.iterable_integration_tests.user_unsubscribed_message_type_history_data"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "stg_iterable", "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_stg_iterable", "fqn": ["iterable_source", "tmp", "stg_iterable__user_unsub_message_type_history_tmp"], "unique_id": "model.iterable_source.stg_iterable__user_unsub_message_type_history_tmp", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "tmp/stg_iterable__user_unsub_message_type_history_tmp.sql", "original_file_path": "models/tmp/stg_iterable__user_unsub_message_type_history_tmp.sql", "name": "stg_iterable__user_unsub_message_type_history_tmp", "alias": "stg_iterable__user_unsub_message_type_history_tmp", "checksum": {"name": "sha256", "checksum": "02cafc5d720f202a67fe2583752304fd9ef8156f78b8e11b4b38ed2173ca601f"}, "tags": [], "refs": [["user_unsubscribed_message_type_history_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/iterable_source/models/tmp/stg_iterable__user_unsub_message_type_history_tmp.sql", "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_iterable", "enabled": true}, "compiled_sql": "\n\nselect * \nfrom `dbt-package-testing`.`iterable_integration_tests`.`user_unsubscribed_message_type_history_data`\n-- had to rename this to be compatible with postgres....", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__user_unsub_message_type_history_tmp`"}, "model.iterable_source.stg_iterable__event_extension_tmp": {"raw_sql": "select * \nfrom {{ var('event_extension') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.iterable_integration_tests.event_extension_data"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "stg_iterable", "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_stg_iterable", "fqn": ["iterable_source", "tmp", "stg_iterable__event_extension_tmp"], "unique_id": "model.iterable_source.stg_iterable__event_extension_tmp", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "tmp/stg_iterable__event_extension_tmp.sql", "original_file_path": "models/tmp/stg_iterable__event_extension_tmp.sql", "name": "stg_iterable__event_extension_tmp", "alias": "stg_iterable__event_extension_tmp", "checksum": {"name": "sha256", "checksum": "c635e7a0b812b5dcd4dba90ac23188eaea711d7f157c4393eebc847595a1258d"}, "tags": [], "refs": [["event_extension_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/iterable_source/models/tmp/stg_iterable__event_extension_tmp.sql", "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_iterable"}, "compiled_sql": "select * \nfrom `dbt-package-testing`.`iterable_integration_tests`.`event_extension_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__event_extension_tmp`"}, "model.iterable_source.stg_iterable__campaign_label_history_tmp": {"raw_sql": "{{ config(enabled=var('iterable__using_campaign_label_history', True)) }}\n\nselect *\nfrom {{ var('campaign_label_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.iterable_integration_tests.campaign_label_history_data"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "stg_iterable", "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_stg_iterable", "fqn": ["iterable_source", "tmp", "stg_iterable__campaign_label_history_tmp"], "unique_id": "model.iterable_source.stg_iterable__campaign_label_history_tmp", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "tmp/stg_iterable__campaign_label_history_tmp.sql", "original_file_path": "models/tmp/stg_iterable__campaign_label_history_tmp.sql", "name": "stg_iterable__campaign_label_history_tmp", "alias": "stg_iterable__campaign_label_history_tmp", "checksum": {"name": "sha256", "checksum": "2502215c73a86490ffe1971f13a6aa652ba6872b740ee2e60be897bdd6bafce9"}, "tags": [], "refs": [["campaign_label_history_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/iterable_source/models/tmp/stg_iterable__campaign_label_history_tmp.sql", "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_iterable", "enabled": true}, "compiled_sql": "\n\nselect *\nfrom `dbt-package-testing`.`iterable_integration_tests`.`campaign_label_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__campaign_label_history_tmp`"}, "model.iterable_source.stg_iterable__user_history_tmp": {"raw_sql": "select * \nfrom {{ var('user_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.iterable_integration_tests.user_history_data"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "stg_iterable", "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_stg_iterable", "fqn": ["iterable_source", "tmp", "stg_iterable__user_history_tmp"], "unique_id": "model.iterable_source.stg_iterable__user_history_tmp", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "tmp/stg_iterable__user_history_tmp.sql", "original_file_path": "models/tmp/stg_iterable__user_history_tmp.sql", "name": "stg_iterable__user_history_tmp", "alias": "stg_iterable__user_history_tmp", "checksum": {"name": "sha256", "checksum": "e92efdc088c8b679d07fc444de6194ac6fa7539f0ac0c171cc001d1429576208"}, "tags": [], "refs": [["user_history_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/iterable_source/models/tmp/stg_iterable__user_history_tmp.sql", "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_iterable"}, "compiled_sql": "select * \nfrom `dbt-package-testing`.`iterable_integration_tests`.`user_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__user_history_tmp`"}, "model.iterable_source.stg_iterable__message_type_tmp": {"raw_sql": "select *\nfrom {{ var('message_type') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.iterable_integration_tests.message_type_data"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "stg_iterable", "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_stg_iterable", "fqn": ["iterable_source", "tmp", "stg_iterable__message_type_tmp"], "unique_id": "model.iterable_source.stg_iterable__message_type_tmp", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "tmp/stg_iterable__message_type_tmp.sql", "original_file_path": "models/tmp/stg_iterable__message_type_tmp.sql", "name": "stg_iterable__message_type_tmp", "alias": "stg_iterable__message_type_tmp", "checksum": {"name": "sha256", "checksum": "fc7c43b64edf8a7c152434d79c30997103134ef85427a07d1a17fec9411c378c"}, "tags": [], "refs": [["message_type_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/iterable_source/models/tmp/stg_iterable__message_type_tmp.sql", "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_iterable"}, "compiled_sql": "select *\nfrom `dbt-package-testing`.`iterable_integration_tests`.`message_type_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__message_type_tmp`"}, "test.iterable_source.not_null_stg_iterable__campaign_history_campaign_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "campaign_id", "model": "{{ ref('stg_iterable__campaign_history') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.iterable_source.stg_iterable__campaign_history"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "stg_iterable", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_stg_iterable", "fqn": ["iterable_source", "schema_test", "not_null_stg_iterable__campaign_history_campaign_id"], "unique_id": "test.iterable_source.not_null_stg_iterable__campaign_history_campaign_id", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "schema_test/not_null_stg_iterable__campaign_history_campaign_id.sql", "original_file_path": "models/stg_iterable.yml", "name": "not_null_stg_iterable__campaign_history_campaign_id", "alias": "not_null_stg_iterable__campaign_history_campaign_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_iterable__campaign_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/iterable_source/models/stg_iterable.yml/schema_test/not_null_stg_iterable__campaign_history_campaign_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_iterable", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__campaign_history`\nwhere campaign_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "campaign_id"}, "test.iterable_source.dbt_utils_unique_combination_of_columns_stg_iterable__campaign_history_campaign_id__updated_at": {"raw_sql": "{{ config(severity='ERROR') }}{{ dbt_utils.test_unique_combination_of_columns(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["campaign_id", "updated_at"], "model": "{{ ref('stg_iterable__campaign_history') }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns"], "nodes": ["model.iterable_source.stg_iterable__campaign_history"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "stg_iterable", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_stg_iterable", "fqn": ["iterable_source", "schema_test", "dbt_utils_unique_combination_of_columns_stg_iterable__campaign_history_campaign_id__updated_at"], "unique_id": "test.iterable_source.dbt_utils_unique_combination_of_columns_stg_iterable__campaign_history_campaign_id__updated_at", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "schema_test/dbt_utils_unique_combination_of_columns_stg_iterable__campaign_history_campaign_id__updated_at.sql", "original_file_path": "models/stg_iterable.yml", "name": "dbt_utils_unique_combination_of_columns_stg_iterable__campaign_history_campaign_id__updated_at", "alias": "dbt_utils_unique_combination_of_columns_stg_iterable__campaign_history_campaign_id__updated_at", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_iterable__campaign_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/iterable_source/models/stg_iterable.yml/schema_test/dbt_utils_unique_combination_of_columns_stg_iterable__campaign_history_campaign_id__updated_at.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_iterable", "severity": "ERROR"}, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        campaign_id, updated_at\n    from `dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__campaign_history`\n\n    group by campaign_id, updated_at\n    having count(*) > 1\n\n)\n\nselect count(*)\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null}, "test.iterable_source.not_null_stg_iterable__campaign_label_history_campaign_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "campaign_id", "model": "{{ ref('stg_iterable__campaign_label_history') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.iterable_source.stg_iterable__campaign_label_history"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "stg_iterable", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_stg_iterable", "fqn": ["iterable_source", "schema_test", "not_null_stg_iterable__campaign_label_history_campaign_id"], "unique_id": "test.iterable_source.not_null_stg_iterable__campaign_label_history_campaign_id", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "schema_test/not_null_stg_iterable__campaign_label_history_campaign_id.sql", "original_file_path": "models/stg_iterable.yml", "name": "not_null_stg_iterable__campaign_label_history_campaign_id", "alias": "not_null_stg_iterable__campaign_label_history_campaign_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_iterable__campaign_label_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/iterable_source/models/stg_iterable.yml/schema_test/not_null_stg_iterable__campaign_label_history_campaign_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_iterable", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__campaign_label_history`\nwhere campaign_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "campaign_id"}, "test.iterable_source.not_null_stg_iterable__campaign_list_history_campaign_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "campaign_id", "model": "{{ ref('stg_iterable__campaign_list_history') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.iterable_source.stg_iterable__campaign_list_history"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "stg_iterable", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_stg_iterable", "fqn": ["iterable_source", "schema_test", "not_null_stg_iterable__campaign_list_history_campaign_id"], "unique_id": "test.iterable_source.not_null_stg_iterable__campaign_list_history_campaign_id", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "schema_test/not_null_stg_iterable__campaign_list_history_campaign_id.sql", "original_file_path": "models/stg_iterable.yml", "name": "not_null_stg_iterable__campaign_list_history_campaign_id", "alias": "not_null_stg_iterable__campaign_list_history_campaign_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_iterable__campaign_list_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/iterable_source/models/stg_iterable.yml/schema_test/not_null_stg_iterable__campaign_list_history_campaign_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_iterable", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__campaign_list_history`\nwhere campaign_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "campaign_id"}, "test.iterable_source.not_null_stg_iterable__campaign_suppression_list_history_campaign_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "campaign_id", "model": "{{ ref('stg_iterable__campaign_suppression_list_history') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.iterable_source.stg_iterable__campaign_suppression_list_history"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "stg_iterable", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_stg_iterable", "fqn": ["iterable_source", "schema_test", "not_null_stg_iterable__campaign_suppression_list_history_campaign_id"], "unique_id": "test.iterable_source.not_null_stg_iterable__campaign_suppression_list_history_campaign_id", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "schema_test/not_null_stg_iterable__campaign_suppression_list_history_campaign_id.sql", "original_file_path": "models/stg_iterable.yml", "name": "not_null_stg_iterable__campaign_suppression_list_history_campaign_id", "alias": "not_null_stg_iterable__campaign_suppression_list_history_campaign_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_iterable__campaign_suppression_list_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/iterable_source/models/stg_iterable.yml/schema_test/not_null_stg_iterable__campaign_suppression_list_history_campaign_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_iterable", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__campaign_suppression_list_history`\nwhere campaign_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "campaign_id"}, "test.iterable_source.unique_stg_iterable__channel_channel_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "channel_id", "model": "{{ ref('stg_iterable__channel') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.iterable_source.stg_iterable__channel"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "stg_iterable", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_stg_iterable", "fqn": ["iterable_source", "schema_test", "unique_stg_iterable__channel_channel_id"], "unique_id": "test.iterable_source.unique_stg_iterable__channel_channel_id", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "schema_test/unique_stg_iterable__channel_channel_id.sql", "original_file_path": "models/stg_iterable.yml", "name": "unique_stg_iterable__channel_channel_id", "alias": "unique_stg_iterable__channel_channel_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_iterable__channel"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/iterable_source/models/stg_iterable.yml/schema_test/unique_stg_iterable__channel_channel_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_iterable", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        channel_id\n\n    from `dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__channel`\n    where channel_id is not null\n    group by channel_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "channel_id"}, "test.iterable_source.not_null_stg_iterable__channel_channel_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "channel_id", "model": "{{ ref('stg_iterable__channel') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.iterable_source.stg_iterable__channel"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "stg_iterable", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_stg_iterable", "fqn": ["iterable_source", "schema_test", "not_null_stg_iterable__channel_channel_id"], "unique_id": "test.iterable_source.not_null_stg_iterable__channel_channel_id", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "schema_test/not_null_stg_iterable__channel_channel_id.sql", "original_file_path": "models/stg_iterable.yml", "name": "not_null_stg_iterable__channel_channel_id", "alias": "not_null_stg_iterable__channel_channel_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_iterable__channel"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/iterable_source/models/stg_iterable.yml/schema_test/not_null_stg_iterable__channel_channel_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_iterable", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__channel`\nwhere channel_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "channel_id"}, "test.iterable_source.unique_stg_iterable__event_event_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ ref('stg_iterable__event') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.iterable_source.stg_iterable__event"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "stg_iterable", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_stg_iterable", "fqn": ["iterable_source", "schema_test", "unique_stg_iterable__event_event_id"], "unique_id": "test.iterable_source.unique_stg_iterable__event_event_id", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "schema_test/unique_stg_iterable__event_event_id.sql", "original_file_path": "models/stg_iterable.yml", "name": "unique_stg_iterable__event_event_id", "alias": "unique_stg_iterable__event_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_iterable__event"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/iterable_source/models/stg_iterable.yml/schema_test/unique_stg_iterable__event_event_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_iterable", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        event_id\n\n    from `dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__event`\n    where event_id is not null\n    group by event_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_id"}, "test.iterable_source.not_null_stg_iterable__event_event_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ ref('stg_iterable__event') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.iterable_source.stg_iterable__event"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "stg_iterable", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_stg_iterable", "fqn": ["iterable_source", "schema_test", "not_null_stg_iterable__event_event_id"], "unique_id": "test.iterable_source.not_null_stg_iterable__event_event_id", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "schema_test/not_null_stg_iterable__event_event_id.sql", "original_file_path": "models/stg_iterable.yml", "name": "not_null_stg_iterable__event_event_id", "alias": "not_null_stg_iterable__event_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_iterable__event"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/iterable_source/models/stg_iterable.yml/schema_test/not_null_stg_iterable__event_event_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_iterable", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__event`\nwhere event_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_id"}, "test.iterable_source.unique_stg_iterable__event_extension_event_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ ref('stg_iterable__event_extension') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.iterable_source.stg_iterable__event_extension"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "stg_iterable", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_stg_iterable", "fqn": ["iterable_source", "schema_test", "unique_stg_iterable__event_extension_event_id"], "unique_id": "test.iterable_source.unique_stg_iterable__event_extension_event_id", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "schema_test/unique_stg_iterable__event_extension_event_id.sql", "original_file_path": "models/stg_iterable.yml", "name": "unique_stg_iterable__event_extension_event_id", "alias": "unique_stg_iterable__event_extension_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_iterable__event_extension"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/iterable_source/models/stg_iterable.yml/schema_test/unique_stg_iterable__event_extension_event_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_iterable", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        event_id\n\n    from `dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__event_extension`\n    where event_id is not null\n    group by event_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_id"}, "test.iterable_source.not_null_stg_iterable__event_extension_event_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ ref('stg_iterable__event_extension') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.iterable_source.stg_iterable__event_extension"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "stg_iterable", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_stg_iterable", "fqn": ["iterable_source", "schema_test", "not_null_stg_iterable__event_extension_event_id"], "unique_id": "test.iterable_source.not_null_stg_iterable__event_extension_event_id", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "schema_test/not_null_stg_iterable__event_extension_event_id.sql", "original_file_path": "models/stg_iterable.yml", "name": "not_null_stg_iterable__event_extension_event_id", "alias": "not_null_stg_iterable__event_extension_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_iterable__event_extension"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/iterable_source/models/stg_iterable.yml/schema_test/not_null_stg_iterable__event_extension_event_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_iterable", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__event_extension`\nwhere event_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_id"}, "test.iterable_source.unique_stg_iterable__list_list_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "list_id", "model": "{{ ref('stg_iterable__list') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.iterable_source.stg_iterable__list"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "stg_iterable", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_stg_iterable", "fqn": ["iterable_source", "schema_test", "unique_stg_iterable__list_list_id"], "unique_id": "test.iterable_source.unique_stg_iterable__list_list_id", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "schema_test/unique_stg_iterable__list_list_id.sql", "original_file_path": "models/stg_iterable.yml", "name": "unique_stg_iterable__list_list_id", "alias": "unique_stg_iterable__list_list_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_iterable__list"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/iterable_source/models/stg_iterable.yml/schema_test/unique_stg_iterable__list_list_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_iterable", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        list_id\n\n    from `dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__list`\n    where list_id is not null\n    group by list_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "list_id"}, "test.iterable_source.not_null_stg_iterable__list_list_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "list_id", "model": "{{ ref('stg_iterable__list') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.iterable_source.stg_iterable__list"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "stg_iterable", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_stg_iterable", "fqn": ["iterable_source", "schema_test", "not_null_stg_iterable__list_list_id"], "unique_id": "test.iterable_source.not_null_stg_iterable__list_list_id", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "schema_test/not_null_stg_iterable__list_list_id.sql", "original_file_path": "models/stg_iterable.yml", "name": "not_null_stg_iterable__list_list_id", "alias": "not_null_stg_iterable__list_list_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_iterable__list"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/iterable_source/models/stg_iterable.yml/schema_test/not_null_stg_iterable__list_list_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_iterable", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__list`\nwhere list_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "list_id"}, "test.iterable_source.unique_stg_iterable__message_type_message_type_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "message_type_id", "model": "{{ ref('stg_iterable__message_type') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.iterable_source.stg_iterable__message_type"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "stg_iterable", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_stg_iterable", "fqn": ["iterable_source", "schema_test", "unique_stg_iterable__message_type_message_type_id"], "unique_id": "test.iterable_source.unique_stg_iterable__message_type_message_type_id", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "schema_test/unique_stg_iterable__message_type_message_type_id.sql", "original_file_path": "models/stg_iterable.yml", "name": "unique_stg_iterable__message_type_message_type_id", "alias": "unique_stg_iterable__message_type_message_type_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_iterable__message_type"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/iterable_source/models/stg_iterable.yml/schema_test/unique_stg_iterable__message_type_message_type_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_iterable", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        message_type_id\n\n    from `dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__message_type`\n    where message_type_id is not null\n    group by message_type_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "message_type_id"}, "test.iterable_source.not_null_stg_iterable__message_type_message_type_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "message_type_id", "model": "{{ ref('stg_iterable__message_type') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.iterable_source.stg_iterable__message_type"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "stg_iterable", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_stg_iterable", "fqn": ["iterable_source", "schema_test", "not_null_stg_iterable__message_type_message_type_id"], "unique_id": "test.iterable_source.not_null_stg_iterable__message_type_message_type_id", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "schema_test/not_null_stg_iterable__message_type_message_type_id.sql", "original_file_path": "models/stg_iterable.yml", "name": "not_null_stg_iterable__message_type_message_type_id", "alias": "not_null_stg_iterable__message_type_message_type_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_iterable__message_type"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/iterable_source/models/stg_iterable.yml/schema_test/not_null_stg_iterable__message_type_message_type_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_iterable", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__message_type`\nwhere message_type_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "message_type_id"}, "test.iterable_source.not_null_stg_iterable__template_history_template_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "template_id", "model": "{{ ref('stg_iterable__template_history') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.iterable_source.stg_iterable__template_history"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "stg_iterable", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_stg_iterable", "fqn": ["iterable_source", "schema_test", "not_null_stg_iterable__template_history_template_id"], "unique_id": "test.iterable_source.not_null_stg_iterable__template_history_template_id", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "schema_test/not_null_stg_iterable__template_history_template_id.sql", "original_file_path": "models/stg_iterable.yml", "name": "not_null_stg_iterable__template_history_template_id", "alias": "not_null_stg_iterable__template_history_template_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_iterable__template_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/iterable_source/models/stg_iterable.yml/schema_test/not_null_stg_iterable__template_history_template_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_iterable", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__template_history`\nwhere template_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "template_id"}, "test.iterable_source.dbt_utils_unique_combination_of_columns_stg_iterable__template_history_template_id__updated_at": {"raw_sql": "{{ config(severity='ERROR') }}{{ dbt_utils.test_unique_combination_of_columns(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["template_id", "updated_at"], "model": "{{ ref('stg_iterable__template_history') }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns"], "nodes": ["model.iterable_source.stg_iterable__template_history"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "stg_iterable", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_stg_iterable", "fqn": ["iterable_source", "schema_test", "dbt_utils_unique_combination_of_columns_stg_iterable__template_history_template_id__updated_at"], "unique_id": "test.iterable_source.dbt_utils_unique_combination_of_columns_stg_iterable__template_history_template_id__updated_at", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "schema_test/dbt_utils_unique_combination_of_columns_stg_iterable__template_history_template_id__updated_at.sql", "original_file_path": "models/stg_iterable.yml", "name": "dbt_utils_unique_combination_of_columns_stg_iterable__template_history_template_id__updated_at", "alias": "dbt_utils_unique_combination_of_columns_stg_iterable__template_history_template_id__updated_at", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_iterable__template_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/iterable_source/models/stg_iterable.yml/schema_test/dbt_utils_unique_combination_of_columns_stg_iterable__template_history_template_id__updated_at.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_iterable", "severity": "ERROR"}, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        template_id, updated_at\n    from `dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__template_history`\n\n    group by template_id, updated_at\n    having count(*) > 1\n\n)\n\nselect count(*)\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null}, "test.iterable_source.not_null_stg_iterable__user_history_email": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "email", "model": "{{ ref('stg_iterable__user_history') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.iterable_source.stg_iterable__user_history"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "stg_iterable", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_stg_iterable", "fqn": ["iterable_source", "schema_test", "not_null_stg_iterable__user_history_email"], "unique_id": "test.iterable_source.not_null_stg_iterable__user_history_email", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "schema_test/not_null_stg_iterable__user_history_email.sql", "original_file_path": "models/stg_iterable.yml", "name": "not_null_stg_iterable__user_history_email", "alias": "not_null_stg_iterable__user_history_email", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_iterable__user_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/iterable_source/models/stg_iterable.yml/schema_test/not_null_stg_iterable__user_history_email.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_iterable", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__user_history`\nwhere email is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "email"}, "test.iterable_source.dbt_utils_unique_combination_of_columns_stg_iterable__user_history_email__updated_at": {"raw_sql": "{{ config(severity='ERROR') }}{{ dbt_utils.test_unique_combination_of_columns(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["email", "updated_at"], "model": "{{ ref('stg_iterable__user_history') }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns"], "nodes": ["model.iterable_source.stg_iterable__user_history"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "stg_iterable", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_stg_iterable", "fqn": ["iterable_source", "schema_test", "dbt_utils_unique_combination_of_columns_stg_iterable__user_history_email__updated_at"], "unique_id": "test.iterable_source.dbt_utils_unique_combination_of_columns_stg_iterable__user_history_email__updated_at", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "schema_test/dbt_utils_unique_combination_of_columns_stg_iterable__user_history_email__updated_at.sql", "original_file_path": "models/stg_iterable.yml", "name": "dbt_utils_unique_combination_of_columns_stg_iterable__user_history_email__updated_at", "alias": "dbt_utils_unique_combination_of_columns_stg_iterable__user_history_email__updated_at", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_iterable__user_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/iterable_source/models/stg_iterable.yml/schema_test/dbt_utils_unique_combination_of_columns_stg_iterable__user_history_email__updated_at.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_iterable", "severity": "ERROR"}, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        email, updated_at\n    from `dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__user_history`\n\n    group by email, updated_at\n    having count(*) > 1\n\n)\n\nselect count(*)\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null}, "test.iterable_source.not_null_stg_iterable__user_unsubscribed_channel_history_channel_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "channel_id", "model": "{{ ref('stg_iterable__user_unsubscribed_channel_history') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.iterable_source.stg_iterable__user_unsubscribed_channel_history"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "stg_iterable", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_stg_iterable", "fqn": ["iterable_source", "schema_test", "not_null_stg_iterable__user_unsubscribed_channel_history_channel_id"], "unique_id": "test.iterable_source.not_null_stg_iterable__user_unsubscribed_channel_history_channel_id", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "schema_test/not_null_stg_iterable__user_unsubscribed_channel_history_channel_id.sql", "original_file_path": "models/stg_iterable.yml", "name": "not_null_stg_iterable__user_unsubscribed_channel_history_channel_id", "alias": "not_null_stg_iterable__user_unsubscribed_channel_history_channel_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_iterable__user_unsubscribed_channel_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/iterable_source/models/stg_iterable.yml/schema_test/not_null_stg_iterable__user_unsubscribed_channel_history_channel_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_iterable", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__user_unsubscribed_channel_history`\nwhere channel_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "channel_id"}, "test.iterable_source.not_null_stg_iterable__user_unsub_message_type_history_message_type_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "message_type_id", "model": "{{ ref('stg_iterable__user_unsub_message_type_history') }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.iterable_source.stg_iterable__user_unsub_message_type_history"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "stg_iterable", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_stg_iterable", "fqn": ["iterable_source", "schema_test", "not_null_stg_iterable__user_unsub_message_type_history_message_type_id"], "unique_id": "test.iterable_source.not_null_stg_iterable__user_unsub_message_type_history_message_type_id", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "schema_test/not_null_stg_iterable__user_unsub_message_type_history_message_type_id.sql", "original_file_path": "models/stg_iterable.yml", "name": "not_null_stg_iterable__user_unsub_message_type_history_message_type_id", "alias": "not_null_stg_iterable__user_unsub_message_type_history_message_type_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_iterable__user_unsub_message_type_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/iterable_source/models/stg_iterable.yml/schema_test/not_null_stg_iterable__user_unsub_message_type_history_message_type_id.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_iterable", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`iterable_integration_tests_stg_iterable`.`stg_iterable__user_unsub_message_type_history`\nwhere message_type_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "message_type_id"}, "test.iterable_source.dbt_utils_unique_combination_of_columns_stg_iterable__user_device_history_email__updated_at__index": {"raw_sql": "{{ config(severity='ERROR') }}{{ dbt_utils.test_unique_combination_of_columns(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["email", "updated_at", "index"], "model": "{{ ref('stg_iterable__user_device_history') }}"}, "namespace": "dbt_utils"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns"], "nodes": []}, "config": {"enabled": false, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "stg_iterable", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_stg_iterable", "fqn": ["iterable_source", "schema_test", "dbt_utils_unique_combination_of_columns_stg_iterable__user_device_history_email__updated_at__index"], "unique_id": "test.iterable_source.dbt_utils_unique_combination_of_columns_stg_iterable__user_device_history_email__updated_at__index", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "schema_test/dbt_utils_unique_combination_of_columns_stg_iterable__user_device_history_email__updated_at__index.sql", "original_file_path": "models/stg_iterable.yml", "name": "dbt_utils_unique_combination_of_columns_stg_iterable__user_device_history_email__updated_at__index", "alias": "dbt_utils_unique_combination_of_columns_stg_iterable__user_device_history_email__updated_at__index", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_iterable__user_device_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_iterable", "severity": "ERROR"}, "column_name": null}}, "sources": {"source.iterable_source.iterable.campaign_history": {"fqn": ["iterable_source", "iterable", "campaign_history"], "database": "dbt-package-testing", "schema": "iterable", "unique_id": "source.iterable_source.iterable.campaign_history", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "models/src_iterable.yml", "original_file_path": "models/src_iterable.yml", "name": "campaign_history", "source_name": "iterable", "source_description": "", "loader": "fivetran", "identifier": "campaign_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing a history of campaigns.", "columns": {"id": {"name": "id", "description": "Unique identifier of the campaign record", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Last update's timestamp as epoch time in milliseconds", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "User defined name of the campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_state": {"name": "campaign_state", "description": "State of the campaign. Can be Draft, Ready, Scheduled, Running, Finished, Starting, Aborted or Recurring", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "The campaign type. Can be Blast or Triggered", "meta": {}, "data_type": null, "quote": null, "tags": []}, "send_size": {"name": "send_size", "description": "Size of the campaign. Number of individuals included in the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_at": {"name": "start_at", "description": "Start timestamp as epoch time in milliseconds", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ended_at": {"name": "ended_at", "description": "Ended timestamp as epoch time in milliseconds", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Creation timestamp as epoch time in milliseconds", "meta": {}, "data_type": null, "quote": null, "tags": []}, "recurring_campaign_id": {"name": "recurring_campaign_id", "description": "Reference to the recurring campaign, if applicable", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_by_user_id": {"name": "created_by_user_id", "description": "Reference to the user who created the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "template_id": {"name": "template_id", "description": "Reference to the campaign template", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`iterable`.`campaign_history`"}, "source.iterable_source.iterable.campaign_label_history": {"fqn": ["iterable_source", "iterable", "campaign_label_history"], "database": "dbt-package-testing", "schema": "iterable", "unique_id": "source.iterable_source.iterable.campaign_label_history", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "models/src_iterable.yml", "original_file_path": "models/src_iterable.yml", "name": "campaign_label_history", "source_name": "iterable", "source_description": "", "loader": "fivetran", "identifier": "campaign_label_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing a history of labels.", "columns": {"campaign_id": {"name": "campaign_id", "description": "Reference to the campaign associated with the label", "meta": {}, "data_type": null, "quote": null, "tags": []}, "label": {"name": "label", "description": "Name of the label", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Last update timestamp as epoch time in milliseconds", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"is_enabled": true}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`iterable`.`campaign_label_history`"}, "source.iterable_source.iterable.campaign_list_history": {"fqn": ["iterable_source", "iterable", "campaign_list_history"], "database": "dbt-package-testing", "schema": "iterable", "unique_id": "source.iterable_source.iterable.campaign_list_history", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "models/src_iterable.yml", "original_file_path": "models/src_iterable.yml", "name": "campaign_list_history", "source_name": "iterable", "source_description": "", "loader": "fivetran", "identifier": "campaign_list_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing a history of lists.", "columns": {"campaign_id": {"name": "campaign_id", "description": "Reference to the campaign associated with the label", "meta": {}, "data_type": null, "quote": null, "tags": []}, "list_id": {"name": "list_id", "description": "Reference to the list used", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Last update timestamp as epoch time in milliseconds", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`iterable`.`campaign_list_history`"}, "source.iterable_source.iterable.campaign_supression_list_history": {"fqn": ["iterable_source", "iterable", "campaign_supression_list_history"], "database": "dbt-package-testing", "schema": "iterable", "unique_id": "source.iterable_source.iterable.campaign_supression_list_history", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "models/src_iterable.yml", "original_file_path": "models/src_iterable.yml", "name": "campaign_supression_list_history", "source_name": "iterable", "source_description": "", "loader": "fivetran", "identifier": "campaign_supression_list_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing a history of suppression lists. This was originally misspelled and will be deprecated in favor of the correct spelling.\n", "columns": {"campaign_id": {"name": "campaign_id", "description": "Reference to the campaign associated with the label", "meta": {}, "data_type": null, "quote": null, "tags": []}, "suppressed_list_id": {"name": "suppressed_list_id", "description": "Reference to the list used", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Last update timestamp as epoch time in milliseconds", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"is_enabled": false}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`iterable`.`campaign_supression_list_history`"}, "source.iterable_source.iterable.campaign_suppression_list_history": {"fqn": ["iterable_source", "iterable", "campaign_suppression_list_history"], "database": "dbt-package-testing", "schema": "iterable", "unique_id": "source.iterable_source.iterable.campaign_suppression_list_history", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "models/src_iterable.yml", "original_file_path": "models/src_iterable.yml", "name": "campaign_suppression_list_history", "source_name": "iterable", "source_description": "", "loader": "fivetran", "identifier": "campaign_suppression_list_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing a history of suppression lists.\n", "columns": {"campaign_id": {"name": "campaign_id", "description": "Reference to the campaign associated with the label", "meta": {}, "data_type": null, "quote": null, "tags": []}, "suppressed_list_id": {"name": "suppressed_list_id", "description": "Reference to the list used", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Last update timestamp as epoch time in milliseconds", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"is_enabled": true}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`iterable`.`campaign_suppression_list_history`"}, "source.iterable_source.iterable.channel": {"fqn": ["iterable_source", "iterable", "channel"], "database": "dbt-package-testing", "schema": "iterable", "unique_id": "source.iterable_source.iterable.channel", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "models/src_iterable.yml", "original_file_path": "models/src_iterable.yml", "name": "channel", "source_name": "iterable", "source_description": "", "loader": "fivetran", "identifier": "channel", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing unique channels.", "columns": {"id": {"name": "id", "description": "Unique identifier of the channel", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "User defined name of the channel", "meta": {}, "data_type": null, "quote": null, "tags": []}, "channel_type": {"name": "channel_type", "description": "The channel type", "meta": {}, "data_type": null, "quote": null, "tags": []}, "message_medium": {"name": "message_medium", "description": "The message medium associated with the channel", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`iterable`.`channel`"}, "source.iterable_source.iterable.event": {"fqn": ["iterable_source", "iterable", "event"], "database": "dbt-package-testing", "schema": "iterable", "unique_id": "source.iterable_source.iterable.event", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "models/src_iterable.yml", "original_file_path": "models/src_iterable.yml", "name": "event", "source_name": "iterable", "source_description": "", "loader": "fivetran", "identifier": "event", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing individual events within campaigns.", "columns": {"_fivetran_id": {"name": "_fivetran_id", "description": "Unique id of the event generated by Fivetran", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Reference to the campaign from which the event originated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "content_id": {"name": "content_id", "description": "Reference to the content the event is associated with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Creation timestamp as epoch time in milliseconds", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "Reference to the unique user the event was applied to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "additional_properties": {"name": "additional_properties", "description": "json object containing addition event properties", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_name": {"name": "event_name", "description": "Name provided to the individual event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "message_bus_id": {"name": "message_bus_id", "description": "Reference to the message bus associated with the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "message_id": {"name": "message_id", "description": "Reference to the message the event is associated with", "meta": {}, "data_type": null, "quote": null, "tags": []}, "message_type_id": {"name": "message_type_id", "description": "Reference to the type of message the event is associated with", "meta": {}, "data_type": null, "quote": null, "tags": []}, "recipient_state": {"name": "recipient_state", "description": "The state of the recipient upon receiving the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Status of the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transactional_data": {"name": "transactional_data", "description": "Transactional data associated with the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unsub_source": {"name": "unsub_source", "description": "Source of the unsubscribe event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_agent": {"name": "user_agent", "description": "User agent associated with the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_agent_device": {"name": "user_agent_device", "description": "The device of the user agent", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`iterable`.`event`"}, "source.iterable_source.iterable.event_extension": {"fqn": ["iterable_source", "iterable", "event_extension"], "database": "dbt-package-testing", "schema": "iterable", "unique_id": "source.iterable_source.iterable.event_extension", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "models/src_iterable.yml", "original_file_path": "models/src_iterable.yml", "name": "event_extension", "source_name": "iterable", "source_description": "", "loader": "fivetran", "identifier": "event_extension", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing additional properties from the event table.", "columns": {"_fivetran_id": {"name": "_fivetran_id", "description": "Unique identifier of the event. Generated by Fivetran", "meta": {}, "data_type": null, "quote": null, "tags": []}, "app_already_running": {"name": "app_already_running", "description": "Boolean indicating if the app is currently running or not", "meta": {}, "data_type": null, "quote": null, "tags": []}, "badge": {"name": "badge", "description": "Badge associated with the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "canonical_url_id": {"name": "canonical_url_id", "description": "Reference to the url associated with the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "content_available": {"name": "content_available", "description": "Content available from the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "content_id": {"name": "content_id", "description": "Reference to the content associated with the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deeplink_android": {"name": "deeplink_android", "description": "Deeplink associated with the event from an android device", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deeplink_ios": {"name": "deeplink_ios", "description": "Deeplink associated with the event from an ios device", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device": {"name": "device", "description": "The device associated with the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_id": {"name": "email_id", "description": "Reference to the email associated with the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_subject": {"name": "email_subject", "description": "Subject of the email associated with the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "experiment_id": {"name": "experiment_id", "description": "Reference to the experiment used if the event is an experiment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_phone_number_id": {"name": "from_phone_number_id", "description": "Reference to the phone number which the event is from", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_smssender_id": {"name": "from_smssender_id", "description": "Reference to the sms sender which the event is from", "meta": {}, "data_type": null, "quote": null, "tags": []}, "image_url": {"name": "image_url", "description": "Image url of the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_ghost_push": {"name": "is_ghost_push", "description": "Boolean indicating if the event is a result of a ghost push", "meta": {}, "data_type": null, "quote": null, "tags": []}, "link_id": {"name": "link_id", "description": "Reference to the link associated with the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "link_url": {"name": "link_url", "description": "Url of the link associated with the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "locale": {"name": "locale", "description": "Locale associated with the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payload": {"name": "payload", "description": "Payload resulted from the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "platform_endpoint": {"name": "platform_endpoint", "description": "The specific platform endpoint of the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "push_message": {"name": "push_message", "description": "Boolean indicating if the event is a push message", "meta": {}, "data_type": null, "quote": null, "tags": []}, "region": {"name": "region", "description": "Region of the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sms_message": {"name": "sms_message", "description": "Boolean indicating if the event is an sms message", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sms_provider_response_code": {"name": "sms_provider_response_code", "description": "sms provider response code from the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sms_provider_response_message": {"name": "sms_provider_response_message", "description": "sms provider response message from the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sms_provider_response_more_info": {"name": "sms_provider_response_more_info", "description": "sms provider response addition info from the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sms_provider_response_status": {"name": "sms_provider_response_status", "description": "Status of the sms provider response from the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sound": {"name": "sound", "description": "Boolean indicating if a sound was used with the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "to_phone_number": {"name": "to_phone_number", "description": "To phone number associated with the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url": {"name": "url", "description": "Url associated with the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "workflow_id": {"name": "workflow_id", "description": "Reference to the workflow which the event originated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "workflow_name": {"name": "workflow_name", "description": "Name of the workflow which the event originated", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`iterable`.`event_extension`"}, "source.iterable_source.iterable.list": {"fqn": ["iterable_source", "iterable", "list"], "database": "dbt-package-testing", "schema": "iterable", "unique_id": "source.iterable_source.iterable.list", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "models/src_iterable.yml", "original_file_path": "models/src_iterable.yml", "name": "list", "source_name": "iterable", "source_description": "", "loader": "fivetran", "identifier": "list", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing users and the lists the users are associated with.", "columns": {"id": {"name": "id", "description": "Unique identifier of the list", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "User defined name of the list", "meta": {}, "data_type": null, "quote": null, "tags": []}, "list_type": {"name": "list_type", "description": "The list type", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Creation timestamp as epoch time in milliseconds", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`iterable`.`list`"}, "source.iterable_source.iterable.message_type": {"fqn": ["iterable_source", "iterable", "message_type"], "database": "dbt-package-testing", "schema": "iterable", "unique_id": "source.iterable_source.iterable.message_type", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "models/src_iterable.yml", "original_file_path": "models/src_iterable.yml", "name": "message_type", "source_name": "iterable", "source_description": "", "loader": "fivetran", "identifier": "message_type", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing unique message types.", "columns": {"id": {"name": "id", "description": "Unique identifer of the message type", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "User defined name of the message type", "meta": {}, "data_type": null, "quote": null, "tags": []}, "channel_id": {"name": "channel_id", "description": "Channel that this message type belongs to", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`iterable`.`message_type`"}, "source.iterable_source.iterable.template_history": {"fqn": ["iterable_source", "iterable", "template_history"], "database": "dbt-package-testing", "schema": "iterable", "unique_id": "source.iterable_source.iterable.template_history", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "models/src_iterable.yml", "original_file_path": "models/src_iterable.yml", "name": "template_history", "source_name": "iterable", "source_description": "", "loader": "fivetran", "identifier": "template_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing unique templates used across campaigns.", "columns": {"id": {"name": "id", "description": "Unique identifer of the template", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "User defined name of the template", "meta": {}, "data_type": null, "quote": null, "tags": []}, "template_type": {"name": "template_type", "description": "The type of the template", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Creation timestamp as epoch time in milliseconds", "meta": {}, "data_type": null, "quote": null, "tags": []}, "client_template_id": {"name": "client_template_id", "description": "Reference to the client template", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creator_user_id": {"name": "creator_user_id", "description": "Reference to the user who created the template", "meta": {}, "data_type": null, "quote": null, "tags": []}, "message_type_id": {"name": "message_type_id", "description": "Reference to the message type associated with the template", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Last update timestamp as epoch time in milliseconds", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`iterable`.`template_history`"}, "source.iterable_source.iterable.user_history": {"fqn": ["iterable_source", "iterable", "user_history"], "database": "dbt-package-testing", "schema": "iterable", "unique_id": "source.iterable_source.iterable.user_history", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "models/src_iterable.yml", "original_file_path": "models/src_iterable.yml", "name": "user_history", "source_name": "iterable", "source_description": "", "loader": "fivetran", "identifier": "user_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing individual user history information.", "columns": {"email": {"name": "email", "description": "Unique identifier of the user as well as their email", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "User defined identifier of the user. This is not a unique field", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "First name of the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "Last name of the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_list_ids": {"name": "email_list_ids", "description": "Array of references to the lists associated with the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "signup_date": {"name": "signup_date", "description": "Timestamp as epoch time in milliseconds of when the user signed up", "meta": {}, "data_type": null, "quote": null, "tags": []}, "signup_source": {"name": "signup_source", "description": "Source where the user signed up", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Last update timestamp as epoch time in milliseconds", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`iterable`.`user_history`"}, "source.iterable_source.iterable.user_device_history": {"fqn": ["iterable_source", "iterable", "user_device_history"], "database": "dbt-package-testing", "schema": "iterable", "unique_id": "source.iterable_source.iterable.user_device_history", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "models/src_iterable.yml", "original_file_path": "models/src_iterable.yml", "name": "user_device_history", "source_name": "iterable", "source_description": "", "loader": "fivetran", "identifier": "user_device_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Table capturing the history of devices associated with in-app and push notifications to a user.", "columns": {"application_name": {"name": "application_name", "description": "The Iterable push integration to associate with the device token. Usually matches the package name (or bundle ID)  of the relevant mobile app. \n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "User email associated with the device.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "endpoint_enabled": {"name": "endpoint_enabled", "description": "Boolean that is true if the user has not disabled Push notifications and their endpoint remains enabled.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "identifier_for_vendor": {"name": "identifier_for_vendor", "description": "An alphanumeric string that uniquely identifies a device to the app's vendor.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index": {"name": "index", "description": "Index representing the order in which devices were added to a user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "platform": {"name": "platform", "description": "The device platform. Can be APNS, APNS_SANDBOX or GCM", "meta": {}, "data_type": null, "quote": null, "tags": []}, "platform_endpoint": {"name": "platform_endpoint", "description": "The platform's endpoint.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "token": {"name": "token", "description": "Device token registered for push notifications.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when this device was updated last.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"is_enabled": false}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`iterable`.`user_device_history`"}, "source.iterable_source.iterable.user_unsubscribed_channel_history": {"fqn": ["iterable_source", "iterable", "user_unsubscribed_channel_history"], "database": "dbt-package-testing", "schema": "iterable", "unique_id": "source.iterable_source.iterable.user_unsubscribed_channel_history", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "models/src_iterable.yml", "original_file_path": "models/src_iterable.yml", "name": "user_unsubscribed_channel_history", "source_name": "iterable", "source_description": "", "loader": "fivetran", "identifier": "user_unsubscribed_channel_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing the history of channels from which a user has unsubscribed.", "columns": {"channel_id": {"name": "channel_id", "description": "Reference to the channel from which the user unsubscribed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "Unique identifier of the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Last update timestamp as epoch time in milliseconds", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`iterable`.`user_unsubscribed_channel_history`"}, "source.iterable_source.iterable.user_unsubscribed_message_type_history": {"fqn": ["iterable_source", "iterable", "user_unsubscribed_message_type_history"], "database": "dbt-package-testing", "schema": "iterable", "unique_id": "source.iterable_source.iterable.user_unsubscribed_message_type_history", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "models/src_iterable.yml", "original_file_path": "models/src_iterable.yml", "name": "user_unsubscribed_message_type_history", "source_name": "iterable", "source_description": "", "loader": "fivetran", "identifier": "user_unsubscribed_message_type_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing the history of message types from which a user has unsubscribed.", "columns": {"message_type_id": {"name": "message_type_id", "description": "Reference to the message type from which the user unsubscribed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "Unique identifier of the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Last update timestamp as epoch time in milliseconds", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"is_enabled": true}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`iterable`.`user_unsubscribed_message_type_history`"}}, "macros": {"macro.dbt_bigquery.date_sharded_table": {"unique_id": "macro.dbt_bigquery.date_sharded_table", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "date_sharded_table", "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.grant_access_to": {"unique_id": "macro.dbt_bigquery.grant_access_to", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "grant_access_to", "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.get_partitions_metadata": {"unique_id": "macro.dbt_bigquery.get_partitions_metadata", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "get_partitions_metadata", "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__get_catalog": {"unique_id": "macro.dbt_bigquery.bigquery__get_catalog", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "bigquery__get_catalog", "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n  {%- if (schemas | length) == 0 -%}\n    {# Hopefully nothing cares about the columns we return when there are no rows #}\n    {%- set query  = \"select 1 as id limit 0\" -%}\n  {%- else -%}\n\n  {%- set query -%}\n    with tables as (\n        select\n            project_id as table_database,\n            dataset_id as table_schema,\n            table_id as original_table_name,\n\n            concat(project_id, '.', dataset_id, '.', table_id) as relation_id,\n\n            row_count,\n            size_bytes as size_bytes,\n            case\n                when type = 1 then 'table'\n                when type = 2 then 'view'\n                else 'external'\n            end as table_type,\n\n            REGEXP_CONTAINS(table_id, '^.+[0-9]{8}$') and coalesce(type, 0) = 1 as is_date_shard,\n            REGEXP_EXTRACT(table_id, '^(.+)[0-9]{8}$') as shard_base_name,\n            REGEXP_EXTRACT(table_id, '^.+([0-9]{8})$') as shard_name\n\n        from {{ information_schema.replace(information_schema_view='__TABLES__') }}\n        where (\n          {%- for schema in schemas -%}\n            upper(dataset_id) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n    ),\n\n    extracted as (\n\n        select *,\n            case\n                when is_date_shard then shard_base_name\n                else original_table_name\n            end as table_name\n\n        from tables\n\n    ),\n\n    unsharded_tables as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            coalesce(table_type, 'external') as table_type,\n            is_date_shard,\n\n            struct(\n                min(shard_name) as shard_min,\n                max(shard_name) as shard_max,\n                count(*) as shard_count\n            ) as table_shards,\n\n            sum(size_bytes) as size_bytes,\n            sum(row_count) as row_count,\n\n            max(relation_id) as relation_id\n\n        from extracted\n        group by 1,2,3,4,5\n\n    ),\n\n    info_schema_columns as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            table_catalog as table_database,\n            table_schema,\n            table_name,\n\n            -- use the \"real\" column name from the paths query below\n            column_name as base_column_name,\n            ordinal_position as column_index,\n\n            is_partitioning_column,\n            clustering_ordinal_position\n\n        from {{ information_schema.replace(information_schema_view='COLUMNS') }}\n        where ordinal_position is not null\n\n    ),\n\n    info_schema_column_paths as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            field_path as column_name,\n            data_type as column_type,\n            column_name as base_column_name,\n            description as column_comment\n\n        from {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }}\n\n    ),\n\n    columns as (\n\n        select * except (base_column_name)\n        from info_schema_columns\n        join info_schema_column_paths using (relation_id, base_column_name)\n\n    ),\n\n    column_stats as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            max(relation_id) as relation_id,\n            max(case when is_partitioning_column = 'YES' then 1 else 0 end) = 1 as is_partitioned,\n            max(case when is_partitioning_column = 'YES' then column_name else null end) as partition_column,\n            max(case when clustering_ordinal_position is not null then 1 else 0 end) = 1 as is_clustered,\n            array_to_string(\n                array_agg(\n                    case\n                        when clustering_ordinal_position is not null then column_name\n                        else null\n                    end ignore nulls\n                    order by clustering_ordinal_position\n                ), ', '\n            ) as clustering_columns\n\n        from columns\n        group by 1,2,3\n\n    )\n\n    select\n        unsharded_tables.table_database,\n        unsharded_tables.table_schema,\n        case\n            when is_date_shard then concat(unsharded_tables.table_name, '*')\n            else unsharded_tables.table_name\n        end as table_name,\n        unsharded_tables.table_type,\n\n        -- coalesce name and type for External tables - these columns are not\n        -- present in the COLUMN_FIELD_PATHS resultset\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields -- BQ does\n        -- not treat these nested properties as independent fields\n        row_number() over (\n            partition by relation_id\n            order by columns.column_index, columns.column_name\n        ) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        columns.column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_shards.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_shards.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_shards.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        is_clustered as `stats__clustering_fields__include`\n\n    -- join using relation_id (an actual relation, not a shard prefix) to make\n    -- sure that column metadata is picked up through the join. This will only\n    -- return the column information for the \"max\" table in a date-sharded table set\n    from unsharded_tables\n    left join columns using (relation_id)\n    left join column_stats using (relation_id)\n  {%- endset -%}\n\n  {%- endif -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.partition_by": {"unique_id": "macro.dbt_bigquery.partition_by", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "partition_by", "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.cluster_by": {"unique_id": "macro.dbt_bigquery.cluster_by", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "cluster_by", "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery_table_options": {"unique_id": "macro.dbt_bigquery.bigquery_table_options", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery_table_options", "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__create_table_as": {"unique_id": "macro.dbt_bigquery.bigquery__create_table_as", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_table_as", "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, sql) -%}\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace table {{ relation }}\n  {{ partition_by(partition_config) }}\n  {{ cluster_by(raw_cluster_by) }}\n  {{ bigquery_table_options(config, model, temporary) }}\n  as (\n    {{ sql }}\n  );\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__create_view_as": {"unique_id": "macro.dbt_bigquery.bigquery__create_view_as", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_view_as", "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_table_options(config, model, temporary=false) }}\n  as {{ sql }};\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__create_schema": {"unique_id": "macro.dbt_bigquery.bigquery__create_schema", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_schema", "macro_sql": "{% macro bigquery__create_schema(relation) -%}\n  {{ adapter.create_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__drop_schema": {"unique_id": "macro.dbt_bigquery.bigquery__drop_schema", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__drop_schema", "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__drop_relation": {"unique_id": "macro.dbt_bigquery.bigquery__drop_relation", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__drop_relation", "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n  {% call statement('drop_relation') -%}\n    drop {{ relation.type }} if exists {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__get_columns_in_relation": {"unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__get_columns_in_relation", "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__list_relations_without_caching": {"unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__list_relations_without_caching", "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__current_timestamp": {"unique_id": "macro.dbt_bigquery.bigquery__current_timestamp", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  CURRENT_TIMESTAMP()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {"unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__snapshot_string_as_time", "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__list_schemas": {"unique_id": "macro.dbt_bigquery.bigquery__list_schemas", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__list_schemas", "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__check_schema_exists": {"unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__check_schema_exists", "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__persist_docs": {"unique_id": "macro.dbt_bigquery.bigquery__persist_docs", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__persist_docs", "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__alter_column_comment": {"unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_column_comment", "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__rename_relation": {"unique_id": "macro.dbt_bigquery.bigquery__rename_relation", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__rename_relation", "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__alter_column_type": {"unique_id": "macro.dbt_bigquery.bigquery__alter_column_type", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_column_type", "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__create_csv_table": {"unique_id": "macro.dbt_bigquery.bigquery__create_csv_table", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__create_csv_table", "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__reset_csv_table": {"unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__reset_csv_table", "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__load_csv_rows": {"unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__load_csv_rows", "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override) }}\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__handle_existing_table": {"unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "bigquery__handle_existing_table", "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.materialization_view_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_view_bigquery", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_bigquery", "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    {% set to_return = create_or_replace_view(run_outside_transaction_hooks=False) %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.make_date_partitioned_table": {"unique_id": "macro.dbt_bigquery.make_date_partitioned_table", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "make_date_partitioned_table", "macro_sql": "{% macro make_date_partitioned_table(model, relation, dates, should_create, verbose=False) %}\n\n  {% if should_create %}\n      {{ adapter.make_date_partitioned_table(relation) }}\n  {% endif %}\n\n  {% for date in dates %}\n    {% set date = (date | string) %}\n    {% if verbose %}\n        {% set table_start_time = modules.datetime.datetime.now().strftime(\"%H:%M:%S\") %}\n        {{ log(table_start_time ~ ' | -> Running for day ' ~ date, info=True) }}\n    {% endif %}\n\n    {% set fixed_sql = model['compiled_sql'] | replace('[DBT__PARTITION_DATE]', date) %}\n    {% set _ = adapter.execute_model(model, 'table', fixed_sql, decorator=date) %}\n  {% endfor %}\n\n  {% set num_days = dates | length %}\n  {% if num_days == 1 %}\n      {% set result_str = 'CREATED 1 PARTITION' %}\n  {% else %}\n      {% set result_str = 'CREATED ' ~ num_days ~ ' PARTITIONS' %}\n  {% endif %}\n\n  {{ store_result('main', response=result_str) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.materialization_table_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_table_bigquery", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_bigquery", "macro_sql": "{% materialization table, adapter='bigquery' -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n  {%- set verbose = config.get('verbose', False) -%}\n\n  {# partitions: iterate over each partition, running a separate query in a for-loop #}\n  {%- set partitions = config.get('partitions') -%}\n\n  {% if partitions %}\n      {% if partitions is number or partitions is string %}\n        {% set partitions = [(partitions | string)] %}\n      {% endif %}\n\n      {% if partitions is not iterable %}\n        {{ exceptions.raise_compiler_error(\"Provided `partitions` configuration is not a list. Got: \" ~ partitions, model) }}\n      {% endif %}\n  {% endif %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      Since dbt uses WRITE_TRUNCATE mode for tables, we only need to drop this thing\n      if it is not a table. If it _is_ already a table, then we can overwrite it without downtime\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% if partitions %}\n    {# Create the dp-table if 1. it does not exist or 2. it existed, but we just dropped it #}\n    {%- set should_create = (old_relation is none or exists_not_as_table) -%}\n    {{ make_date_partitioned_table(model, target_relation, partitions, should_create, verbose) }}\n  {% else %}\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n    {%- set cluster_by = config.get('cluster_by', none) -%}\n    {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n      {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n      {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n    {% call statement('main') -%}\n      {{ create_table_as(False, target_relation, sql) }}\n    {% endcall -%}\n  {% endif %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.materialization_copy_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_copy_bigquery", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/materializations/copy.sql", "original_file_path": "macros/materializations/copy.sql", "name": "materialization_copy_bigquery", "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {# there should be exactly one ref or exactly one source #}\n  {% set destination = this.incorporate(type='table') %}\n\n  {% set dependency_type = none %}\n  {% if (model.refs | length) == 1 and (model.sources | length) == 0 %}\n    {% set dependency_type = 'ref' %}\n  {% elif (model.refs | length) == 0 and (model.sources | length) == 1 %}\n    {% set dependency_type = 'source' %}\n  {% else %}\n    {% set msg %}\n        Expected exactly one ref or exactly one source, instead got {{ model.refs | length }} models and {{ model.sources | length }} sources.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% if dependency_type == 'ref' %}\n    {% set src =  ref(*model.refs[0]) %}\n  {% else %}\n    {% set src =  source(*model.sources[0]) %}\n  {% endif %}\n\n  {%- set result_str = adapter.copy_table(\n      src,\n      destination,\n      config.get('copy_materialization', 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {"unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_bigquery_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bq_insert_overwrite": {"unique_id": "macro.dbt_bigquery.bq_insert_overwrite", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "bq_insert_overwrite", "macro_sql": "{% macro bq_insert_overwrite(tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns) %}\n\n  {% if partitions is not none and partitions != [] %} {# static #}\n\n      {% set predicate -%}\n          {{ partition_by.render(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {{sql}}\n        )\n      {%- endset -%}\n\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header=true) }}\n\n  {% else %} {# dynamic #}\n\n      {% set predicate -%}\n          {{ partition_by.render(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_by.data_type }}>;\n      declare _dbt_max_partition {{ partition_by.data_type }};\n\n      set _dbt_max_partition = (\n          select max({{ partition_by.field }}) from {{ this }}\n      );\n\n      -- 1. create a temp table\n      {{ create_table_as(True, tmp_relation, sql) }}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              array_agg(distinct {{ partition_by.render() }})\n          from {{ tmp_relation }}\n      );\n\n      {#\n        TODO: include_sql_header is a hack; consider a better approach that includes\n              the sql_header at the materialization-level instead\n      #}\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header=false) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.materialization_incremental_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "materialization_incremental_bigquery", "macro_sql": "{% materialization incremental, adapter='bigquery' -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% else %}\n     {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n\n     {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n     {% if strategy == 'insert_overwrite' %}\n\n        {% set missing_partition_msg -%}\n          The 'insert_overwrite' strategy requires the `partition_by` config.\n        {%- endset %}\n        {% if partition_by is none %}\n          {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n        {% endif %}\n\n        {% set build_sql = bq_insert_overwrite(\n            tmp_relation,\n            target_relation,\n            sql,\n            unique_key,\n            partition_by,\n            partitions,\n            dest_columns) %}\n\n     {% else %}\n       {#-- wrap sql in parens to make it a subquery --#}\n       {%- set source_sql -%}\n         (\n           {{sql}}\n         )\n       {%- endset -%}\n\n       {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns) %}\n\n     {% endif %}\n\n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {% endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {"unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__snapshot_hash_arguments", "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__create_columns": {"unique_id": "macro.dbt_bigquery.bigquery__create_columns", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__create_columns", "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__post_snapshot": {"unique_id": "macro.dbt_bigquery.bigquery__post_snapshot", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__post_snapshot", "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/core.sql", "original_file_path": "macros/core.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/core.sql", "original_file_path": "macros/core.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.column_list": {"unique_id": "macro.dbt.column_list", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "column_list", "macro_sql": "{% macro column_list(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {% if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.column_list_for_create_table": {"unique_id": "macro.dbt.column_list_for_create_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "column_list_for_create_table", "macro_sql": "{% macro column_list_for_create_table(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {{ col.data_type }} {%- if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n    ;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/fishtown-analytics/dbt/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    \n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = snapshot_string_as_time(now) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select \n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n    \n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n    \n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.basic_load_csv_rows": {"unique_id": "macro.dbt.basic_load_csv_rows", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "basic_load_csv_rows", "macro_sql": "{% macro basic_load_csv_rows(model, batch_size, agate_table) %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n  {{ return(basic_load_csv_rows(model, 10000, agate_table) )}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.incremental_upsert": {"unique_id": "macro.dbt.incremental_upsert", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/helpers.sql", "original_file_path": "macros/materializations/incremental/helpers.sql", "name": "incremental_upsert", "macro_sql": "{% macro incremental_upsert(tmp_relation, target_relation, unique_key=none, statement_name=\"main\") %}\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n\n    {%- if unique_key is not none -%}\n    delete\n    from {{ target_relation }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ tmp_relation }}\n    );\n    {%- endif %}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n       select {{ dest_cols_csv }}\n       from {{ tmp_relation }}\n    );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/incremental.sql", "original_file_path": "macros/materializations/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif existing_relation.is_view or should_full_refresh() %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set backup_identifier = existing_relation.identifier ~ \"__dbt_backup\" %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n      {% do adapter.drop_relation(backup_relation) %}\n\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n      {% set tmp_relation = make_temp_relation(target_relation) %}\n      {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n      {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n      {% set build_sql = incremental_upsert(tmp_relation, target_relation, unique_key=unique_key) %}\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column in dest_columns -%}\n            {{ adapter.quote(column.name) }} = DBT_INTERNAL_SOURCE.{{ adapter.quote(column.name) }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.common_get_delete_insert_merge_sql": {"unique_id": "macro.dbt.common_get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "common_get_delete_insert_merge_sql", "macro_sql": "{% macro common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    );\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n    {{ common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/table/table.sql", "original_file_path": "macros/materializations/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n\n  -- drop the temp relations if they exists for some reason\n  {{ adapter.drop_relation(intermediate_relation) }}\n  {{ adapter.drop_relation(backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_table_as(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(target_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/view/view.sql", "original_file_path": "macros/materializations/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exists for some reason\n  {{ adapter.drop_relation(intermediate_relation) }}\n  {{ adapter.drop_relation(backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(target_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch(\"handle_existing_table\", packages=['dbt'])(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view(run_outside_transaction_hooks=True) %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {% if run_outside_transaction_hooks %}\n      -- no transactions on BigQuery\n      {{ run_hooks(pre_hooks, inside_transaction=False) }}\n  {% endif %}\n\n  -- `BEGIN` happens here on Snowflake\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if run_outside_transaction_hooks %}\n      -- No transactions on BigQuery\n      {{ run_hooks(post_hooks, inside_transaction=False) }}\n  {% endif %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_alias.sql", "original_file_path": "macros/etc/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/query.sql", "original_file_path": "macros/etc/query.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/is_incremental.sql", "original_file_path": "macros/etc/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_database.sql", "original_file_path": "macros/etc/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_database.sql", "original_file_path": "macros/etc/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/schema_tests/relationships.sql", "original_file_path": "macros/schema_tests/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, to, field) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('from')) %}\n\n\nselect count(*) as validation_errors\nfrom (\n    select {{ column_name }} as id from {{ model }}\n) as child\nleft join (\n    select {{ field }} as id from {{ to }}\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/schema_tests/relationships.sql", "original_file_path": "macros/schema_tests/relationships.sql", "name": "test_relationships", "macro_sql": "{% macro test_relationships(model, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships') %}\n    {{ macro(model, to, field, **kwargs) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/schema_tests/not_null.sql", "original_file_path": "macros/schema_tests/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n\nselect count(*) as validation_errors\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/schema_tests/not_null.sql", "original_file_path": "macros/schema_tests/not_null.sql", "name": "test_not_null", "macro_sql": "{% macro test_not_null(model) %}\n    {% set macro = adapter.dispatch('test_not_null') %}\n    {{ macro(model, **kwargs) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/schema_tests/unique.sql", "original_file_path": "macros/schema_tests/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        {{ column_name }}\n\n    from {{ model }}\n    where {{ column_name }} is not null\n    group by {{ column_name }}\n    having count(*) > 1\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/schema_tests/unique.sql", "original_file_path": "macros/schema_tests/unique.sql", "name": "test_unique", "macro_sql": "{% macro test_unique(model) %}\n    {% set macro = adapter.dispatch('test_unique') %}\n    {{ macro(model, **kwargs) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/schema_tests/accepted_values.sql", "original_file_path": "macros/schema_tests/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, values) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('field')) %}\n{% set quote_values = kwargs.get('quote', True) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field not in (\n        {% for value in values -%}\n            {% if quote_values -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n    )\n)\n\nselect count(*) as validation_errors\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/schema_tests/accepted_values.sql", "original_file_path": "macros/schema_tests/accepted_values.sql", "name": "test_accepted_values", "macro_sql": "{% macro test_accepted_values(model, values) %}\n    {% set macro = adapter.dispatch('test_accepted_values') %}\n    {{ macro(model, values, **kwargs) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', packages = dbt_utils._get_utils_namespaces())()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__except": {"unique_id": "macro.dbt_utils.bigquery__except", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', packages = dbt_utils._get_utils_namespaces()) (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', packages = dbt_utils._get_utils_namespaces())(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    concat({{ fields|join(', ') }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.alternative_concat": {"unique_id": "macro.dbt_utils.alternative_concat", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "alternative_concat", "macro_sql": "{% macro alternative_concat(fields) %}\n    {{ fields|join(' || ') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.redshift__concat": {"unique_id": "macro.dbt_utils.redshift__concat", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "redshift__concat", "macro_sql": "{% macro redshift__concat(fields) %}\n    {{ dbt_utils.alternative_concat(fields) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.snowflake__concat": {"unique_id": "macro.dbt_utils.snowflake__concat", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "snowflake__concat", "macro_sql": "{% macro snowflake__concat(fields) %}\n    {{ dbt_utils.alternative_concat(fields) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', packages = dbt_utils._get_utils_namespaces())()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.redshift__type_string": {"unique_id": "macro.dbt_utils.redshift__type_string", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "redshift__type_string", "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.postgres__type_string": {"unique_id": "macro.dbt_utils.postgres__type_string", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.snowflake__type_string": {"unique_id": "macro.dbt_utils.snowflake__type_string", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', packages = dbt_utils._get_utils_namespaces())()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.snowflake__type_timestamp": {"unique_id": "macro.dbt_utils.snowflake__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', packages = dbt_utils._get_utils_namespaces())()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__type_float": {"unique_id": "macro.dbt_utils.bigquery__type_float", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', packages = dbt_utils._get_utils_namespaces())()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__type_numeric": {"unique_id": "macro.dbt_utils.bigquery__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', packages = dbt_utils._get_utils_namespaces())()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__type_bigint": {"unique_id": "macro.dbt_utils.bigquery__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', packages = dbt_utils._get_utils_namespaces())()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__type_int": {"unique_id": "macro.dbt_utils.bigquery__type_int", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/_is_relation.sql", "original_file_path": "macros/cross_db_utils/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', packages = dbt_utils._get_utils_namespaces()) (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.redshift__length": {"unique_id": "macro.dbt_utils.redshift__length", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', packages = dbt_utils._get_utils_namespaces())(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__dateadd": {"unique_id": "macro.dbt_utils.bigquery__dateadd", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.postgres__dateadd": {"unique_id": "macro.dbt_utils.postgres__dateadd", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', packages = dbt_utils._get_utils_namespaces())()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__intersect": {"unique_id": "macro.dbt_utils.bigquery__intersect", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', packages = dbt_utils._get_utils_namespaces()) (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__right": {"unique_id": "macro.dbt_utils.bigquery__right", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.snowflake__right": {"unique_id": "macro.dbt_utils.snowflake__right", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', packages = dbt_utils._get_utils_namespaces())(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__datediff": {"unique_id": "macro.dbt_utils.bigquery__datediff", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.postgres__datediff": {"unique_id": "macro.dbt_utils.postgres__datediff", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', packages = dbt_utils._get_utils_namespaces()) (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.snowflake__safe_cast": {"unique_id": "macro.dbt_utils.snowflake__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__safe_cast": {"unique_id": "macro.dbt_utils.bigquery__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', packages = dbt_utils._get_utils_namespaces()) (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__hash": {"unique_id": "macro.dbt_utils.bigquery__hash", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.cast_bool_to_text": {"unique_id": "macro.dbt_utils.cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', packages = dbt_utils._get_utils_namespaces()) (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__cast_bool_to_text": {"unique_id": "macro.dbt_utils.default__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.redshift__cast_bool_to_text": {"unique_id": "macro.dbt_utils.redshift__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "redshift__cast_bool_to_text", "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', packages = dbt_utils._get_utils_namespaces()) (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', packages = dbt_utils._get_utils_namespaces()) (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__position": {"unique_id": "macro.dbt_utils.bigquery__position", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', packages = dbt_utils._get_utils_namespaces()) (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', packages = dbt_utils._get_utils_namespaces())()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', packages = dbt_utils._get_utils_namespaces())()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', packages = dbt_utils._get_utils_namespaces()) (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils._get_utils_namespaces": {"unique_id": "macro.dbt_utils._get_utils_namespaces", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/_get_utils_namespaces.sql", "original_file_path": "macros/cross_db_utils/_get_utils_namespaces.sql", "name": "_get_utils_namespaces", "macro_sql": "{% macro _get_utils_namespaces() %}\n  {% set override_namespaces = var('dbt_utils_dispatch_list', []) %}\n  {% do return(override_namespaces + ['dbt_utils']) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', packages = dbt_utils._get_utils_namespaces()) (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default_last_day": {"unique_id": "macro.dbt_utils.default_last_day", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.postgres__last_day": {"unique_id": "macro.dbt_utils.postgres__last_day", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', packages = dbt_utils._get_utils_namespaces()) (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__split_part": {"unique_id": "macro.dbt_utils.bigquery__split_part", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', packages = dbt_utils._get_utils_namespaces()) (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) %}\n    date_trunc('{{datepart}}', {{date}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__date_trunc": {"unique_id": "macro.dbt_utils.bigquery__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) %}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/_is_ephemeral.sql", "original_file_path": "macros/cross_db_utils/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', packages = dbt_utils._get_utils_namespaces())(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', packages = dbt_utils._get_utils_namespaces())(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}};\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/logger/pretty_log_format.sql", "original_file_path": "macros/logger/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', packages = dbt_utils._get_utils_namespaces())(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/logger/pretty_log_format.sql", "original_file_path": "macros/logger/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/logger/pretty_time.sql", "original_file_path": "macros/logger/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', packages = dbt_utils._get_utils_namespaces())(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/logger/pretty_time.sql", "original_file_path": "macros/logger/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/logger/log_info.sql", "original_file_path": "macros/logger/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', packages = dbt_utils._get_utils_namespaces())(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/logger/log_info.sql", "original_file_path": "macros/logger/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', packages = dbt_utils._get_utils_namespaces())(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed = \n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(field, \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n    \n-%}\n\n     \n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n        \n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', packages = dbt_utils._get_utils_namespaces())(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', packages = dbt_utils._get_utils_namespaces())(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/fewer_rows_than.sql", "original_file_path": "macros/schema_tests/fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% macro test_fewer_rows_than(model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', packages = dbt_utils._get_utils_namespaces())(model, combination_of_columns, quote_columns, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/fewer_rows_than.sql", "original_file_path": "macros/schema_tests/fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model) %}\n\n{% set compare_model = kwargs.get('compare_model', kwargs.get('arg')) %}\n\nwith a as (\n\n    select count(*) as count_ourmodel from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparisonmodel from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        (select count_ourmodel from a) as count_model_with_fewer_rows,\n        (select count_comparisonmodel from b) as count_model_with_more_rows\n\n),\nfinal as (\n\n    select\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_model_with_fewer_rows > count_model_with_more_rows then (count_model_with_fewer_rows - count_model_with_more_rows)\n            -- fail the test if they are the same number\n            when count_model = count_comparison then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect row_count_delta from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/equal_rowcount.sql", "original_file_path": "macros/schema_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% macro test_equal_rowcount(model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', packages = dbt_utils._get_utils_namespaces())(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/equal_rowcount.sql", "original_file_path": "macros/schema_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model) %}\n\n{% set compare_model = kwargs.get('compare_model', kwargs.get('arg')) %}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select abs(\n            (select count_a from a) -\n            (select count_b from b)\n            )\n        as diff_count\n\n)\n\nselect diff_count from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/relationships_where.sql", "original_file_path": "macros/schema_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% macro test_relationships_where(model, to, field) %}\n  {{ return(adapter.dispatch('test_relationships_where', packages = dbt_utils._get_utils_namespaces())(model, to, field, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/relationships_where.sql", "original_file_path": "macros/schema_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, to, field) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('from')) %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n{% set from_condition = kwargs.get('from_condition', \"1=1\") %}\n{% set to_condition = kwargs.get('to_condition', \"1=1\") %}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect count(*) from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/recency.sql", "original_file_path": "macros/schema_tests/recency.sql", "name": "test_recency", "macro_sql": "{% macro test_recency(model, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', packages = dbt_utils._get_utils_namespaces())(model, datepart, interval, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/recency.sql", "original_file_path": "macros/schema_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, datepart, interval) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('field')) %}\n\nselect\n    case when count(*) > 0 then 0\n    else 1\n    end as error_result\nfrom {{model}}\nwhere {{column_name}} >=\n    {{dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp())}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/not_constant.sql", "original_file_path": "macros/schema_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% macro test_not_constant(model) %}\n  {{ return(adapter.dispatch('test_not_constant', packages = dbt_utils._get_utils_namespaces())(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/not_constant.sql", "original_file_path": "macros/schema_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n\nselect count(*)\n\nfrom (\n\n    select\n          {# In TSQL, subquery aggregate columns need aliases #}\n          {# thus: a filler col name, 'filler_column' #}\n          count(distinct {{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count(distinct {{ column_name }}) = 1\n\n    ) validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/accepted_range.sql", "original_file_path": "macros/schema_tests/accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% macro test_accepted_range(model, min_value = none, max_value = none, inclusive = true, where = \"true\") %}\n\n{%- set column_name = kwargs.get('column_name', kwargs.get('field')) -%}\n\nwith meet_condition as(\n  select {{ column_name }} \n  from {{ model }}\n  where {{ where }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where \n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2 \n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }} \n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect count(*)\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/not_accepted_values.sql", "original_file_path": "macros/schema_tests/not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% macro test_not_accepted_values(model, values) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('field')) %}\n{% set quote_values = kwargs.get('quote', True) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote_values -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect count(*) as validation_errors\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/test_unique_where.sql", "original_file_path": "macros/schema_tests/test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% macro test_unique_where(model) %}\r\n  {{ return(adapter.dispatch('test_unique_where', packages = dbt_utils._get_utils_namespaces())(model, **kwargs)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/test_unique_where.sql", "original_file_path": "macros/schema_tests/test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model) %}\r\n\r\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\r\n{% set where = kwargs.get('where', kwargs.get('arg')) %}\r\n\r\nselect count(*)\r\nfrom (\r\n\r\n    select\r\n        {{ column_name }}\r\n\r\n    from {{ model }}\r\n    where {{ column_name }} is not null\r\n      {% if where %} and {{ where }} {% endif %}\r\n    group by {{ column_name }}\r\n    having count(*) > 1\r\n\r\n) validation_errors\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/at_least_one.sql", "original_file_path": "macros/schema_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% macro test_at_least_one(model) %}\n  {{ return(adapter.dispatch('test_at_least_one', packages = dbt_utils._get_utils_namespaces())(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/at_least_one.sql", "original_file_path": "macros/schema_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n\nselect count(*)\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/unique_combination_of_columns.sql", "original_file_path": "macros/schema_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% macro test_unique_combination_of_columns(model, quote_columns = false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', packages = dbt_utils._get_utils_namespaces())(model, quote_columns, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/unique_combination_of_columns.sql", "original_file_path": "macros/schema_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, quote_columns = false) %}\n\n{%- set columns = kwargs.get('combination_of_columns', kwargs.get('arg')) %}\n\n{% if not quote_columns %}\n    {%- set column_list=columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect count(*)\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/cardinality_equality.sql", "original_file_path": "macros/schema_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% macro test_cardinality_equality(model, to, field) %}\n\n    {{ return(adapter.dispatch('test_cardinality_equality', packages = dbt_utils._get_utils_namespaces())(model, to, field, **kwargs)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/cardinality_equality.sql", "original_file_path": "macros/schema_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, to, field) %}\n\n{# T-SQL doesn't let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('from')) %}\n\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect count(*)\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/expression_is_true.sql", "original_file_path": "macros/schema_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% macro test_expression_is_true(model, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', packages = dbt_utils._get_utils_namespaces())(model, condition, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/expression_is_true.sql", "original_file_path": "macros/schema_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, condition) %}\n\n{% set expression = kwargs.get('expression', kwargs.get('arg')) %}\n{% set column_name = kwargs.get('column_name') %}\n\nwith meet_condition as (\n\n    select * from {{ model }} where {{ condition }}\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from meet_condition\n    {% if column_name is none %}\n    where not({{ expression }})\n    {%- else %}\n    where not({{ column_name }} {{ expression }})\n    {%- endif %}\n\n)\n\nselect count(*)\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/sequential_values.sql", "original_file_path": "macros/schema_tests/sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% macro test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', packages=dbt_utils._get_utils_namespaces())(model, column_name, interval, datepart, **kwargs)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/sequential_values.sql", "original_file_path": "macros/schema_tests/sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval, datepart) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as previous_{{ column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, 'previous_' + column_name) }} as {{ dbt_utils.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = previous_{{ column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect\n    count(*)\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/test_not_null_where.sql", "original_file_path": "macros/schema_tests/test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% macro test_not_null_where(model) %}\r\n  {{ return(adapter.dispatch('test_not_null_where', packages = dbt_utils._get_utils_namespaces())(model, **kwargs)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/test_not_null_where.sql", "original_file_path": "macros/schema_tests/test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model) %}\r\n\r\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\r\n{% set where = kwargs.get('where', kwargs.get('arg')) %}\r\n\r\nselect count(*)\r\nfrom {{ model }}\r\nwhere {{ column_name }} is null\r\n{% if where %} and {{ where }} {% endif %}\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/equality.sql", "original_file_path": "macros/schema_tests/equality.sql", "name": "test_equality", "macro_sql": "{% macro test_equality(model) %}\n  {{ return(adapter.dispatch('test_equality', packages = dbt_utils._get_utils_namespaces())(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/equality.sql", "original_file_path": "macros/schema_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model) %}\n\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n{%- set compare_columns = kwargs.get('compare_columns', None) -%}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_model = kwargs.get('compare_model', kwargs.get('arg')) %}\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select * from a_minus_b\n    union all\n    select * from b_minus_a\n\n),\n\nfinal as (\n\n    select (select count(*) from unioned) +\n        (select abs(\n            (select count(*) from a_minus_b) -\n            (select count(*) from b_minus_a)\n            ))\n        as count\n\n)\n\nselect count from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/schema_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% macro test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', packages = dbt_utils._get_utils_namespaces())(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/schema_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }},\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect count(*) from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', packages = dbt_utils._get_utils_namespaces())(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', packages = dbt_utils._get_utils_namespaces())(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', packages = dbt_utils._get_utils_namespaces())(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', packages = dbt_utils._get_utils_namespaces())(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', packages = dbt_utils._get_utils_namespaces())(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', packages = dbt_utils._get_utils_namespaces())(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * pow(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', packages = dbt_utils._get_utils_namespaces())(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', packages = dbt_utils._get_utils_namespaces())(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[]) -%}\n    {{ return(adapter.dispatch('star', packages = dbt_utils._get_utils_namespaces())(from, relation_alias, except)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n\n    {%- for col in cols -%}\n\n        {%- if col.column not in except -%}\n            {% do include_cols.append(col.column) %}\n\n        {%- endif %}\n    {%- endfor %}\n\n    {%- for col in include_cols %}\n\n        {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }}\n        {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n\n    {%- endfor -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', packages = dbt_utils._get_utils_namespaces())(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n    {{ return(adapter.dispatch('union_relations', packages = dbt_utils._get_utils_namespaces())(relations, column_override, include, exclude, source_column_name)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', packages = dbt_utils._get_utils_namespaces())(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', packages = dbt_utils._get_utils_namespaces())(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', packages = dbt_utils._get_utils_namespaces())(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', packages = dbt_utils._get_utils_namespaces())(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', packages = dbt_utils._get_utils_namespaces())\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                case table_type\n                    when 'BASE TABLE' then 'table'\n                    else lower(table_type)\n                end as table_type\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, max_records=none, default=none) -%}\n    {{ return(adapter.dispatch('get_column_values', packages = dbt_utils._get_utils_namespaces())(table, column, max_records, default)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, max_records=none, default=none) -%}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n{#--  #}\n\n    {%- set target_relation = adapter.get_relation(database=table.database,\n                                          schema=table.schema,\n                                         identifier=table.identifier) -%}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not target_relation and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ table ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not target_relation and default is not none -%}\n\n          {{ log(\"Relation \" ~ table ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n            group by 1\n            order by count(*) desc\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', packages = dbt_utils._get_utils_namespaces())(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for v in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ v }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ v ~ suffix) }}\n      {% else %}\n        as {{prefix ~ v ~ suffix }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', packages = dbt_utils._get_utils_namespaces())(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', packages = dbt_utils._get_utils_namespaces())(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(pow((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    pow((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(pow(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    pow(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.iterable_source.get_campaign_label_history_columns": {"unique_id": "macro.iterable_source.get_campaign_label_history_columns", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "macros/get_campaign_label_history_columns.sql", "original_file_path": "macros/get_campaign_label_history_columns.sql", "name": "get_campaign_label_history_columns", "macro_sql": "{% macro get_campaign_label_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"label\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.iterable_source.get_campaign_suppression_list_history_columns": {"unique_id": "macro.iterable_source.get_campaign_suppression_list_history_columns", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "macros/get_campaign_suppression_list_history_columns.sql", "original_file_path": "macros/get_campaign_suppression_list_history_columns.sql", "name": "get_campaign_suppression_list_history_columns", "macro_sql": "{% macro get_campaign_suppression_list_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"suppressed_list_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.iterable_source.get_user_unsubscribed_message_type_history_columns": {"unique_id": "macro.iterable_source.get_user_unsubscribed_message_type_history_columns", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "macros/get_user_unsubscribed_message_type_history_columns.sql", "original_file_path": "macros/get_user_unsubscribed_message_type_history_columns.sql", "name": "get_user_unsubscribed_message_type_history_columns", "macro_sql": "{% macro get_user_unsubscribed_message_type_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"email\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"message_type_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.iterable_source.get_message_type_columns": {"unique_id": "macro.iterable_source.get_message_type_columns", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "macros/get_message_type_columns.sql", "original_file_path": "macros/get_message_type_columns.sql", "name": "get_message_type_columns", "macro_sql": "{% macro get_message_type_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"channel_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.iterable_source.get_list_columns": {"unique_id": "macro.iterable_source.get_list_columns", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "macros/get_list_columns.sql", "original_file_path": "macros/get_list_columns.sql", "name": "get_list_columns", "macro_sql": "{% macro get_list_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"list_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.iterable_source.get_channel_columns": {"unique_id": "macro.iterable_source.get_channel_columns", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "macros/get_channel_columns.sql", "original_file_path": "macros/get_channel_columns.sql", "name": "get_channel_columns", "macro_sql": "{% macro get_channel_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"channel_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"message_medium\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.iterable_source.get_user_unsubscribed_channel_history_columns": {"unique_id": "macro.iterable_source.get_user_unsubscribed_channel_history_columns", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "macros/get_user_unsubscribed_channel_history_columns.sql", "original_file_path": "macros/get_user_unsubscribed_channel_history_columns.sql", "name": "get_user_unsubscribed_channel_history_columns", "macro_sql": "{% macro get_user_unsubscribed_channel_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"channel_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"email\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.iterable_source.get_campaign_history_columns": {"unique_id": "macro.iterable_source.get_campaign_history_columns", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "macros/get_campaign_history_columns.sql", "original_file_path": "macros/get_campaign_history_columns.sql", "name": "get_campaign_history_columns", "macro_sql": "{% macro get_campaign_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"campaign_state\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"created_by_user_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"ended_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"recurring_campaign_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"send_size\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"start_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"template_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"workflow_id\", \"datatype\": dbt_utils.type_numeric()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.iterable_source.get_event_extension_columns": {"unique_id": "macro.iterable_source.get_event_extension_columns", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "macros/get_event_extension_columns.sql", "original_file_path": "macros/get_event_extension_columns.sql", "name": "get_event_extension_columns", "macro_sql": "{% macro get_event_extension_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"app_already_running\", \"datatype\": \"boolean\"},\n    {\"name\": \"badge\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"canonical_url_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"content_available\", \"datatype\": \"boolean\"},\n    {\"name\": \"content_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"deeplink_android\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"deeplink_ios\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"device\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"email_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"email_subject\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"experiment_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"from_phone_number_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"from_smssender_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"image_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"is_ghost_push\", \"datatype\": \"boolean\"},\n    {\"name\": \"link_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"link_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"locale\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"payload\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"platform_endpoint\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"push_message\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"region\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sms_message\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sms_provider_response_code\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"sms_provider_response_message\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sms_provider_response_more_info\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sms_provider_response_status\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"sound\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"to_phone_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"workflow_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"workflow_name\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.iterable_source.get_campaign_list_history_columns": {"unique_id": "macro.iterable_source.get_campaign_list_history_columns", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "macros/get_campaign_list_history_columns.sql", "original_file_path": "macros/get_campaign_list_history_columns.sql", "name": "get_campaign_list_history_columns", "macro_sql": "{% macro get_campaign_list_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"list_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.iterable_source.get_event_columns": {"unique_id": "macro.iterable_source.get_event_columns", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "macros/get_event_columns.sql", "original_file_path": "macros/get_event_columns.sql", "name": "get_event_columns", "macro_sql": "{% macro get_event_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"campaign_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"content_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"email\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"event_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"message_bus_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"message_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"message_type_id\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"recipient_state\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"unsub_source\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"user_agent\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"user_agent_device\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"transactional_data\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"additional_properties\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.iterable_source.get_template_history_columns": {"unique_id": "macro.iterable_source.get_template_history_columns", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "macros/get_template_history_columns.sql", "original_file_path": "macros/get_template_history_columns.sql", "name": "get_template_history_columns", "macro_sql": "{% macro get_template_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"client_template_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"creator_user_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"message_type_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"template_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.iterable_source.get_user_history_columns": {"unique_id": "macro.iterable_source.get_user_history_columns", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "macros/get_user_history_columns.sql", "original_file_path": "macros/get_user_history_columns.sql", "name": "get_user_history_columns", "macro_sql": "{% macro get_user_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"email\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"email_list_ids\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"first_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"last_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"phone_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"signup_date\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"signup_source\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"user_id\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.iterable_source.get_user_device_history_columns": {"unique_id": "macro.iterable_source.get_user_device_history_columns", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "macros/get_user_device_history_columns.sql", "original_file_path": "macros/get_user_device_history_columns.sql", "name": "get_user_device_history_columns", "macro_sql": "{% macro get_user_device_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"application_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"email\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"endpoint_enabled\", \"datatype\": \"boolean\"},\n    {\"name\": \"index\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"platform\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"platform_endpoint\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.enabled_vars": {"unique_id": "macro.fivetran_utils.enabled_vars", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/enabled_vars.sql", "original_file_path": "macros/enabled_vars.sql", "name": "enabled_vars", "macro_sql": "{% macro enabled_vars(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, True) == False %}\n    {{ return(False) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(True) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.percentile": {"unique_id": "macro.fivetran_utils.percentile", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "percentile", "macro_sql": "{% macro percentile(percentile_field, partition_field, percent) -%}\n\n{{ adapter.dispatch('percentile', packages = fivetran_utils._get_utils_namespaces()) (percentile_field, partition_field, percent) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.default__percentile": {"unique_id": "macro.fivetran_utils.default__percentile", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "default__percentile", "macro_sql": "{% macro default__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.bigquery__percentile": {"unique_id": "macro.fivetran_utils.bigquery__percentile", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "bigquery__percentile", "macro_sql": "{% macro bigquery__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.pivot_json_extract": {"unique_id": "macro.fivetran_utils.pivot_json_extract", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/pivot_json_extract.sql", "original_file_path": "macros/pivot_json_extract.sql", "name": "pivot_json_extract", "macro_sql": "{% macro pivot_json_extract(string, list_of_properties) %}\n\n{%- for property in list_of_properties -%}\n\nreplace( {{ fivetran_utils.json_extract(string, property) }}, '\"', '') as {{ property | replace(' ', '_') | lower }}\n\n{%- if not loop.last -%},{%- endif %}\n{% endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.json_parse": {"unique_id": "macro.fivetran_utils.json_parse", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "json_parse", "macro_sql": "{% macro json_parse(string, string_path) -%}\n\n{{ adapter.dispatch('json_parse', packages = fivetran_utils._get_utils_namespaces()) (string, string_path) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.default__json_parse": {"unique_id": "macro.fivetran_utils.default__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "default__json_parse", "macro_sql": "{% macro default__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.bigquery__json_parse": {"unique_id": "macro.fivetran_utils.bigquery__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "bigquery__json_parse", "macro_sql": "{% macro bigquery__json_parse(string, string_path) %}\n\n \n  json_extract_scalar({{string}}, '$.{%- for s in string_path -%}{{ s }}{%- if not loop.last -%}.{%- endif -%}{%- endfor -%} ')\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.postgres__json_parse": {"unique_id": "macro.fivetran_utils.postgres__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "postgres__json_parse", "macro_sql": "{% macro postgres__json_parse(string, string_path) %}\n\n  {{string}}::json #>> '{ {%- for s in string_path -%}{{ s }}{%- if not loop.last -%},{%- endif -%}{%- endfor -%} }'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.snowflake__json_parse": {"unique_id": "macro.fivetran_utils.snowflake__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "snowflake__json_parse", "macro_sql": "{% macro snowflake__json_parse(string, string_path) %}\n\n  parse_json( {{string}} ) {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.spark__json_parse": {"unique_id": "macro.fivetran_utils.spark__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "spark__json_parse", "macro_sql": "{% macro spark__json_parse(string, string_path) %}\n\n  {{string}} : {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.max_bool": {"unique_id": "macro.fivetran_utils.max_bool", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "max_bool", "macro_sql": "{% macro max_bool(boolean_field) -%}\n\n{{ adapter.dispatch('max_bool', packages = fivetran_utils._get_utils_namespaces()) (boolean_field) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.default__max_bool": {"unique_id": "macro.fivetran_utils.default__max_bool", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "default__max_bool", "macro_sql": "{% macro default__max_bool(boolean_field)  %}\n\n    bool_or( {{ boolean_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.snowflake__max_bool": {"unique_id": "macro.fivetran_utils.snowflake__max_bool", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "snowflake__max_bool", "macro_sql": "{% macro snowflake__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.bigquery__max_bool": {"unique_id": "macro.fivetran_utils.bigquery__max_bool", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "bigquery__max_bool", "macro_sql": "{% macro bigquery__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.seed_data_helper": {"unique_id": "macro.fivetran_utils.seed_data_helper", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/seed_data_helper.sql", "original_file_path": "macros/seed_data_helper.sql", "name": "seed_data_helper", "macro_sql": "{% macro seed_data_helper(seed_name, warehouses) %}\n\n{% if target.type in warehouses %}\n    {% for w in warehouses %}\n        {% if target.type == w %}\n            {{ return(ref(seed_name ~ \"_\" ~ w ~ \"\")) }}\n        {% endif %}\n    {% endfor %}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.fill_pass_through_columns": {"unique_id": "macro.fivetran_utils.fill_pass_through_columns", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/fill_pass_through_columns.sql", "original_file_path": "macros/fill_pass_through_columns.sql", "name": "fill_pass_through_columns", "macro_sql": "{% macro fill_pass_through_columns(pass_through_variable) %}\n\n{% if var(pass_through_variable) %}\n    {% for field in var(pass_through_variable) %}\n        {% if field.transform_sql %}\n            , {{ field.transform_sql }} as {{ field.alias if field.alias else field.name }}\n        {% else %}\n            , {{ field.alias if field.alias else field.name }}\n        {% endif %}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.string_agg": {"unique_id": "macro.fivetran_utils.string_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "string_agg", "macro_sql": "{% macro string_agg(field_to_agg, delimiter) -%}\n\n{{ adapter.dispatch('string_agg', packages = fivetran_utils._get_utils_namespaces()) (field_to_agg, delimiter) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.default__string_agg": {"unique_id": "macro.fivetran_utils.default__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "default__string_agg", "macro_sql": "{% macro default__string_agg(field_to_agg, delimiter) %}\n    string_agg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.snowflake__string_agg": {"unique_id": "macro.fivetran_utils.snowflake__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "snowflake__string_agg", "macro_sql": "{% macro snowflake__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.redshift__string_agg": {"unique_id": "macro.fivetran_utils.redshift__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "redshift__string_agg", "macro_sql": "{% macro redshift__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.timestamp_diff": {"unique_id": "macro.fivetran_utils.timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "timestamp_diff", "macro_sql": "{% macro timestamp_diff(first_date, second_date, datepart) %}\n  {{ adapter.dispatch('datediff', packages = fivetran_utils._get_utils_namespaces())(first_date, second_date, datepart) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.default__timestamp_diff": {"unique_id": "macro.fivetran_utils.default__timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "default__timestamp_diff", "macro_sql": "{% macro default__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.bigquery__timestamp_diff": {"unique_id": "macro.fivetran_utils.bigquery__timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "bigquery__timestamp_diff", "macro_sql": "{% macro bigquery__timestamp_diff(first_date, second_date, datepart) %}\n\n    timestamp_diff(\n        {{second_date}},\n        {{first_date}},\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.postgres__datediff": {"unique_id": "macro.fivetran_utils.postgres__datediff", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.generate_columns_macro": {"unique_id": "macro.fivetran_utils.generate_columns_macro", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/generate_columns_macro.sql", "original_file_path": "macros/generate_columns_macro.sql", "name": "generate_columns_macro", "macro_sql": "{% macro generate_columns_macro(table_name, schema_name, database_name=target.database) %}\n\n{% set columns = get_columns_for_macro(table_name, schema_name, database_name) %}\n\n{% set jinja_macro=[] %}\n\n{% do jinja_macro.append('{% macro get_' ~ table_name ~ '_columns() %}') %}\n{% do jinja_macro.append('') %}\n{% do jinja_macro.append('{% set columns = [') %}\n\n{% for col in columns %}\n{% do jinja_macro.append('    ' ~ col ~ (',' if not loop.last)) %}\n{% endfor %}\n\n{% do jinja_macro.append('] %}') %}\n{% do jinja_macro.append('') %}\n{% do jinja_macro.append('{{ return(columns) }}') %}\n{% do jinja_macro.append('') %}\n{% do jinja_macro.append('{% endmacro %}') %}\n\n{% if execute %}\n\n    {% set joined = jinja_macro | join ('\\n') %}\n    {{ log(joined, info=True) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.source_relation": {"unique_id": "macro.fivetran_utils.source_relation", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "name": "source_relation", "macro_sql": "{% macro source_relation() -%}\n\n{{ adapter.dispatch('source_relation', packages = fivetran_utils._get_utils_namespaces()) () }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.default__source_relation": {"unique_id": "macro.fivetran_utils.default__source_relation", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "name": "default__source_relation", "macro_sql": "{% macro default__source_relation() %}\n\n{% if var('union_schemas', none)  %}\n, case\n    {% for schema in var('union_schemas') %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.{{ schema|lower }}.%' then '{{ schema|lower }}'\n    {% endfor %}\n  end as source_relation\n{% elif var('union_databases', none) %}\n, case\n    {% for database in var('union_databases') %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%{{ database|lower }}.%' then '{{ database|lower }}'\n    {% endfor %}\n  end as source_relation\n{% else %}\n, '' as source_relation\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.first_value": {"unique_id": "macro.fivetran_utils.first_value", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "name": "first_value", "macro_sql": "{% macro first_value(first_value_field, partition_field, order_by_field, order=\"asc\") -%}\n\n{{ adapter.dispatch('first_value', packages = fivetran_utils._get_utils_namespaces()) (first_value_field, partition_field, order_by_field, order) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.default__first_value": {"unique_id": "macro.fivetran_utils.default__first_value", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "name": "default__first_value", "macro_sql": "{% macro default__first_value(first_value_field, partition_field, order_by_field, order=\"asc\")  %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.redshift__first_value": {"unique_id": "macro.fivetran_utils.redshift__first_value", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "name": "redshift__first_value", "macro_sql": "{% macro redshift__first_value(first_value_field, partition_field, order_by_field, order=\"asc\") %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} , {{ partition_field }} rows unbounded preceding )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.add_pass_through_columns": {"unique_id": "macro.fivetran_utils.add_pass_through_columns", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/add_pass_through_columns.sql", "original_file_path": "macros/add_pass_through_columns.sql", "name": "add_pass_through_columns", "macro_sql": "{% macro add_pass_through_columns(base_columns, pass_through_var) %}\n\n  {% if pass_through_var %}\n\n    {% for column in pass_through_var %}\n\n      {% do base_columns.append({ \"name\": column.name, \"alias\": column.alias }) if column.alias else base_columns.append({ \"name\": column.name }) %}\n\n    {% endfor %}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.staging_models_automation": {"unique_id": "macro.fivetran_utils.staging_models_automation", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/staging_models_automation.sql", "original_file_path": "macros/staging_models_automation.sql", "name": "staging_models_automation", "macro_sql": "{% macro staging_models_automation(package, source_schema, source_database, tables) %}\n\n{% set package = \"\"~ package ~\"\" %}\n{% set source_schema = \"\"~ source_schema ~\"\" %}\n{% set source_database = \"\"~ source_database ~\"\" %}\n\n{% set zsh_command = \"source dbt_modules/fivetran_utils/columns_setup.sh '../dbt_\"\"\"~ package ~\"\"\"_source' stg_\"\"\"~ package ~\"\"\" \"\"\"~ source_database ~\"\"\" \"\"\"~ source_schema ~\"\"\" \" %}\n\n{% for t in tables %}\n    {% if t != tables[-1] %}\n        {% set help_command = zsh_command + t + \" && \\n\" %}\n\n    {% else %}\n        {% set help_command = zsh_command + t %}\n\n    {% endif %}\n    {{ log(help_command, info=True) }}\n\n{% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.union_relations": {"unique_id": "macro.fivetran_utils.union_relations", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, aliases=none, column_override=none, include=[], exclude=[], source_column_name=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n    {%- set source_column_name = source_column_name if source_column_name is not none else '_dbt_source_relation' -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ aliases[loop.index0] if aliases else relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.union_tables": {"unique_id": "macro.fivetran_utils.union_tables", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "name": "union_tables", "macro_sql": "{%- macro union_tables(tables, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_table') -%}\n\n    {%- do exceptions.warn(\"Warning: the `union_tables` macro is no longer supported and will be deprecated in a future release of dbt-utils. Use the `union_relations` macro instead\") -%}\n\n    {{ return(dbt_utils.union_relations(tables, column_override, include, exclude, source_column_name)) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.snowflake_seed_data": {"unique_id": "macro.fivetran_utils.snowflake_seed_data", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/snowflake_seed_data.sql", "original_file_path": "macros/snowflake_seed_data.sql", "name": "snowflake_seed_data", "macro_sql": "{% macro snowflake_seed_data(seed_name) %}\n\n{% if target.type == 'snowflake' %}\n{{ return(ref(seed_name ~ '_snowflake')) }}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.snowflake__get_columns_for_macro": {"unique_id": "macro.fivetran_utils.snowflake__get_columns_for_macro", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/get_columns_for_macro.sql", "original_file_path": "macros/get_columns_for_macro.sql", "name": "snowflake__get_columns_for_macro", "macro_sql": "{% macro snowflake__get_columns_for_macro(table_name, schema_name, database_name=target.database) %}\n\n{% set query %}\n\nselect\n    concat(\n      '{\"name\": \"', \n      lower(column_name), \n      '\", \"datatype\": ',\n      case\n        when lower(data_type) like '%timestamp%' then 'dbt_utils.type_timestamp()' \n        when lower(data_type) = 'text' then 'dbt_utils.type_string()' \n        when lower(data_type) = 'boolean' then '\"boolean\"'\n        when lower(data_type) = 'number' then 'dbt_utils.type_numeric()' \n        when lower(data_type) = 'float' then 'dbt_utils.type_float()' \n        when lower(data_type) = 'date' then '\"date\"'\n      end,\n      '}')\nfrom {{ database_name }}.information_schema.columns\nwhere lower(table_name) = '{{ table_name }}'\nand lower(table_schema) = '{{ schema_name }}'\norder by 1\n\n{% endset %}\n\n{% set results = run_query(query) %}\n{% set results_list = results.columns[0].values() %}}\n\n{{ return(results_list) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.bigquery__get_columns_for_macro": {"unique_id": "macro.fivetran_utils.bigquery__get_columns_for_macro", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/get_columns_for_macro.sql", "original_file_path": "macros/get_columns_for_macro.sql", "name": "bigquery__get_columns_for_macro", "macro_sql": "{% macro bigquery__get_columns_for_macro(table_name, schema_name, database_name=target.database) %}\n\n{% set query %}\n\nselect\n    concat(\n      '{\"name\": \"', \n      lower(column_name), \n      '\", \"datatype\": ',\n      case\n        when lower(data_type) like '%timestamp%' then 'dbt_utils.type_timestamp()' \n        when lower(data_type) = 'string' then 'dbt_utils.type_string()' \n        when lower(data_type) = 'bool' then '\"boolean\"'\n        when lower(data_type) = 'numeric' then 'dbt_utils.type_numeric()' \n        when lower(data_type) = 'float64' then 'dbt_utils.type_float()' \n        when lower(data_type) = 'int64' then 'dbt_utils.type_int()' \n        when lower(data_type) = 'date' then '\"date\"' \n        when lower(data_type) = 'datetime' then '\"datetime\"' \n      end,\n      '}')\nfrom `{{ database_name }}`.{{ schema_name }}.INFORMATION_SCHEMA.COLUMNS\nwhere lower(table_name) = '{{ table_name }}'\nand lower(table_schema) = '{{ schema_name }}'\norder by 1\n\n{% endset %}\n\n{% set results = run_query(query) %}\n{% set results_list = results.columns[0].values() %}}\n\n{{ return(results_list) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.get_columns_for_macro": {"unique_id": "macro.fivetran_utils.get_columns_for_macro", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/get_columns_for_macro.sql", "original_file_path": "macros/get_columns_for_macro.sql", "name": "get_columns_for_macro", "macro_sql": "{% macro get_columns_for_macro(table_name, schema_name, database_name) -%}\n  {{ return(adapter.dispatch('get_columns_for_macro')(table_name, schema_name, database_name)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.fill_staging_columns": {"unique_id": "macro.fivetran_utils.fill_staging_columns", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "name": "fill_staging_columns", "macro_sql": "{% macro fill_staging_columns(source_columns, staging_columns) -%}\n\n{%- set source_column_names = source_columns|map(attribute='name')|map('lower')|list -%}\n\n{%- for column in staging_columns %}\n    {% if column.name|lower in source_column_names -%}\n        {{ fivetran_utils.quote_column(column) }} as \n        {%- if 'alias' in column %} {{ column.alias }} {% else %} {{ fivetran_utils.quote_column(column) }} {%- endif -%}\n    {%- else -%}\n        cast(null as {{ column.datatype }})\n        {%- if 'alias' in column %} as {{ column.alias }} {% else %} as {{ fivetran_utils.quote_column(column) }} {% endif -%}\n    {%- endif -%}\n    {%- if not loop.last -%} , {% endif -%}\n{% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.quote_column": {"unique_id": "macro.fivetran_utils.quote_column", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "name": "quote_column", "macro_sql": "{% macro quote_column(column) %}\n    {% if 'quote' in column %}\n        {% if column.quote %}\n            {% if target.type in ('bigquery', 'spark') %}\n            `{{ column.name }}`\n            {% elif target.type == 'snowflake' %}\n            \"{{ column.name | upper }}\"\n            {% else %}\n            \"{{ column.name }}\"\n            {% endif %}\n        {% else %}\n        {{ column.name }}\n        {% endif %}\n    {% else %}\n    {{ column.name }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.json_extract": {"unique_id": "macro.fivetran_utils.json_extract", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "json_extract", "macro_sql": "{% macro json_extract(string, string_path) -%}\n\n{{ adapter.dispatch('json_extract', packages = fivetran_utils._get_utils_namespaces()) (string, string_path) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.default__json_extract": {"unique_id": "macro.fivetran_utils.default__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "default__json_extract", "macro_sql": "{% macro default__json_extract(string, string_path) %}\n\n  json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} )\n \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.bigquery__json_extract": {"unique_id": "macro.fivetran_utils.bigquery__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "bigquery__json_extract", "macro_sql": "{% macro bigquery__json_extract(string, string_path) %}\n\n  json_extract_scalar({{string}}, {{ \"'$.\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.postgres__json_extract": {"unique_id": "macro.fivetran_utils.postgres__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "postgres__json_extract", "macro_sql": "{% macro postgres__json_extract(string, string_path) %}\n\n  {{string}}::json->>{{\"'\" ~ string_path ~ \"'\" }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.collect_freshness": {"unique_id": "macro.fivetran_utils.collect_freshness", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.default__collect_freshness": {"unique_id": "macro.fivetran_utils.default__collect_freshness", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n\n  {%- set enabled_array = [] -%}\n  {% for node in graph.sources.values() %}\n    {% if node.name == source.name %}\n      {% if (node.meta['is_enabled'] | default(true)) %}\n        {%- do enabled_array.append(1) -%}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n  {% set is_enabled = (enabled_array != []) %}\n\n    select\n      {% if is_enabled %}\n      max({{ loaded_at_field }})\n      {% else %} \n      {{ current_timestamp() }} {% endif %} as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n\n    {% if is_enabled %}\n    from {{ source }}\n      {% if filter %}\n      where {{ filter }}\n      {% endif %}\n    {% endif %}\n\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.timestamp_add": {"unique_id": "macro.fivetran_utils.timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "timestamp_add", "macro_sql": "{% macro timestamp_add(datepart, interval, from_timestamp) -%}\n\n{{ adapter.dispatch('timestamp_add', packages = fivetran_utils._get_utils_namespaces()) (datepart, interval, from_timestamp) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.default__timestamp_add": {"unique_id": "macro.fivetran_utils.default__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "default__timestamp_add", "macro_sql": "{% macro default__timestamp_add(datepart, interval, from_timestamp) %}\n\n    timestampadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.bigquery__timestamp_add": {"unique_id": "macro.fivetran_utils.bigquery__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "bigquery__timestamp_add", "macro_sql": "{% macro bigquery__timestamp_add(datepart, interval, from_timestamp) %}\n\n        timestamp_add({{ from_timestamp }}, interval  {{ interval }} {{ datepart }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.redshift__timestamp_add": {"unique_id": "macro.fivetran_utils.redshift__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "redshift__timestamp_add", "macro_sql": "{% macro redshift__timestamp_add(datepart, interval, from_timestamp) %}\n\n        dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.postgres__timestamp_add": {"unique_id": "macro.fivetran_utils.postgres__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "postgres__timestamp_add", "macro_sql": "{% macro postgres__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ from_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.spark__timestamp_add": {"unique_id": "macro.fivetran_utils.spark__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "spark__timestamp_add", "macro_sql": "{% macro spark__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ dbt_utils.dateadd(datepart, interval, from_timestamp) }}\n        \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.ceiling": {"unique_id": "macro.fivetran_utils.ceiling", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "name": "ceiling", "macro_sql": "{% macro ceiling(num) -%}\n\n{{ adapter.dispatch('ceiling', packages = fivetran_utils._get_utils_namespaces()) (num) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.default__ceiling": {"unique_id": "macro.fivetran_utils.default__ceiling", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "name": "default__ceiling", "macro_sql": "{% macro default__ceiling(num) %}\n    ceiling({{ num }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.snowflake__ceiling": {"unique_id": "macro.fivetran_utils.snowflake__ceiling", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "name": "snowflake__ceiling", "macro_sql": "{% macro snowflake__ceiling(num) %}\n    ceil({{ num }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.remove_prefix_from_columns": {"unique_id": "macro.fivetran_utils.remove_prefix_from_columns", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/remove_prefix_from_columns.sql", "original_file_path": "macros/remove_prefix_from_columns.sql", "name": "remove_prefix_from_columns", "macro_sql": "{% macro remove_prefix_from_columns(columns, prefix='', exclude=[]) %}\n\n        {%- for col in columns if col.name not in exclude -%}\n        {%- if col.name[:prefix|length]|lower == prefix -%}\n        {{ col.name }} as {{ col.name[prefix|length:] }}\n        {%- else -%}\n        {{ col.name }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n        {% endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.union_data": {"unique_id": "macro.fivetran_utils.union_data", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "name": "union_data", "macro_sql": "{% macro union_data(table_identifier, database_variable, schema_variable, default_database, default_schema, default_variable) -%}\n\n{{ adapter.dispatch('union_data', packages = fivetran_utils._get_utils_namespaces()) (table_identifier, database_variable, schema_variable, default_database, default_schema, default_variable) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.default__union_data": {"unique_id": "macro.fivetran_utils.default__union_data", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "name": "default__union_data", "macro_sql": "{% macro default__union_data(table_identifier, database_variable, schema_variable, default_database, default_schema, default_variable) %}\n\n{% if var('union_schemas', none) %}\n\n    {% set relations = [] %}\n\n    {% for schema in var('union_schemas') %}\n\n    {% set relation=adapter.get_relation(\n        database=var(database_variable, default_database),\n        schema=schema,\n        identifier=table_identifier\n    ) -%}\n    \n    {% set relation_exists=relation is not none %}\n\n    {% if relation_exists %}\n\n    {% do relations.append(relation) %}\n    \n    {% endif %}\n\n    {% endfor %}\n\n    {{ dbt_utils.union_relations(relations) }}\n\n{% elif var('union_databases', none) %}\n\n    {% set relations = [] %}\n\n    {% for database in var('union_databases') %}\n\n    {% set relation=adapter.get_relation(\n        database=database,\n        schema=var(schema_variable, default_schema),\n        identifier=table_identifier\n    ) -%}\n\n    {% set relation_exists=relation is not none %}\n\n    {% if relation_exists %}\n\n    {% do relations.append(relation) %}\n    \n    {% endif %}\n\n    {% endfor %}\n\n    {{ dbt_utils.union_relations(relations) }}\n\n{% else %}\n\n    select * \n    from {{ var(default_variable) }}\n\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.dummy_coalesce_value": {"unique_id": "macro.fivetran_utils.dummy_coalesce_value", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/dummy_coalesce_value.sql", "original_file_path": "macros/dummy_coalesce_value.sql", "name": "dummy_coalesce_value", "macro_sql": "{% macro dummy_coalesce_value(column) %}\n\n{% set coalesce_value = {\n 'STRING': \"'DUMMY_STRING'\",\n 'BOOLEAN': 'null',\n 'INT': 999999999,\n 'FLOAT': 999999999.99,\n 'TIMESTAMP': 'cast(\"2099-12-31\" as timestamp)',\n 'DATE': 'cast(\"2099-12-31\" as date)',\n} %}\n\n{% if column.is_float() %}\n{{ return(coalesce_value['FLOAT']) }}\n\n{% elif column.is_numeric() %}\n{{ return(coalesce_value['INT']) }}\n\n{% elif column.is_string() %}\n{{ return(coalesce_value['STRING']) }}\n\n{% elif column.data_type|lower == 'boolean' %}\n{{ return(coalesce_value['BOOLEAN']) }}\n\n{% elif 'timestamp' in column.data_type|lower %}\n{{ return(coalesce_value['TIMESTAMP']) }}\n\n{% elif 'date' in column.data_type|lower %}\n{{ return(coalesce_value['DATE']) }}\n\n{% elif 'int' in column.data_type|lower %}\n{{ return(coalesce_value['INT']) }}\n\n{% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils._get_utils_namespaces": {"unique_id": "macro.fivetran_utils._get_utils_namespaces", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/_get_utils_namespaces.sql", "original_file_path": "macros/_get_utils_namespaces.sql", "name": "_get_utils_namespaces", "macro_sql": "{% macro _get_utils_namespaces() %}\n  {% set override_namespaces = var('fivetran_utils_dispatch_list', []) %}\n  {% do return(override_namespaces + ['dbt_utils', 'fivetran_utils']) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.array_agg": {"unique_id": "macro.fivetran_utils.array_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "name": "array_agg", "macro_sql": "{% macro array_agg(field_to_agg) -%}\n\n{{ adapter.dispatch('array_agg', packages = fivetran_utils._get_utils_namespaces()) (field_to_agg) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.default__array_agg": {"unique_id": "macro.fivetran_utils.default__array_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "name": "default__array_agg", "macro_sql": "{% macro default__array_agg(field_to_agg) %}\n    array_agg({{ field_to_agg }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.redshift__array_agg": {"unique_id": "macro.fivetran_utils.redshift__array_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "name": "redshift__array_agg", "macro_sql": "{% macro redshift__array_agg(field_to_agg) %}\n    listagg({{ field_to_agg }}, ',')\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.empty_variable_warning": {"unique_id": "macro.fivetran_utils.empty_variable_warning", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/empty_variable_warning.sql", "original_file_path": "macros/empty_variable_warning.sql", "name": "empty_variable_warning", "macro_sql": "{% macro empty_variable_warning(variable, downstream_model) %}\n\n{% if not var(variable) %}\n{{ log(\n    \"\"\"\n    Warning: You have passed an empty list to the \"\"\" ~ variable ~ \"\"\".\n    As a result, you won't see the history of any columns in the \"\"\" ~ downstream_model ~ \"\"\" model.\n    \"\"\",\n    info=True\n) }}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.enabled_vars_one_true": {"unique_id": "macro.fivetran_utils.enabled_vars_one_true", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/fivetran_utils", "path": "macros/enabled_vars_one_true.sql", "original_file_path": "macros/enabled_vars_one_true.sql", "name": "enabled_vars_one_true", "macro_sql": "{% macro enabled_vars_one_true(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, False) == True %}\n    {{ return(True) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(False) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--models` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/overview)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [chat](https://community.getdbt.com/) on Slack for live questions and support."}}, "exposures": {}, "selectors": {}, "disabled": [{"raw_sql": "{{ config(enabled=var('iterable__using_user_device_history', false)) }}\n\nwith user_device_history as (\n    select *\n    from {{ var('user_device_history') }}\n\n), order_user_devices as (\n    select\n      *,\n      rank() over(partition by email order by updated_at desc) as latest_device_batch_index\n    from user_device_history\n\n), latest_user_device as (\n\n    select *\n    from order_user_devices\n    where latest_device_batch_index = 1\n\n), count_devices as (\n\n    select\n      email,\n      count(distinct platform_endpoint) as count_devices\n    \n    from latest_user_device\n\n    group by email\n)\n\nselect *\nfrom count_devices", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "int_iterable", "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_int_iterable", "fqn": ["iterable", "intermediate", "int_iterable__latest_user_device"], "unique_id": "model.iterable.int_iterable__latest_user_device", "package_name": "iterable", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable", "path": "intermediate/int_iterable__latest_user_device.sql", "original_file_path": "models/intermediate/int_iterable__latest_user_device.sql", "name": "int_iterable__latest_user_device", "alias": "int_iterable__latest_user_device", "checksum": {"name": "sha256", "checksum": "e779d18495f87a7e37f1876438302b9e3e5d3d068f534557175d0e1640fa244f"}, "tags": [], "refs": [["stg_iterable__user_device_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "int_iterable", "enabled": false}}, {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        unique_key='event_id',\n        incremental_strategy = 'merge',\n        file_format = 'delta',\n        enabled=false\n    )\n}}\n\n-- leave this alone for now....setting enabled to false\nwith events as (\n\n    select *\n    from {{ var('event') }}\n\n    where lower(event_name) = 'customevent'\n    {% if is_incremental() %}\n        and updated_at > ( select max(updated_at) from {{ this }} )\n    {% endif %}\n\n), custom_events as (\n\n    select \n        events.*\n        {# {{ dbt_utils.split_part(string_text='additional_properties', delimiter_text=' : \"{', part_number=1) }} #}\n\n        {% if target.type == 'snowflake' %}\n        ,\n        additional_properties.key as custom_event_name,\n        additional_properties.value as custom_event_metadata\n        {% endif %}\n    from events\n\n    \n    {% if target.type == 'snowflake' %}\n    cross join \n        table(flatten(additional_properties)) as additional_properties\n    where additional_properties.key != '_id'\n    {% endif %}\n)\n\nselect *\nfrom custom_events", "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "config": {"enabled": false, "materialized": "incremental", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "int_iterable", "database": null, "tags": [], "full_refresh": null, "unique_key": "event_id", "incremental_strategy": "merge", "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_int_iterable", "fqn": ["iterable", "intermediate", "int_iterable__custom_events"], "unique_id": "model.iterable.int_iterable__custom_events", "package_name": "iterable", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable", "path": "intermediate/int_iterable__custom_events.sql", "original_file_path": "models/intermediate/int_iterable__custom_events.sql", "name": "int_iterable__custom_events", "alias": "int_iterable__custom_events", "checksum": {"name": "sha256", "checksum": "7fecdd3a7d98d71207e8964896ceee423505d3751d32d5ce016951cd3554611c"}, "tags": [], "refs": [["stg_iterable__event"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "int_iterable", "unique_key": "event_id", "incremental_strategy": "merge", "file_format": "delta", "enabled": false}}, {"raw_sql": "{{ config(enabled=var('iterable__using_user_device_history', false)) }}\n\n-- todo: may want to make this ephemeral or do the window functions to select the final batch of devices here\nwith base as (\n\n    select * \n    from {{ ref('stg_iterable__user_device_history_tmp') }}\n\n),\n\nfields as (\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_iterable__user_device_history_tmp')),\n                staging_columns=get_user_device_history_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select\n        application_name,\n        email,\n        index,\n        platform,\n        platform_endpoint,\n        endpoint_enabled as is_endpoint_enabled,\n        updated_at,\n        _fivetran_synced\n\n    from fields\n)\n\nselect * from final", "resource_type": "model", "depends_on": {"macros": ["macro.iterable_source.get_user_device_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": []}, "config": {"enabled": false, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "stg_iterable", "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_stg_iterable", "fqn": ["iterable_source", "stg_iterable__user_device_history"], "unique_id": "model.iterable_source.stg_iterable__user_device_history", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "stg_iterable__user_device_history.sql", "original_file_path": "models/stg_iterable__user_device_history.sql", "name": "stg_iterable__user_device_history", "alias": "stg_iterable__user_device_history", "checksum": {"name": "sha256", "checksum": "038fc63890d545027ceac924325222fcd26485092337103690397a9a3b7edcac"}, "tags": [], "refs": [["stg_iterable__user_device_history_tmp"], ["stg_iterable__user_device_history_tmp"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_iterable", "enabled": false}}, {"raw_sql": "{{ config(enabled=var('iterable__using_user_device_history', false)) }}\n\nselect * \nfrom {{ var('user_device_history') }}", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "stg_iterable", "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "iterable_integration_tests_stg_iterable", "fqn": ["iterable_source", "tmp", "stg_iterable__user_device_history_tmp"], "unique_id": "model.iterable_source.stg_iterable__user_device_history_tmp", "package_name": "iterable_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/Iterable/dbt_iterable/integration_tests/dbt_modules/iterable_source", "path": "tmp/stg_iterable__user_device_history_tmp.sql", "original_file_path": "models/tmp/stg_iterable__user_device_history_tmp.sql", "name": "stg_iterable__user_device_history_tmp", "alias": "stg_iterable__user_device_history_tmp", "checksum": {"name": "sha256", "checksum": "ae79626abf8045fce66d3bd88f550ffd3b92358a64656a7749133e4b8d70f32b"}, "tags": [], "refs": [["user_device_history_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_iterable", "enabled": false}}], "parent_map": {"seed.iterable_integration_tests.user_unsubscribed_message_type_history_data": [], "seed.iterable_integration_tests.user_history_data": [], "seed.iterable_integration_tests.campaign_suppression_list_history_data": [], "seed.iterable_integration_tests.campaign_list_history_data": [], "seed.iterable_integration_tests.template_history_data": [], "seed.iterable_integration_tests.event_extension_data": [], "seed.iterable_integration_tests.channel_data": [], "seed.iterable_integration_tests.user_unsubscribed_channel_history_data": [], "seed.iterable_integration_tests.user_device_history_data": [], "seed.iterable_integration_tests.campaign_label_history_data": [], "seed.iterable_integration_tests.campaign_history_data": [], "seed.iterable_integration_tests.message_type_data": [], "seed.iterable_integration_tests.campaign_metrics_data": [], "seed.iterable_integration_tests.list_data": [], "seed.iterable_integration_tests.event_data": [], "model.iterable.iterable__events": ["model.iterable.int_iterable__latest_template", "model.iterable.int_iterable__latest_user", "model.iterable.int_iterable__message_type_channel", "model.iterable.int_iterable__recurring_campaigns", "model.iterable_source.stg_iterable__event", "model.iterable_source.stg_iterable__event_extension", "model.iterable_source.stg_iterable__event_extension"], "model.iterable.iterable__campaigns": ["model.iterable.int_iterable__campaign_event_metrics", "model.iterable.int_iterable__campaign_event_metrics", "model.iterable.int_iterable__campaign_labels", "model.iterable.int_iterable__campaign_lists", "model.iterable.int_iterable__latest_template", "model.iterable.int_iterable__recurring_campaigns"], "model.iterable.iterable__user_unsubscriptions": ["model.iterable.int_iterable__message_type_channel", "model.iterable_source.stg_iterable__user_unsub_message_type_history", "model.iterable_source.stg_iterable__user_unsubscribed_channel_history"], "model.iterable.iterable__users": ["model.iterable.int_iterable__list_user_unnest", "model.iterable.int_iterable__user_event_metrics", "model.iterable.int_iterable__user_event_metrics"], "model.iterable.iterable__user_campaign": ["model.iterable.iterable__events"], "model.iterable.iterable__list_user_history": ["model.iterable.int_iterable__list_user_unnest", "model.iterable_source.stg_iterable__list"], "model.iterable.int_iterable__list_user_unnest": ["model.iterable.int_iterable__list_user_history"], "model.iterable.int_iterable__latest_campaign": ["model.iterable_source.stg_iterable__campaign_history"], "model.iterable.int_iterable__campaign_event_metrics": ["model.iterable.iterable__user_campaign", "model.iterable.iterable__user_campaign"], "model.iterable.int_iterable__campaign_lists": ["model.iterable_source.stg_iterable__campaign_list_history", "model.iterable_source.stg_iterable__campaign_suppression_list_history"], "model.iterable.int_iterable__latest_user": ["model.iterable_source.stg_iterable__user_history"], "model.iterable.int_iterable__campaign_labels": ["model.iterable_source.stg_iterable__campaign_label_history"], "model.iterable.int_iterable__message_type_channel": ["model.iterable_source.stg_iterable__channel", "model.iterable_source.stg_iterable__message_type"], "model.iterable.int_iterable__latest_template": ["model.iterable.int_iterable__message_type_channel", "model.iterable_source.stg_iterable__template_history"], "model.iterable.int_iterable__user_event_metrics": ["model.iterable.iterable__user_campaign", "model.iterable.iterable__user_campaign"], "model.iterable.int_iterable__list_user_history": ["model.iterable_source.stg_iterable__user_history"], "model.iterable.int_iterable__recurring_campaigns": ["model.iterable.int_iterable__latest_campaign"], "test.iterable.not_null_iterable__campaigns_campaign_id": ["model.iterable.iterable__campaigns"], "test.iterable.dbt_utils_unique_combination_of_columns_iterable__campaigns_campaign_id__experiment_id": ["model.iterable.iterable__campaigns"], "test.iterable.unique_iterable__events_event_id": ["model.iterable.iterable__events"], "test.iterable.not_null_iterable__events_event_id": ["model.iterable.iterable__events"], "test.iterable.dbt_utils_unique_combination_of_columns_iterable__list_user_history_user_email__list_id__user_updated_at": ["model.iterable.iterable__list_user_history"], "test.iterable.not_null_iterable__user_campaign_user_email": ["model.iterable.iterable__user_campaign"], "test.iterable.dbt_utils_unique_combination_of_columns_iterable__user_campaign_user_email__campaign_id__experiment_id": ["model.iterable.iterable__user_campaign"], "test.iterable.dbt_utils_unique_combination_of_columns_iterable__user_unsubscriptions_email__message_type_id__is_unsubscribed_channel_wide": ["model.iterable.iterable__user_unsubscriptions"], "test.iterable.unique_iterable__users_email": ["model.iterable.iterable__users"], "test.iterable.not_null_iterable__users_email": ["model.iterable.iterable__users"], "model.iterable_source.stg_iterable__user_unsub_message_type_history": ["model.iterable_source.stg_iterable__user_unsub_message_type_history_tmp", "model.iterable_source.stg_iterable__user_unsub_message_type_history_tmp"], "model.iterable_source.stg_iterable__event_extension": ["model.iterable_source.stg_iterable__event_extension_tmp", "model.iterable_source.stg_iterable__event_extension_tmp"], "model.iterable_source.stg_iterable__list": ["model.iterable_source.stg_iterable__list_tmp", "model.iterable_source.stg_iterable__list_tmp"], "model.iterable_source.stg_iterable__campaign_suppression_list_history": ["model.iterable_source.stg_iterable__campaign_suppression_list_history_tmp", "model.iterable_source.stg_iterable__campaign_suppression_list_history_tmp"], "model.iterable_source.stg_iterable__campaign_list_history": ["model.iterable_source.stg_iterable__campaign_list_history_tmp", "model.iterable_source.stg_iterable__campaign_list_history_tmp"], "model.iterable_source.stg_iterable__user_history": ["model.iterable_source.stg_iterable__user_history_tmp", "model.iterable_source.stg_iterable__user_history_tmp"], "model.iterable_source.stg_iterable__campaign_label_history": ["model.iterable_source.stg_iterable__campaign_label_history_tmp", "model.iterable_source.stg_iterable__campaign_label_history_tmp"], "model.iterable_source.stg_iterable__event": ["model.iterable_source.stg_iterable__event_tmp", "model.iterable_source.stg_iterable__event_tmp"], "model.iterable_source.stg_iterable__user_unsubscribed_channel_history": ["model.iterable_source.stg_iterable__user_unsubscribed_channel_history_tmp", "model.iterable_source.stg_iterable__user_unsubscribed_channel_history_tmp"], "model.iterable_source.stg_iterable__template_history": ["model.iterable_source.stg_iterable__template_history_tmp", "model.iterable_source.stg_iterable__template_history_tmp"], "model.iterable_source.stg_iterable__channel": ["model.iterable_source.stg_iterable__channel_tmp", "model.iterable_source.stg_iterable__channel_tmp"], "model.iterable_source.stg_iterable__campaign_history": ["model.iterable_source.stg_iterable__campaign_history_tmp", "model.iterable_source.stg_iterable__campaign_history_tmp"], "model.iterable_source.stg_iterable__message_type": ["model.iterable_source.stg_iterable__message_type_tmp", "model.iterable_source.stg_iterable__message_type_tmp"], "model.iterable_source.stg_iterable__campaign_history_tmp": ["seed.iterable_integration_tests.campaign_history_data"], "model.iterable_source.stg_iterable__list_tmp": ["seed.iterable_integration_tests.list_data"], "model.iterable_source.stg_iterable__campaign_suppression_list_history_tmp": ["seed.iterable_integration_tests.campaign_suppression_list_history_data"], "model.iterable_source.stg_iterable__template_history_tmp": ["seed.iterable_integration_tests.template_history_data"], "model.iterable_source.stg_iterable__campaign_list_history_tmp": ["seed.iterable_integration_tests.campaign_list_history_data"], "model.iterable_source.stg_iterable__channel_tmp": ["seed.iterable_integration_tests.channel_data"], "model.iterable_source.stg_iterable__event_tmp": ["seed.iterable_integration_tests.event_data"], "model.iterable_source.stg_iterable__user_unsubscribed_channel_history_tmp": ["seed.iterable_integration_tests.user_unsubscribed_channel_history_data"], "model.iterable_source.stg_iterable__user_unsub_message_type_history_tmp": ["seed.iterable_integration_tests.user_unsubscribed_message_type_history_data"], "model.iterable_source.stg_iterable__event_extension_tmp": ["seed.iterable_integration_tests.event_extension_data"], "model.iterable_source.stg_iterable__campaign_label_history_tmp": ["seed.iterable_integration_tests.campaign_label_history_data"], "model.iterable_source.stg_iterable__user_history_tmp": ["seed.iterable_integration_tests.user_history_data"], "model.iterable_source.stg_iterable__message_type_tmp": ["seed.iterable_integration_tests.message_type_data"], "test.iterable_source.not_null_stg_iterable__campaign_history_campaign_id": ["model.iterable_source.stg_iterable__campaign_history"], "test.iterable_source.dbt_utils_unique_combination_of_columns_stg_iterable__campaign_history_campaign_id__updated_at": ["model.iterable_source.stg_iterable__campaign_history"], "test.iterable_source.not_null_stg_iterable__campaign_label_history_campaign_id": ["model.iterable_source.stg_iterable__campaign_label_history"], "test.iterable_source.not_null_stg_iterable__campaign_list_history_campaign_id": ["model.iterable_source.stg_iterable__campaign_list_history"], "test.iterable_source.not_null_stg_iterable__campaign_suppression_list_history_campaign_id": ["model.iterable_source.stg_iterable__campaign_suppression_list_history"], "test.iterable_source.unique_stg_iterable__channel_channel_id": ["model.iterable_source.stg_iterable__channel"], "test.iterable_source.not_null_stg_iterable__channel_channel_id": ["model.iterable_source.stg_iterable__channel"], "test.iterable_source.unique_stg_iterable__event_event_id": ["model.iterable_source.stg_iterable__event"], "test.iterable_source.not_null_stg_iterable__event_event_id": ["model.iterable_source.stg_iterable__event"], "test.iterable_source.unique_stg_iterable__event_extension_event_id": ["model.iterable_source.stg_iterable__event_extension"], "test.iterable_source.not_null_stg_iterable__event_extension_event_id": ["model.iterable_source.stg_iterable__event_extension"], "test.iterable_source.unique_stg_iterable__list_list_id": ["model.iterable_source.stg_iterable__list"], "test.iterable_source.not_null_stg_iterable__list_list_id": ["model.iterable_source.stg_iterable__list"], "test.iterable_source.unique_stg_iterable__message_type_message_type_id": ["model.iterable_source.stg_iterable__message_type"], "test.iterable_source.not_null_stg_iterable__message_type_message_type_id": ["model.iterable_source.stg_iterable__message_type"], "test.iterable_source.not_null_stg_iterable__template_history_template_id": ["model.iterable_source.stg_iterable__template_history"], "test.iterable_source.dbt_utils_unique_combination_of_columns_stg_iterable__template_history_template_id__updated_at": ["model.iterable_source.stg_iterable__template_history"], "test.iterable_source.not_null_stg_iterable__user_history_email": ["model.iterable_source.stg_iterable__user_history"], "test.iterable_source.dbt_utils_unique_combination_of_columns_stg_iterable__user_history_email__updated_at": ["model.iterable_source.stg_iterable__user_history"], "test.iterable_source.not_null_stg_iterable__user_unsubscribed_channel_history_channel_id": ["model.iterable_source.stg_iterable__user_unsubscribed_channel_history"], "test.iterable_source.not_null_stg_iterable__user_unsub_message_type_history_message_type_id": ["model.iterable_source.stg_iterable__user_unsub_message_type_history"], "test.iterable_source.dbt_utils_unique_combination_of_columns_stg_iterable__user_device_history_email__updated_at__index": [], "source.iterable_source.iterable.campaign_history": [], "source.iterable_source.iterable.campaign_label_history": [], "source.iterable_source.iterable.campaign_list_history": [], "source.iterable_source.iterable.campaign_supression_list_history": [], "source.iterable_source.iterable.campaign_suppression_list_history": [], "source.iterable_source.iterable.channel": [], "source.iterable_source.iterable.event": [], "source.iterable_source.iterable.event_extension": [], "source.iterable_source.iterable.list": [], "source.iterable_source.iterable.message_type": [], "source.iterable_source.iterable.template_history": [], "source.iterable_source.iterable.user_history": [], "source.iterable_source.iterable.user_device_history": [], "source.iterable_source.iterable.user_unsubscribed_channel_history": [], "source.iterable_source.iterable.user_unsubscribed_message_type_history": []}, "child_map": {"seed.iterable_integration_tests.user_unsubscribed_message_type_history_data": ["model.iterable_source.stg_iterable__user_unsub_message_type_history_tmp"], "seed.iterable_integration_tests.user_history_data": ["model.iterable_source.stg_iterable__user_history_tmp"], "seed.iterable_integration_tests.campaign_suppression_list_history_data": ["model.iterable_source.stg_iterable__campaign_suppression_list_history_tmp"], "seed.iterable_integration_tests.campaign_list_history_data": ["model.iterable_source.stg_iterable__campaign_list_history_tmp"], "seed.iterable_integration_tests.template_history_data": ["model.iterable_source.stg_iterable__template_history_tmp"], "seed.iterable_integration_tests.event_extension_data": ["model.iterable_source.stg_iterable__event_extension_tmp"], "seed.iterable_integration_tests.channel_data": ["model.iterable_source.stg_iterable__channel_tmp"], "seed.iterable_integration_tests.user_unsubscribed_channel_history_data": ["model.iterable_source.stg_iterable__user_unsubscribed_channel_history_tmp"], "seed.iterable_integration_tests.user_device_history_data": [], "seed.iterable_integration_tests.campaign_label_history_data": ["model.iterable_source.stg_iterable__campaign_label_history_tmp"], "seed.iterable_integration_tests.campaign_history_data": ["model.iterable_source.stg_iterable__campaign_history_tmp"], "seed.iterable_integration_tests.message_type_data": ["model.iterable_source.stg_iterable__message_type_tmp"], "seed.iterable_integration_tests.campaign_metrics_data": [], "seed.iterable_integration_tests.list_data": ["model.iterable_source.stg_iterable__list_tmp"], "seed.iterable_integration_tests.event_data": ["model.iterable_source.stg_iterable__event_tmp"], "model.iterable.iterable__events": ["model.iterable.iterable__user_campaign", "test.iterable.not_null_iterable__events_event_id", "test.iterable.unique_iterable__events_event_id"], "model.iterable.iterable__campaigns": ["test.iterable.dbt_utils_unique_combination_of_columns_iterable__campaigns_campaign_id__experiment_id", "test.iterable.not_null_iterable__campaigns_campaign_id"], "model.iterable.iterable__user_unsubscriptions": ["test.iterable.dbt_utils_unique_combination_of_columns_iterable__user_unsubscriptions_email__message_type_id__is_unsubscribed_channel_wide"], "model.iterable.iterable__users": ["test.iterable.not_null_iterable__users_email", "test.iterable.unique_iterable__users_email"], "model.iterable.iterable__user_campaign": ["model.iterable.int_iterable__campaign_event_metrics", "model.iterable.int_iterable__campaign_event_metrics", "model.iterable.int_iterable__user_event_metrics", "model.iterable.int_iterable__user_event_metrics", "test.iterable.dbt_utils_unique_combination_of_columns_iterable__user_campaign_user_email__campaign_id__experiment_id", "test.iterable.not_null_iterable__user_campaign_user_email"], "model.iterable.iterable__list_user_history": ["test.iterable.dbt_utils_unique_combination_of_columns_iterable__list_user_history_user_email__list_id__user_updated_at"], "model.iterable.int_iterable__list_user_unnest": ["model.iterable.iterable__list_user_history", "model.iterable.iterable__users"], "model.iterable.int_iterable__latest_campaign": ["model.iterable.int_iterable__recurring_campaigns"], "model.iterable.int_iterable__campaign_event_metrics": ["model.iterable.iterable__campaigns", "model.iterable.iterable__campaigns"], "model.iterable.int_iterable__campaign_lists": ["model.iterable.iterable__campaigns"], "model.iterable.int_iterable__latest_user": ["model.iterable.iterable__events"], "model.iterable.int_iterable__campaign_labels": ["model.iterable.iterable__campaigns"], "model.iterable.int_iterable__message_type_channel": ["model.iterable.int_iterable__latest_template", "model.iterable.iterable__events", "model.iterable.iterable__user_unsubscriptions"], "model.iterable.int_iterable__latest_template": ["model.iterable.iterable__campaigns", "model.iterable.iterable__events"], "model.iterable.int_iterable__user_event_metrics": ["model.iterable.iterable__users", "model.iterable.iterable__users"], "model.iterable.int_iterable__list_user_history": ["model.iterable.int_iterable__list_user_unnest"], "model.iterable.int_iterable__recurring_campaigns": ["model.iterable.iterable__campaigns", "model.iterable.iterable__events"], "test.iterable.not_null_iterable__campaigns_campaign_id": [], "test.iterable.dbt_utils_unique_combination_of_columns_iterable__campaigns_campaign_id__experiment_id": [], "test.iterable.unique_iterable__events_event_id": [], "test.iterable.not_null_iterable__events_event_id": [], "test.iterable.dbt_utils_unique_combination_of_columns_iterable__list_user_history_user_email__list_id__user_updated_at": [], "test.iterable.not_null_iterable__user_campaign_user_email": [], "test.iterable.dbt_utils_unique_combination_of_columns_iterable__user_campaign_user_email__campaign_id__experiment_id": [], "test.iterable.dbt_utils_unique_combination_of_columns_iterable__user_unsubscriptions_email__message_type_id__is_unsubscribed_channel_wide": [], "test.iterable.unique_iterable__users_email": [], "test.iterable.not_null_iterable__users_email": [], "model.iterable_source.stg_iterable__user_unsub_message_type_history": ["model.iterable.iterable__user_unsubscriptions", "test.iterable_source.not_null_stg_iterable__user_unsub_message_type_history_message_type_id"], "model.iterable_source.stg_iterable__event_extension": ["model.iterable.iterable__events", "model.iterable.iterable__events", "test.iterable_source.not_null_stg_iterable__event_extension_event_id", "test.iterable_source.unique_stg_iterable__event_extension_event_id"], "model.iterable_source.stg_iterable__list": ["model.iterable.iterable__list_user_history", "test.iterable_source.not_null_stg_iterable__list_list_id", "test.iterable_source.unique_stg_iterable__list_list_id"], "model.iterable_source.stg_iterable__campaign_suppression_list_history": ["model.iterable.int_iterable__campaign_lists", "test.iterable_source.not_null_stg_iterable__campaign_suppression_list_history_campaign_id"], "model.iterable_source.stg_iterable__campaign_list_history": ["model.iterable.int_iterable__campaign_lists", "test.iterable_source.not_null_stg_iterable__campaign_list_history_campaign_id"], "model.iterable_source.stg_iterable__user_history": ["model.iterable.int_iterable__latest_user", "model.iterable.int_iterable__list_user_history", "test.iterable_source.dbt_utils_unique_combination_of_columns_stg_iterable__user_history_email__updated_at", "test.iterable_source.not_null_stg_iterable__user_history_email"], "model.iterable_source.stg_iterable__campaign_label_history": ["model.iterable.int_iterable__campaign_labels", "test.iterable_source.not_null_stg_iterable__campaign_label_history_campaign_id"], "model.iterable_source.stg_iterable__event": ["model.iterable.iterable__events", "test.iterable_source.not_null_stg_iterable__event_event_id", "test.iterable_source.unique_stg_iterable__event_event_id"], "model.iterable_source.stg_iterable__user_unsubscribed_channel_history": ["model.iterable.iterable__user_unsubscriptions", "test.iterable_source.not_null_stg_iterable__user_unsubscribed_channel_history_channel_id"], "model.iterable_source.stg_iterable__template_history": ["model.iterable.int_iterable__latest_template", "test.iterable_source.dbt_utils_unique_combination_of_columns_stg_iterable__template_history_template_id__updated_at", "test.iterable_source.not_null_stg_iterable__template_history_template_id"], "model.iterable_source.stg_iterable__channel": ["model.iterable.int_iterable__message_type_channel", "test.iterable_source.not_null_stg_iterable__channel_channel_id", "test.iterable_source.unique_stg_iterable__channel_channel_id"], "model.iterable_source.stg_iterable__campaign_history": ["model.iterable.int_iterable__latest_campaign", "test.iterable_source.dbt_utils_unique_combination_of_columns_stg_iterable__campaign_history_campaign_id__updated_at", "test.iterable_source.not_null_stg_iterable__campaign_history_campaign_id"], "model.iterable_source.stg_iterable__message_type": ["model.iterable.int_iterable__message_type_channel", "test.iterable_source.not_null_stg_iterable__message_type_message_type_id", "test.iterable_source.unique_stg_iterable__message_type_message_type_id"], "model.iterable_source.stg_iterable__campaign_history_tmp": ["model.iterable_source.stg_iterable__campaign_history", "model.iterable_source.stg_iterable__campaign_history"], "model.iterable_source.stg_iterable__list_tmp": ["model.iterable_source.stg_iterable__list", "model.iterable_source.stg_iterable__list"], "model.iterable_source.stg_iterable__campaign_suppression_list_history_tmp": ["model.iterable_source.stg_iterable__campaign_suppression_list_history", "model.iterable_source.stg_iterable__campaign_suppression_list_history"], "model.iterable_source.stg_iterable__template_history_tmp": ["model.iterable_source.stg_iterable__template_history", "model.iterable_source.stg_iterable__template_history"], "model.iterable_source.stg_iterable__campaign_list_history_tmp": ["model.iterable_source.stg_iterable__campaign_list_history", "model.iterable_source.stg_iterable__campaign_list_history"], "model.iterable_source.stg_iterable__channel_tmp": ["model.iterable_source.stg_iterable__channel", "model.iterable_source.stg_iterable__channel"], "model.iterable_source.stg_iterable__event_tmp": ["model.iterable_source.stg_iterable__event", "model.iterable_source.stg_iterable__event"], "model.iterable_source.stg_iterable__user_unsubscribed_channel_history_tmp": ["model.iterable_source.stg_iterable__user_unsubscribed_channel_history", "model.iterable_source.stg_iterable__user_unsubscribed_channel_history"], "model.iterable_source.stg_iterable__user_unsub_message_type_history_tmp": ["model.iterable_source.stg_iterable__user_unsub_message_type_history", "model.iterable_source.stg_iterable__user_unsub_message_type_history"], "model.iterable_source.stg_iterable__event_extension_tmp": ["model.iterable_source.stg_iterable__event_extension", "model.iterable_source.stg_iterable__event_extension"], "model.iterable_source.stg_iterable__campaign_label_history_tmp": ["model.iterable_source.stg_iterable__campaign_label_history", "model.iterable_source.stg_iterable__campaign_label_history"], "model.iterable_source.stg_iterable__user_history_tmp": ["model.iterable_source.stg_iterable__user_history", "model.iterable_source.stg_iterable__user_history"], "model.iterable_source.stg_iterable__message_type_tmp": ["model.iterable_source.stg_iterable__message_type", "model.iterable_source.stg_iterable__message_type"], "test.iterable_source.not_null_stg_iterable__campaign_history_campaign_id": [], "test.iterable_source.dbt_utils_unique_combination_of_columns_stg_iterable__campaign_history_campaign_id__updated_at": [], "test.iterable_source.not_null_stg_iterable__campaign_label_history_campaign_id": [], "test.iterable_source.not_null_stg_iterable__campaign_list_history_campaign_id": [], "test.iterable_source.not_null_stg_iterable__campaign_suppression_list_history_campaign_id": [], "test.iterable_source.unique_stg_iterable__channel_channel_id": [], "test.iterable_source.not_null_stg_iterable__channel_channel_id": [], "test.iterable_source.unique_stg_iterable__event_event_id": [], "test.iterable_source.not_null_stg_iterable__event_event_id": [], "test.iterable_source.unique_stg_iterable__event_extension_event_id": [], "test.iterable_source.not_null_stg_iterable__event_extension_event_id": [], "test.iterable_source.unique_stg_iterable__list_list_id": [], "test.iterable_source.not_null_stg_iterable__list_list_id": [], "test.iterable_source.unique_stg_iterable__message_type_message_type_id": [], "test.iterable_source.not_null_stg_iterable__message_type_message_type_id": [], "test.iterable_source.not_null_stg_iterable__template_history_template_id": [], "test.iterable_source.dbt_utils_unique_combination_of_columns_stg_iterable__template_history_template_id__updated_at": [], "test.iterable_source.not_null_stg_iterable__user_history_email": [], "test.iterable_source.dbt_utils_unique_combination_of_columns_stg_iterable__user_history_email__updated_at": [], "test.iterable_source.not_null_stg_iterable__user_unsubscribed_channel_history_channel_id": [], "test.iterable_source.not_null_stg_iterable__user_unsub_message_type_history_message_type_id": [], "test.iterable_source.dbt_utils_unique_combination_of_columns_stg_iterable__user_device_history_email__updated_at__index": [], "source.iterable_source.iterable.campaign_history": [], "source.iterable_source.iterable.campaign_label_history": [], "source.iterable_source.iterable.campaign_list_history": [], "source.iterable_source.iterable.campaign_supression_list_history": [], "source.iterable_source.iterable.campaign_suppression_list_history": [], "source.iterable_source.iterable.channel": [], "source.iterable_source.iterable.event": [], "source.iterable_source.iterable.event_extension": [], "source.iterable_source.iterable.list": [], "source.iterable_source.iterable.message_type": [], "source.iterable_source.iterable.template_history": [], "source.iterable_source.iterable.user_history": [], "source.iterable_source.iterable.user_device_history": [], "source.iterable_source.iterable.user_unsubscribed_channel_history": [], "source.iterable_source.iterable.user_unsubscribed_message_type_history": []}}